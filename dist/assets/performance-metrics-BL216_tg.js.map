{"version":3,"file":"performance-metrics-BL216_tg.js","sources":["../../src/components/analytics/performance-metrics.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Tooltip, Input } from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { metricVariants, listItemVariants } from \"../../utils/animations\";\r\nimport { Trade } from \"../../types/trade\";\r\nimport { calcWeightedRewardRisk } from \"../../utils/tradeCalculations\";\r\nimport { useTruePortfolioWithTrades } from \"../../hooks/use-true-portfolio-with-trades\";\r\nimport { useAccountingCalculations, useAccountingMethodDisplay } from \"../../hooks/use-accounting-calculations\";\r\nimport { useGlobalFilter } from \"../../context/GlobalFilterContext\";\r\nimport { useAccountingMethod } from \"../../context/AccountingMethodContext\";\r\nimport { isTradeInGlobalFilter } from \"../../utils/dateFilterUtils\";\r\nimport MobileTooltip from \"../ui/MobileTooltip\";\r\n\r\ninterface MetricProps {\r\n  label: string;\r\n  value: string | number;\r\n  change?: string | number;\r\n  tooltip?: string;\r\n  isPositive?: boolean;\r\n  isNegative?: boolean;\r\n  isPercentage?: boolean;\r\n  isEditing?: boolean;\r\n  onValueChange?: (value: string) => void;\r\n  index?: number;\r\n}\r\n\r\nconst Metric: React.FC<MetricProps> = React.memo(({\r\n  label,\r\n  value,\r\n  change,\r\n  tooltip,\r\n  isPositive,\r\n  isNegative,\r\n  isPercentage,\r\n  isEditing,\r\n  onValueChange,\r\n  index = 0\r\n}) => {\r\n  const [editValue, setEditValue] = React.useState(value.toString());\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (isEditing && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isEditing]);\r\n\r\n  const handleBlur = () => {\r\n    if (onValueChange) {\r\n      onValueChange(editValue);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"flex flex-col bg-content2/40 p-2 rounded-lg will-change-transform\"\r\n      variants={metricVariants}\r\n      initial=\"initial\"\r\n      animate=\"animate\"\r\n      whileHover=\"hover\"\r\n      custom={index}\r\n      transition={{ delay: index * 0.1 }}\r\n    >\r\n      <motion.div\r\n        className=\"flex items-center gap-1 text-default-600 text-xs font-medium mb-0.5 will-change-transform\"\r\n        variants={listItemVariants}\r\n      >\r\n        {label}\r\n        {tooltip && (\r\n          <MobileTooltip content={tooltip}>\r\n            <motion.span\r\n              whileHover={{ scale: 1.2 }}\r\n              whileTap={{ scale: 0.9 }}\r\n            >\r\n              <Icon icon=\"lucide:info\" className=\"w-3.5 h-3.5 text-default-400\" />\r\n            </motion.span>\r\n          </MobileTooltip>\r\n        )}\r\n      </motion.div>\r\n      <motion.div\r\n        className=\"flex items-end gap-2\"\r\n        variants={listItemVariants}\r\n      >\r\n        <AnimatePresence mode=\"wait\">\r\n          {isEditing ? (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -10 }}\r\n              transition={{ duration: 0.2 }}\r\n            >\r\n              <Input\r\n                ref={inputRef}\r\n                type=\"text\"\r\n                value={editValue}\r\n                onValueChange={setEditValue}\r\n                onBlur={handleBlur}\r\n                size=\"sm\"\r\n                variant=\"bordered\"\r\n                className=\"max-w-[100px]\"\r\n                classNames={{\r\n                  input: \"text-right font-semibold text-base\",\r\n                  inputWrapper: \"h-7 min-h-unit-7\"\r\n                }}\r\n                endContent={isPercentage && <span className=\"text-default-400 text-sm\">%</span>}\r\n              />\r\n            </motion.div>\r\n          ) : (\r\n            <motion.span\r\n              className=\"text-lg font-semibold tracking-tight\"\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n              transition={{ duration: 0.2 }}\r\n            >\r\n              {isPercentage ? `${value}%` : value}\r\n            </motion.span>\r\n          )}\r\n        </AnimatePresence>\r\n        {change !== undefined && (\r\n          <motion.span\r\n            className={`text-sm ${isPositive ? 'text-success' : isNegative ? 'text-danger' : 'text-default-500'} flex items-center font-medium`}\r\n            initial={{ opacity: 0, x: -10 }}\r\n            animate={{ opacity: 1, x: 0 }}\r\n            transition={{ delay: 0.2 }}\r\n          >\r\n            {isPositive && (\r\n              <motion.span\r\n                initial={{ scale: 0 }}\r\n                animate={{ scale: 1 }}\r\n                transition={{ type: \"spring\", stiffness: 500, delay: 0.3 }}\r\n              >\r\n                <Icon icon=\"lucide:trending-up\" className=\"w-3 h-3 mr-0.5\" />\r\n              </motion.span>\r\n            )}\r\n            {isNegative && (\r\n              <motion.span\r\n                initial={{ scale: 0 }}\r\n                animate={{ scale: 1 }}\r\n                transition={{ type: \"spring\", stiffness: 500, delay: 0.3 }}\r\n              >\r\n                <Icon icon=\"lucide:trending-down\" className=\"w-3 h-3 mr-0.5\" />\r\n              </motion.span>\r\n            )}\r\n            {isPercentage ? `${change}%` : change}\r\n          </motion.span>\r\n        )}\r\n      </motion.div>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\ninterface PerformanceMetricsProps {\r\n  trades: Trade[];\r\n  isEditing?: boolean;\r\n}\r\n\r\nexport const PerformanceMetrics: React.FC<PerformanceMetricsProps> = ({ trades, isEditing = false }) => {\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n  const { filter: globalFilter } = useGlobalFilter();\r\n\r\n  // Filter trades based on global filter and accounting method\r\n  const filteredTrades = React.useMemo(() => {\r\n    if (globalFilter.type === 'all') {\r\n      return trades; // No filtering for \"All Time\"\r\n    }\r\n\r\n    return trades.filter(trade => isTradeInGlobalFilter(trade, globalFilter, useCashBasis));\r\n  }, [trades, globalFilter, useCashBasis]);\r\n\r\n  const { portfolioSize, getPortfolioSize } = useTruePortfolioWithTrades(filteredTrades);\r\n  const { totalTrades, winRate, avgPosMove, avgNegMove, avgPositionSize, avgHoldingDays, avgR, planFollowed, openPositions } = useAccountingCalculations(filteredTrades);\r\n  const { displayName } = useAccountingMethodDisplay();\r\n\r\n  // Calculate remaining metrics not in shared hook\r\n  // Cash percentage - only include open positions, use proper cash basis logic\r\n  let openAndPartialTrades;\r\n\r\n  if (useCashBasis) {\r\n    // CRITICAL FIX: Use the same logic as other components for cash basis\r\n    // For cash basis: Get all expanded trades or original trades for open/partial positions\r\n    // Use filtered trades to respect global filter\r\n    const openTradesFlat = filteredTrades\r\n      .filter(t => t.positionStatus === 'Open' || t.positionStatus === 'Partial')\r\n      .flatMap(trade =>\r\n        Array.isArray(trade._expandedTrades) && trade._expandedTrades.length > 0\r\n          ? trade._expandedTrades.filter(t => t.positionStatus === 'Open' || t.positionStatus === 'Partial')\r\n          : [trade]\r\n      );\r\n\r\n    // Group by original ID to avoid double counting\r\n    const tradeGroups = new Map<string, Trade[]>();\r\n    openTradesFlat.forEach(trade => {\r\n      const originalId = trade.id.split('_exit_')[0];\r\n      if (!tradeGroups.has(originalId)) {\r\n        tradeGroups.set(originalId, []);\r\n      }\r\n      tradeGroups.get(originalId)!.push(trade);\r\n    });\r\n\r\n    // Use representative trade from each group (they should have same allocation data)\r\n    openAndPartialTrades = Array.from(tradeGroups.entries()).map(([originalId, trades]) => {\r\n      // Use the first trade as representative (they all have the same original allocation data)\r\n      return trades[0];\r\n    });\r\n  } else {\r\n    // For accrual basis: Use filtered trades to respect global filter\r\n    openAndPartialTrades = filteredTrades.filter(t => t.positionStatus === 'Open' || t.positionStatus === 'Partial');\r\n  }\r\n\r\n  const cashPercentage = 100 - openAndPartialTrades.reduce((sum, t) => {\r\n    // For partial positions, calculate remaining allocation\r\n    const remainingAllocation = t.positionStatus === 'Partial'\r\n      ? (t.allocation || 0) * (t.openQty || 0) / ((t.openQty || 0) + (t.exitedQty || 0))\r\n      : (t.allocation || 0);\r\n    return sum + remainingAllocation;\r\n  }, 0);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n\r\n      <motion.div\r\n        className=\"grid grid-cols-2 gap-4\"\r\n        initial=\"initial\"\r\n        animate=\"animate\"\r\n        variants={{\r\n          animate: {\r\n            transition: {\r\n              staggerChildren: 0.05\r\n            }\r\n          }\r\n        }}\r\n      >\r\n      <Metric\r\n        label=\"Total Trades\"\r\n        value={totalTrades}\r\n        isEditing={isEditing}\r\n        index={0}\r\n      />\r\n      <Metric\r\n        label=\"Win Rate\"\r\n        value={winRate.toFixed(2)}\r\n        isPositive\r\n        isPercentage\r\n        tooltip=\"Percentage of profitable trades\"\r\n        isEditing={isEditing}\r\n        index={1}\r\n      />\r\n      <Metric\r\n        label=\"Avg + Move\"\r\n        value={avgPosMove.toFixed(2)}\r\n        isPercentage\r\n        tooltip=\"Average percentage gain on winning trades\"\r\n        isEditing={isEditing}\r\n        index={2}\r\n      />\r\n      <Metric\r\n        label=\"Avg - Move\"\r\n        value={avgNegMove.toFixed(2)}\r\n        isPercentage\r\n        tooltip=\"Average percentage loss on losing trades\"\r\n        isEditing={isEditing}\r\n        index={3}\r\n      />\r\n      <Metric\r\n        label=\"Avg Position Size\"\r\n        value={avgPositionSize.toFixed(2)}\r\n        isPercentage\r\n        tooltip=\"Average position size as percentage of portfolio\"\r\n        isEditing={isEditing}\r\n        index={4}\r\n      />\r\n      <Metric\r\n        label=\"Avg Holding Days\"\r\n        value={avgHoldingDays.toFixed(2)}\r\n        tooltip=\"Average number of days positions are held\"\r\n        isEditing={isEditing}\r\n        index={5}\r\n      />\r\n      <Metric\r\n        label=\"Plan Followed\"\r\n        value={planFollowed.toFixed(2)}\r\n        isPercentage\r\n        tooltip=\"Percentage of trades that followed the trading plan\"\r\n        isEditing={isEditing}\r\n        index={6}\r\n      />\r\n      <Metric\r\n        label=\"Avg R\"\r\n        value={avgR.toFixed(2)}\r\n        tooltip=\"Average reward-to-risk ratio across all trades\"\r\n        isEditing={isEditing}\r\n        index={7}\r\n      />\r\n      <Metric\r\n        label=\"Open Positions\"\r\n        value={openPositions}\r\n        tooltip=\"Number of currently open positions\"\r\n        isEditing={isEditing}\r\n        index={8}\r\n      />\r\n      <Metric\r\n        label=\"Cash\"\r\n        value={cashPercentage.toFixed(2)}\r\n        isPercentage\r\n        tooltip=\"Percentage of portfolio in cash (approximate)\"\r\n        isEditing={isEditing}\r\n        index={9}\r\n      />\r\n\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};"],"names":["Metric","memo","label","value","change","tooltip","isPositive","isNegative","isPercentage","isEditing","onValueChange","index","editValue","setEditValue","React","useState","toString","inputRef","useRef","useEffect","current","focus","_jsxs","motion","div","className","variants","metricVariants","initial","animate","whileHover","custom","transition","delay","children","listItemVariants","MobileTooltip","content","span","scale","whileTap","Icon","icon","_jsx","AnimatePresence","mode","opacity","y","exit","duration","Input","ref","type","onBlur","handleBlur","size","variant","classNames","input","inputWrapper","endContent","undefined","x","stiffness","PerformanceMetrics","trades","accountingMethod","useAccountingMethod","useCashBasis","filter","globalFilter","useGlobalFilter","filteredTrades","useMemo","trade","isTradeInGlobalFilter","useTruePortfolioWithTrades","totalTrades","winRate","avgPosMove","avgNegMove","avgPositionSize","avgHoldingDays","avgR","planFollowed","openPositions","useAccountingCalculations","openAndPartialTrades","useAccountingMethodDisplay","openTradesFlat","t","positionStatus","flatMap","Array","isArray","_expandedTrades","length","tradeGroups","Map","forEach","originalId","id","split","has","set","get","push","from","entries","map","cashPercentage","reduce","sum","allocation","openQty","exitedQty","staggerChildren","toFixed"],"mappings":"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"}