{"version":3,"file":"performance-chart-C5i3aLOl.js","sources":["../../src/components/analytics/performance-chart.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend\r\n} from \"recharts\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Trade } from \"../../types/trade\";\r\nimport { useTruePortfolioWithTrades } from \"../../hooks/use-true-portfolio-with-trades\";\r\nimport { useAccountingMethod } from \"../../context/AccountingMethodContext\";\r\nimport { useGlobalFilter } from \"../../context/GlobalFilterContext\";\r\nimport { isTradeInGlobalFilter } from \"../../utils/dateFilterUtils\";\r\n\r\nexport interface ChartDataPoint {\r\n  month: string;\r\n  capital: number;\r\n  pl: number;\r\n  plPercentage: number;\r\n  startingCapital?: number;\r\n  capitalChanges?: number;\r\n}\r\n\r\ninterface PerformanceChartProps {\r\n  trades: Trade[];\r\n  onDataUpdate?: (data: ChartDataPoint[]) => void;\r\n  selectedView: string;\r\n}\r\n\r\nfunction getMonthYear(dateStr: string) {\r\n  const d = new Date(dateStr);\r\n  return `${d.toLocaleString('default', { month: 'short' })} ${d.getFullYear()}`;\r\n}\r\n\r\nexport const PerformanceChart: React.FC<PerformanceChartProps> = (props) => {\r\n  const { trades, onDataUpdate, selectedView } = props;\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n  const { filter: globalFilter } = useGlobalFilter();\r\n\r\n  // Filter trades based on global filter and accounting method\r\n  const filteredTrades = React.useMemo(() => {\r\n    if (globalFilter.type === 'all') {\r\n      return trades; // No filtering for \"All Time\"\r\n    }\r\n\r\n    return trades.filter(trade => isTradeInGlobalFilter(trade, globalFilter, useCashBasis));\r\n  }, [trades, globalFilter, useCashBasis]);\r\n\r\n  const { getPortfolioSize, getAllMonthlyTruePortfolios } = useTruePortfolioWithTrades(filteredTrades);\r\n\r\n  // Memoize the monthly portfolios to prevent infinite re-renders\r\n  // Pass accounting method to ensure correct P/L attribution\r\n  // Use filtered trades to respect global filter selection\r\n  const monthlyPortfolios = React.useMemo(() => {\r\n    return getAllMonthlyTruePortfolios();\r\n  }, [getAllMonthlyTruePortfolios, filteredTrades, useCashBasis]);\r\n\r\n  // Get the earliest and latest trade dates to determine the date range\r\n  // For cash basis, we need to consider exit dates as well\r\n  const { startDate, endDate } = React.useMemo(() => {\r\n    const getAllRelevantDates = (trades: any[]) => {\r\n      const dates: Date[] = [];\r\n\r\n      trades.forEach(trade => {\r\n        // Add entry date\r\n        if (trade.date) {\r\n          dates.push(new Date(trade.date));\r\n        }\r\n\r\n        // For cash basis, also add exit dates\r\n        if (useCashBasis && (trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial')) {\r\n          if (trade.exit1Date) dates.push(new Date(trade.exit1Date));\r\n          if (trade.exit2Date) dates.push(new Date(trade.exit2Date));\r\n          if (trade.exit3Date) dates.push(new Date(trade.exit3Date));\r\n        }\r\n      });\r\n\r\n      return dates.filter(date => !isNaN(date.getTime()));\r\n    };\r\n\r\n    const allDates = getAllRelevantDates(trades);\r\n    const sortedDates = allDates.sort((a, b) => a.getTime() - b.getTime());\r\n    return {\r\n      startDate: sortedDates[0] || new Date(),\r\n      endDate: sortedDates[sortedDates.length - 1] || new Date()\r\n    };\r\n  }, [trades, useCashBasis]);\r\n\r\n  // Helper function to check if a month is within the global filter range\r\n  const isMonthInGlobalFilter = React.useCallback((month: string, year: number) => {\r\n    if (globalFilter.type === 'all') {\r\n      return true;\r\n    }\r\n\r\n    const monthDate = new Date(year, getMonthIndex(month), 1);\r\n\r\n    switch (globalFilter.type) {\r\n      case 'week': {\r\n        const now = new Date();\r\n        const weekAgo = new Date(now);\r\n        weekAgo.setDate(now.getDate() - 7);\r\n        return monthDate >= weekAgo && monthDate <= now;\r\n      }\r\n      case 'month': {\r\n        const filterMonth = globalFilter.month ?? new Date().getMonth();\r\n        const filterYear = globalFilter.year ?? new Date().getFullYear();\r\n        return monthDate.getMonth() === filterMonth && monthDate.getFullYear() === filterYear;\r\n      }\r\n      case 'fy': {\r\n        const now = new Date();\r\n        const fyStartYear = globalFilter.fyStartYear ?? (now.getMonth() >= 3 ? now.getFullYear() : now.getFullYear() - 1);\r\n        const fyStart = new Date(fyStartYear, 3, 1); // April 1st\r\n        const fyEnd = new Date(fyStartYear + 1, 2, 31); // March 31st next year\r\n        return monthDate >= fyStart && monthDate <= fyEnd;\r\n      }\r\n      case 'cy': {\r\n        const cyYear = globalFilter.year ?? new Date().getFullYear();\r\n        return monthDate.getFullYear() === cyYear;\r\n      }\r\n      case 'custom': {\r\n        if (!globalFilter.startDate || !globalFilter.endDate) return true;\r\n        return monthDate >= globalFilter.startDate && monthDate <= globalFilter.endDate;\r\n      }\r\n      default:\r\n        return true;\r\n    }\r\n  }, [globalFilter]);\r\n\r\n  // Helper function to get month index from month name\r\n  const getMonthIndex = (month: string): number => {\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    return months.indexOf(month);\r\n  };\r\n\r\n  // Use monthlyPortfolios data which already accounts for capital changes and P/L\r\n  // Filter out months with no meaningful data AND months outside global filter range\r\n  const processedChartData = React.useMemo(() => {\r\n    return monthlyPortfolios\r\n      .filter(monthData => {\r\n        // First check if month is within global filter range\r\n        if (!isMonthInGlobalFilter(monthData.month, monthData.year)) {\r\n          return false;\r\n        }\r\n\r\n        // Then include months that have:\r\n        // 1. Actual P/L (trading activity), OR\r\n        // 2. Capital changes (deposits/withdrawals), OR\r\n        // 3. Non-zero starting capital (portfolio setup)\r\n        return monthData.pl !== 0 ||\r\n               monthData.capitalChanges !== 0 ||\r\n               monthData.startingCapital > 0;\r\n      })\r\n      .map(monthData => ({\r\n        month: `${monthData.month} ${monthData.year}`,\r\n        capital: monthData.finalCapital,\r\n        pl: monthData.pl,\r\n        startingCapital: monthData.startingCapital,\r\n        capitalChanges: monthData.capitalChanges,\r\n        plPercentage: monthData.startingCapital !== 0 ? (monthData.pl / monthData.startingCapital) * 100 : 0\r\n      }));\r\n  }, [monthlyPortfolios, isMonthInGlobalFilter]);\r\n\r\n  // Notify parent component about data update with debouncing to prevent infinite loops\r\n  React.useEffect(() => {\r\n    if (onDataUpdate && processedChartData.length > 0) {\r\n      const timeoutId = setTimeout(() => {\r\n        onDataUpdate(processedChartData);\r\n      }, 100); // 100ms debounce\r\n\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [processedChartData]); // Removed onDataUpdate from dependencies to prevent infinite loop\r\n\r\n  // Recalculate Drawdown and Volatility based on processedChartData\r\n  const drawdownData = React.useMemo(() => {\r\n    let runningMax = processedChartData[0]?.startingCapital || 0;\r\n    return processedChartData.map((d) => {\r\n      if (d.capital > runningMax) runningMax = d.capital;\r\n      const drawdown = runningMax !== 0 ? ((runningMax - d.capital) / runningMax) * 100 : 0;\r\n      return { ...d, drawdown };\r\n    });\r\n  }, [processedChartData]);\r\n\r\n  const volatilityData = React.useMemo(() => {\r\n    function rollingStd(arr: number[], window: number) {\r\n      return arr.map((_, i) => {\r\n        if (i < window - 1) return 0;\r\n        const slice = arr.slice(i - window + 1, i + 1);\r\n        const mean = slice.reduce((a, b) => a + b, 0) / window;\r\n        const variance = slice.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / window;\r\n        return Math.sqrt(variance);\r\n      });\r\n    }\r\n    const plPercentages = processedChartData.map(d => d.plPercentage);\r\n    const volatilityArr = rollingStd(plPercentages, 3);\r\n    return processedChartData.map((d, i) => ({ ...d, volatility: volatilityArr[i] }));\r\n  }, [processedChartData]);\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat(\"en-IN\", {\r\n      style: \"currency\",\r\n      currency: \"INR\",\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0\r\n    }).format(value);\r\n  };\r\n\r\n  // Show empty state if no data to display\r\n  if (processedChartData.length === 0) {\r\n    return (\r\n      <div className=\"h-[350px] flex items-center justify-center\">\r\n        <div className=\"text-center text-default-500\">\r\n          <div className=\"text-lg font-medium mb-2\">No Portfolio Data</div>\r\n          <div className=\"text-sm\">Start trading to see your portfolio performance</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-[350px]\">\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        {selectedView === \"capital\" ? (\r\n          <AreaChart\r\n            data={processedChartData}\r\n            margin={{ top: 10, right: 30, left: 30, bottom: 30 }}\r\n          >\r\n            <defs>\r\n              <linearGradient id=\"colorCapital\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor=\"hsl(var(--heroui-primary-500))\" stopOpacity={0.3} />\r\n                <stop offset=\"95%\" stopColor=\"hsl(var(--heroui-primary-500))\" stopOpacity={0} />\r\n              </linearGradient>\r\n            </defs>\r\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"hsl(var(--heroui-divider))\" />\r\n            <XAxis\r\n              dataKey=\"month\"\r\n              axisLine={false}\r\n              tickLine={false}\r\n              dy={10}\r\n            />\r\n            <YAxis\r\n              tickFormatter={(value) => formatCurrency(value)}\r\n              axisLine={false}\r\n              tickLine={false}\r\n              dx={-10}\r\n              width={80}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <Tooltip\r\n              formatter={(value: number, name: string, props: any) => {\r\n                if (name === \"Portfolio Value\") {\r\n                  const dataPoint = props.payload;\r\n                  const capitalChange = dataPoint.capitalChanges;\r\n                  const startingCapital = dataPoint.startingCapital;\r\n                  const plPercentage = dataPoint.plPercentage;\r\n                  const items = [\r\n                    [formatCurrency(value), \"Portfolio Value\"],\r\n                  ];\r\n                  if (startingCapital !== undefined && startingCapital !== null) {\r\n                    items.push([formatCurrency(startingCapital), \"Starting Capital\"]);\r\n                  }\r\n                  if (capitalChange !== undefined && capitalChange !== 0) {\r\n                    items.push([formatCurrency(capitalChange), capitalChange > 0 ? \"Deposit\" : \"Withdrawal\"]);\r\n                  }\r\n                  if (plPercentage !== undefined && plPercentage !== null) {\r\n                    items.push([`${plPercentage.toFixed(2)}%`, \"Monthly P/L %\"]);\r\n                  }\r\n                  return items;\r\n                }\r\n                return [formatCurrency(value), name];\r\n              }}\r\n              labelFormatter={(label) => label}\r\n              contentStyle={{\r\n                backgroundColor: \"hsl(var(--heroui-content1))\",\r\n                border: \"1px solid hsl(var(--heroui-divider))\",\r\n                borderRadius: \"8px\",\r\n                padding: \"8px 12px\"\r\n              }}\r\n            />\r\n            <Legend />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"capital\"\r\n              name=\"Portfolio Value\"\r\n              stroke=\"hsl(var(--heroui-primary))\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorCapital)\"\r\n              strokeWidth={2}\r\n              activeDot={{ r: 6, strokeWidth: 2 }}\r\n            />\r\n          </AreaChart>\r\n        ) : (\r\n          <AreaChart\r\n            data={processedChartData}\r\n            margin={{ top: 10, right: 30, left: 30, bottom: 30 }}\r\n          >\r\n            <defs>\r\n              <linearGradient id=\"colorPL\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor=\"hsl(var(--heroui-success-500))\" stopOpacity={0.3} />\r\n                <stop offset=\"95%\" stopColor=\"hsl(var(--heroui-success-500))\" stopOpacity={0} />\r\n              </linearGradient>\r\n            </defs>\r\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"hsl(var(--heroui-divider))\" />\r\n            <XAxis\r\n              dataKey=\"month\"\r\n              axisLine={false}\r\n              tickLine={false}\r\n              dy={10}\r\n            />\r\n            <YAxis\r\n              tickFormatter={(value) => `${value.toFixed(0)}%`}\r\n              axisLine={false}\r\n              tickLine={false}\r\n              dx={-10}\r\n              width={80}\r\n              tick={{ fontSize: 12 }}\r\n            />\r\n            <Tooltip\r\n              formatter={(value: number, name: string, props: any) => {\r\n                if (name === \"P&L Percentage\") {\r\n                  const dataPoint = props.payload;\r\n                  const items = [\r\n                    [`${value.toFixed(2)}%`, \"P&L Percentage\"],\r\n                  ];\r\n                  if (dataPoint.pl !== undefined && dataPoint.pl !== null) {\r\n                    items.push([formatCurrency(dataPoint.pl), \"Total P&L\"]);\r\n                  }\r\n                  if (dataPoint.startingCapital !== undefined && dataPoint.startingCapital !== null) {\r\n                    items.push([formatCurrency(dataPoint.startingCapital), \"Starting Capital\"]);\r\n                  }\r\n                  return items;\r\n                }\r\n                return [`${value.toFixed(2)}%`, name];\r\n              }}\r\n              labelFormatter={(label) => label}\r\n              contentStyle={{\r\n                backgroundColor: \"hsl(var(--heroui-content1))\",\r\n                border: \"1px solid hsl(var(--heroui-divider))\",\r\n                borderRadius: \"8px\",\r\n                padding: \"8px 12px\"\r\n              }}\r\n            />\r\n            <Legend />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"plPercentage\"\r\n              name=\"P&L Percentage\"\r\n              stroke=\"hsl(var(--heroui-success))\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorPL)\"\r\n              strokeWidth={2}\r\n              activeDot={{ r: 6, strokeWidth: 2 }}\r\n            />\r\n          </AreaChart>\r\n        )}\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};"],"names":["PerformanceChart","props","trades","onDataUpdate","selectedView","accountingMethod","useAccountingMethod","useCashBasis","filter","globalFilter","useGlobalFilter","filteredTrades","React","useMemo","type","trade","isTradeInGlobalFilter","getAllMonthlyTruePortfolios","useTruePortfolioWithTrades","monthlyPortfolios","startDate","endDate","getAllRelevantDates","sortedDates","dates","forEach","date","push","Date","positionStatus","exit1Date","exit2Date","exit3Date","isNaN","getTime","sort","a","b","length","isMonthInGlobalFilter","useCallback","month","year","monthDate","getMonthIndex","now","weekAgo","setDate","getDate","filterMonth","getMonth","filterYear","getFullYear","fyStartYear","fyStart","fyEnd","cyYear","indexOf","processedChartData","monthData","pl","capitalChanges","startingCapital","map","capital","finalCapital","plPercentage","useEffect","timeoutId","setTimeout","clearTimeout","runningMax","d","drawdown","plPercentages","volatilityArr","window","arr","_","i","slice","mean","reduce","variance","Math","pow","sqrt","rollingStd","volatility","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","className","children","_jsx","ResponsiveContainer","width","height","_jsxs","AreaChart","data","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","vertical","stroke","XAxis","dataKey","axisLine","tickLine","dy","YAxis","tickFormatter","dx","tick","fontSize","Tooltip","formatter","name","dataPoint","payload","capitalChange","items","undefined","toFixed","labelFormatter","label","contentStyle","backgroundColor","border","borderRadius","padding","Legend","Area","fillOpacity","fill","strokeWidth","activeDot","r"],"mappings":"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"}