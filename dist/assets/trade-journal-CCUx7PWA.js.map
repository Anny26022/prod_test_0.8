{"version":3,"mappings":"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","names":["getTodayMarketOpen","now","Date","today","getFullYear","getMonth","getDate","setHours","isMarketOpen","day","getDay","hours","getHours","minutes","getMinutes","fridayClosePrice","lastFridayDate","getCurrentISTDate","getTime","getLastWorkingDay","fromDate","date","setDate","isWeekendIST","isAfterHoursWeekday","getPreviousTradingDay","previousDay","fetchPriceTicks","async","symbol","toDate","interval","fn","maxRetries","baseDelay","lastError","attempt","error","delay","Math","pow","Promise","resolve","setTimeout","retryWithBackoff","isWeekend","isAfterHours","from","to","actualInterval","previousTradingDay","lastWorkingDay","formatForApi","pad","num","toString","padStart","getSeconds","url","toUpperCase","response","fetch","method","headers","Accept","Connection","mode","cache","credentials","signal","AbortSignal","timeout","ok","errorText","text","errorMessage","status","Error","data","json","isFriday","getTodayMarketClose","ticks","length","lastTick","window","localStorage","setItem","toISOString","fetchPriceTicksWithFallback","fallbackUrls","baseUrl","fromStr","toStr","statusText","fetchPriceTicksSmart","isProblematicNightHours","fetchPriceTicksWithHistoricalFallback","historicalError","primaryError","fallbackError","currentDate","setFullYear","setMonth","_b","_a","ChartImageUpload","tradeId","imageType","currentImage","onImageUploaded","onImageDeleted","disabled","compact","suggestedUploadMethod","allowTemporary","isUploading","setIsUploading","useState","uploadProgress","setUploadProgress","dragActive","setDragActive","setError","previewUrl","setPreviewUrl","uploadMethod","setUploadMethod","tradingViewUrl","setTradingViewUrl","fileInputRef","useRef","title","icon","ensureChartImageDataUrl","useCallback","chartImage","dataUrl","isTemporary","console","warn","filename","ChartImageService","getChartImageDataUrl","undefined","React","useEffect","log","hasDataUrl","storage","then","catch","startsWith","URL","revokeObjectURL","isValidTradingViewUrl","urlObj","hostname","includes","getTradingViewImageUrl","snapshotId","xUrlMatch","match","chartUrlMatch","paramMatch","idMatches","s3Url","charAt","toLowerCase","symbolMatch","separator","fallbackUrl","handleUrlUpload","trim","imageUrl","progressInterval","setInterval","min","prev","blob","file","File","type","clearInterval","fileName","name","shouldCompress","result","attachChartImage","success","chartImageWithPreview","message","handleFileSelect","validation","validateImageFile","isValid","warnings","handleFileInputChange","event","target","files","value","handleDrop","preventDefault","dataTransfer","handleDragOver","handleDragLeave","handleDelete","deleteChartImage","openFileDialog","current","click","Tooltip","content","children","Button","isIconOnly","variant","size","onPress","isDisabled","className","_jsx","Icon","ref","accept","CHART_IMAGE_CONFIG","ALLOWED_TYPES","join","onChange","Card","CardBody","_jsxs","formatFileSize","compressionInfo","getCompressionInfo","isCompressed","compressionText","AnimatePresence","motion","div","initial","opacity","scale","animate","exit","src","alt","onError","Tabs","selectedKey","onSelectionChange","key","classNames","tabList","cursor","tab","tabContent","Tab","onDrop","onDragOver","onDragLeave","onClick","role","tabIndex","onKeyDown","e","Progress","MAX_FILE_SIZE","Input","label","placeholder","onValueChange","startContent","description","y","ChartImageViewer","isOpen","onOpenChange","setImageUrl","isLoading","setIsLoading","zoom","setZoom","position","setPosition","x","isDragging","setIsDragging","dragStart","setDragStart","err","handleZoomIn","handleZoomOut","max","handleResetZoom","handleMouseDown","clientX","clientY","handleMouseMove","handleMouseUp","handleWheel","deltaY","delta","wheelContainerRef","container","addEventListener","passive","removeEventListener","downloadImage","link","document","createElement","href","download","body","appendChild","removeChild","Modal","backdrop","base","ModalContent","_Fragment","ModalHeader","compressed","round","ModalBody","style","transform","maxHeight","maxWidth","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","draggable","ModalFooter","color","onClose","UniversalChartViewer","initialChartImage","initialTradeId","refreshTrigger","allImages","setAllImages","currentIndex","setCurrentIndex","filter","setFilter","outcomeFilter","setOutcomeFilter","setupFilter","setSetupFilter","dateRange","setDateRange","start","end","showFilters","setShowFilters","showHeader","setShowHeader","isFullscreen","setIsFullscreen","preloadedImages","setPreloadedImages","Map","loadingProgress","setLoadingProgress","symbolSearch","setSymbolSearch","showSymbolDropdown","setShowSymbolDropdown","uniqueSymbols","useMemo","symbols","Set","map","img","tradeName","Boolean","Array","sort","uniqueSetups","setup","filteredSymbols","slice","getTradeOutcome","plRs","positionStatus","hasActiveFilters","filteredImages","images","tradeDate","loadAllImages","forEach","index","findIndex","id","handleKeyDown","navigatePrevious","navigateNext","toggleFullscreen","allTrades","SupabaseService","getAllTrades","imagesWithDataUrls","processedCount","totalItems","i","trade","chartAttachments","beforeEntry","blobId","imageWithContext","mimeType","Blob","uploadedAt","originalSize","tradeNo","Number","push","afterExit","uniqueImages","image","has","set","sortedImages","values","a","b","typeOrder","typeComparison","dateA","preloadAdjacentImages","newPreloaded","newIndex","resetZoom","exitFullscreen","documentElement","requestFullscreen","handleFullscreenChange","fullscreenElement","downloadCurrentImage","handleSymbolSelect","symbolIndex","hideCloseButton","height","transition","duration","handleSymbolSearchChange","onFocus","onBlur","input","inputWrapper","Select","trigger","SelectItem","toLocaleDateString","validateTrade","issues","totalBoughtQty","initialQty","pyramid1Qty","pyramid2Qty","totalExitQty","exit1Qty","exit2Qty","exit3Qty","pyramid1Price","pyramid2Price","exit1Price","exit2Price","exit3Price","hasOpenQty","openQty","noExitDetails","allExited","statusNotUpdated","defaultTrade","split","entry","avgEntry","sl","tsl","buySell","cmp","baseDuration","pyramid1Date","pyramid2Date","positionSize","allocation","exit1Date","exit2Date","exit3Date","exitedQty","avgExitPrice","stockMove","rewardRisk","holdingDays","realisedAmount","pfImpact","cummPf","planFollowed","exitTrigger","proficiencyGrowthAreas","slPercent","openHeat","recalculateTrade","defaultPortfolioSize","getPortfolioSize","entries","price","qty","calcAvgEntry","totalQty","reduce","sum","calcPositionSize","tradePortfolioSize","monthlyPortfolioSize","toLocaleString","month","calcAllocation","calcExitedQty","exits","calcAvgExitPrice","calcStockMove","entryPrice","slPrice","calcSLPercent","calcRewardRisk","entryDate","exitDate","calcHoldingDays","calcRealisedAmount","entryLots","exitLots","calcRealizedPL_FIFO","calcPFImpact","TradeModal","memo","onSave","initialSymbol","isUploadOnlyMode","isActionsEditMode","onChartRefresh","cmpManuallySet","setCmpManuallySet","trades","useTrades","portfolioSize","useTruePortfolioWithTrades","sessionKey","nextTradeNo","nums","t","parseInt","n","isNaN","String","formData","setFormData","saved","sessionStorage","getItem","parsedData","JSON","parse","allKeys","backupKeys","Object","keys","timestampA","pop","latestBackup","latestPrice","priceTicks","setPriceTicks","loading","setLoading","lastUpdated","setLastUpdated","pollingIntervalRef","isMounted","processTicks","tick","dateTime","timestamp","open","high","low","close","volume","dayVolume","fetchTicks","processed","userFriendlyError","stopPolling","startPolling","isCurrentlyWeekend","isCurrentlyMarketOpen","isCurrentlyAfterHours","pollingInterval","refresh","isArray","symbolTicks","latest","getPriceAtTime","targetTime","curr","abs","priceChange","first","usePriceTicks","isDirty","setIsDirty","isAutoSaving","setIsAutoSaving","lastSaved","setLastSaved","activeTab","setActiveTab","chartViewerImage","setChartViewerImage","isChartViewerOpen","setIsChartViewerOpen","isUniversalViewerOpen","setIsUniversalViewerOpen","chartRefreshTrigger","setChartRefreshTrigger","setChartAttachments","existing","metadata","createdAt","updatedAt","chartUploadMethods","setChartUploadMethods","__vitePreload","import","N","__VITE_PRELOAD__","d","test","supabaseBlobs","currentTrade","all","getTradeChartImageBlobs","getTrade","attachments","supabaseBlob","size_bytes","mime_type","uploaded_at","original_size","image_type","totalSize","oldestUpload","oldest","newestUpload","newest","loadChartImageBlobs","timer","sessionFormData","stringify","backupFormData","backupKey","removeItem","clearTimeout","_cmpAutoFetched","shouldClearSession","setShouldClearSession","calculatedFieldNames","useDebounce","debouncedValue","setDebouncedValue","handler","parentRef","prevData","updatedData","recalculated","some","handleChartImageUploaded","newChartAttachments","updatedTrade","handleChartImageDeleted","deletedImage","newAttachments","hasRemainingAttachments","updatedChartAttachments","_","rest","handleChange","field","processedValue","updatedFormData","priceData","fetchedPrice","validationIssues","setValidationIssues","handleSubmit","issue","alert","cleanedChartAttachments","hasValidAttachments","newTrade","generateId","hasTemporaryCharts","saveTemporaryChartImages","modalMotionProps","variants","enter","ease","basicFields","unit","options","advancedFields","currentFields","rowVirtualizer","useVirtualizer","count","getScrollElement","estimateSize","overscan","scrollToOffset","renderField","displayValue","toFixed","percentage","currency","Chip","endContent","selectedKeys","opt","NameCell","isEditing","setIsEditing","editValue","setEditValue","showDropdown","setShowDropdown","filtered","setFiltered","selectedIndex","setSelectedIndex","inputRef","dropdownRef","top","left","width","stockNames","setStockNames","csvText","default","__vite_default__","p","header","complete","results","names","row","loadStockNames","matches","rect","getBoundingClientRect","handleResize","handleSave","val","finalValue","exactMatch","find","closestMatch","inputLower","bestMatch","bestScore","exactPrefixMatch","containsMatch","nameLower","score","inputIndex","findClosestMatch","confirm","selectedElement","getElementById","scrollIntoView","block","behavior","next","autoFocus","onMouseEnter","scrollBehavior","motionProps","wrapper","closeButton","Divider","getTotalSize","getVirtualItems","virtualRow","displayName","DeleteConfirmModal","onDelete","rotate","stiffness","damping","whileHover","whileTap","MAPPABLE_FIELDS","required","parseFlexibleNumber","stringValue","parseFloat","replace","parsed","TradeUploadModal","onImport","step","setStep","setParsedData","columnMapping","setColumnMapping","mappingConfidence","setMappingConfidence","previewTrades","setPreviewTrades","importProgress","setImportProgress","selectedDateFormat","setSelectedDateFormat","dateFormatOptions","example","monthNames","jan","january","feb","february","mar","march","apr","april","may","jun","june","jul","july","aug","august","sep","september","sept","oct","october","nov","november","dec","december","parseDate","dateStr","formatHint","cleanDateStr","format","parsedDate","parts","part1","part2","part3","parsedDate2","monthName","year","textParts","firstPart","secondPart","firstMonthName","recalculateTradeFields","allEntries","allExits","totalInitialQty","entryLotsForFifo","exitLotsForFifo","generateSmartMapping","mapping","confidence","hasValidData","columnIndex","sampleRows","rows","nonEmptyCount","ceil","mapDateColumnsWithContext","dateColumns","dateCol","arrayIndex","colIndex","prev1Col","prev2Col","prefix","fields","pattern","matchingHeaders","cleanHeader","targetField","notes","keywords","headerIndex","keyword","calculateSimilarity","str1","str2","s1","s2","clean1","clean2","normalized1","normalized2","words1","w","words2","commonWords","word","handleFileUpload","fileExtension","Papa","errors","cleanHeaders","h","cleanRows","cell","smartMapping","hasDateColumns","skipEmptyLines","dynamicTyping","fastMode","reader","FileReader","onload","Uint8Array","workbook","XLSX","sheetName","SheetNames","worksheet","Sheets","jsonData","sheet_to_json","readAsArrayBuffer","endsWith","isTradeCompletelyBlank","every","generatePreview","validTradeCount","previewRows","column","indexOf","parsedNumber","parsedQuantity","buySellValue","boolValue","setupValue","handleImport","totalRows","skippedBlankTrades","dateParsingErrors","chunks","chunkIndex","chunk","recalculatedTrade","processedRows","progress","requestIdleCallback","resetModal","userHeaders","conf","footer","stepName","Fragment","onDragEnter","htmlFor","as","CardHeader","createObjectURL","flat","option","f","ScrollShadow","newConfidence","newMapping","Table","TableHeader","TableColumn","TableBody","TableRow","TableCell","showValueLabel","fetchMiscData","getMiscData","saveMiscData","formatDate","standardFormatDate","formatCurrency","standardFormatCurrency","TradeJournal","statsTitle","totalTrades","openPositions","winRate","totalPL","originalTrades","addTrade","updateTrade","deleteTrade","bulkImportTrades","isRecalculating","searchQuery","setSearchQuery","statusFilter","setStatusFilter","sortDescriptor","setSortDescriptor","visibleColumns","setVisibleColumns","getAccountingAwareValues","accountingMethod","useAccountingMethod","useCashBasis","editingId","setEditingId","localTradeUpdates","setLocalTradeUpdates","processedTrades","localUpdate","get","sharedCalculations","useAccountingCalculations","uniqueTrades","seenTradeIds","originalId","add","tradesWithAccountingPL","winningTrades","accountingPL","openPositionsCount","handleExport","handleChartImageView","setChartViewerTitle","handleAddNewBlankTrade","maxTradeNo","random","isAddOpen","onOpen","onAddOpen","onAddOpenChange","useDisclosure","isEditOpen","onEditOpen","onEditOpenChange","isDeleteOpen","onDeleteOpen","onDeleteOpenChange","isUploadOpen","onUploadOpen","onUploadOpenChange","selectedTrade","setSelectedTrade","page","setPage","optimisticUpdates","setOptimisticUpdates","setIsActionsEditMode","chartViewerTitle","setIsUploadOnlyMode","rowsPerPageOptions","rowsPerPage","setRowsPerPage","rowsPerPageLoaded","setRowsPerPageLoaded","savedValue","getFromIndexedDB","initialOptions","loadRowsPerPage","setToIndexedDB","closestOption","loadedTradesCount","setLoadedTradesCount","isLoadingMore","setIsLoadingMore","loadMoreTrades","shouldUseProgressiveLoading","pages","items","baseItems","optimisticUpdate","memoizedTableRows","item","handlePageChange","newPage","startTransition","expensiveCalculationsLoaded","setExpensiveCalculationsLoaded","scheduleCalculations","allColumns","sortable","headerColumns","col","handleImportTrades","importedTrades","nonEditableFields","isEditable","getAccountingAwarePortfolioSize","relevantDate","exitDates","handleInlineEditSave","tradeToUpdate","parsedValue","_userEditedFields","totalValue","exitValue","currentPortfolioSize","accountingAwarePortfolioSize","hasUserEditedPositionStatus","newStatus","calcTradeOpenHeat","newUpdates","delete","getEditableFields","currentTabIndex","setCurrentTabIndex","getAllEditableCells","editableFields","cells","rowIndex","handleTabNavigation","direction","allCells","currentCellIndex","targetCell","cellElement","querySelector","focus","clickEvent","MouseEvent","bubbles","cancelable","view","dispatchEvent","enterEvent","KeyboardEvent","handleGlobalKeyDown","shiftKey","handleKeyboardNavigation","activeElement","editableCell","closest","getAttribute","currentField","currentFieldIndex","nextFieldIndex","nextTradeIndex","currentTradeIndex","nextTrade","nextField","nextCell","select","formatCellValue","rr","getValueColor","numValue","precomputedTooltips","tooltipData","tradeTooltips","isOpenPosition","isPartialPosition","remainingExits","lotBreakdown","lot","qtyLeft","usedQty","days","exited","shift","displayDays","openLots","l","exitedLots","totalQtyAll","avgExit","rrRemainingExits","entryExitAllocations","entryBreakdown","entryQtyLeft","totalExitValue","avgExitPriceForEntry","exitedQtyForEntry","openQtyForEntry","stop","rawRisk","risk","reward","rewardFormula","totalQtyForEntry","realizedReward","unrealizedReward","rrValue","Infinity","isRiskFree","riskyEntries","riskyQty","traditionalWeightedRR","totalRiskAmount","totalRewardAmount","effectiveRR","hasRiskFreePositions","weightedRR","tradeDetailsFields","originalValue","originalVal","shouldSkipField","calcUnrealizedPL","rrStr","tradeDetails","stockMoveEntries","individualMoves","calcIndividualMoves","renderCell","columnKey","cellValue","tooltipContent","placement","closeDelay","radius","shadow","idx","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","marginLeft","cx","cy","r","x1","y1","x2","y2","renderHoldingDays","rrTooltipContent","formatPercentage","move","movePercent","accountingValues","openHeatValue","BuySellCell","PositionStatusCell","SetupCell","ExitTriggerCell","ProficiencyGrowthAreasCell","PlanFollowedCell","NotesCell","EditableCell","handleUploadOnly","CMPCell","isAutoFetched","pfImpactValues","hasBeforeEntry","hasAfterExit","chartKey","handleEdit","statsLoaded","setStatsLoaded","lazyStats","setLazyStats","totalUnrealizedPL","openPfImpact","totalRealizedPL","realizedPfImpact","stableStatsCalculation","tradesForStats","unrealizedPL","processedTradeIds","openImpact","realizedTrades","flatMap","_expandedTrades","_cashBasisExit","realizedPL","calculateTradePL","realizedImpact","_cashPfImpact","_accrualPfImpact","filteredTradesForOpenHeat","calcOpenHeat","tradeGroups","openTrades","filteredOpenTrades","priceCache","fetchPricesForOpenTrades","tradesBySymbol","symbolsToFetch","cached","batch","allSettled","newPrice","tradesToUpdate","Dropdown","DropdownTrigger","DropdownMenu","selectionMode","selected","DropdownItem","closeOnSelect","navigator","vibrate","allColumnKeys","element","classList","remove","MobileTooltip","onAction","allTradesForExport","exportHeaders","dataToExport","accountingMethodSuffix","csv","unparse","setAttribute","visibility","json_to_sheet","book_new","book_append_sheet","textValue","tooltip","stat","StatsCard","closedTrades","realizedTradesFlat","breakdown","CircularLoader","scrollbarWidth","scrollbarColor","bottomContent","newRowsPerPage","Pagination","isCompact","showControls","showShadow","total","ellipsis","table","thead","th","td","removeWrapper","onSortChange","columns","align","allowsSorting","emptyContent","memoizedRow","existingTrade","chartChanged","hasCharts","strokeDasharray","strokeDashoffset","colors","getColors","bg","colorValue","formatDateForDisplay","convertToISODate","displayDate","convertToFullISO","getInitialEditValue","isEditingRef","newEditValue","isoDate","handleFocus","setIsOpen","PROFICIENCY_GROWTH_AREAS","GROWTH_AREAS_LOCAL_KEY","customOptions","setCustomOptions","availableDefaultOptions","setAvailableDefaultOptions","allOptions","stored","o","availableDefaults","loadOptions","handleAddOption","handleSelect","newValue","prompt","newCustomOptions","area","onPointerDown","stopPropagation","optionToDelete","isDefaultOption","confirmMessage","updatedDefaultOptions","updatedCustomOptions","handleDeleteCustomOption","concat","handleAutoEdit","updatePosition","dropdown","bottom","handleClickOutside","contains","relatedTarget","SETUP_OPTIONS","SETUP_LOCAL_KEY","EXIT_TRIGGER_OPTIONS","EXIT_TRIGGER_LOCAL_KEY","Popover","PopoverTrigger","PopoverContent","Textarea","minRows","maxRows","handleCancel","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits"],"ignoreList":[],"sources":["../../src/utils/priceTickApi.ts","../../src/components/ChartImageUpload.tsx","../../src/components/ChartImageViewer.tsx","../../src/components/UniversalChartViewer.tsx","../../src/utils/tradeValidations.ts","../../src/components/trade-modal.tsx","../../src/hooks/usePriceTicks.ts","../../src/components/delete-confirm-modal.tsx","../../src/components/TradeUploadModal.tsx","../../src/components/trade-journal.tsx"],"sourcesContent":["import { format, subDays, parseISO, isWeekend, isFriday, isSameDay } from 'date-fns';\r\n\r\nexport interface PriceTick {\r\n  dateTime: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  dayVolume: number;\r\n}\r\n\r\nexport interface PriceTicksResponse {\r\n  data: {\r\n    statistic: number;\r\n    count: number;\r\n    fields: string[];\r\n    ticks: {\r\n      [symbol: string]: Array<[string, number, number, number, number, number, number]>;\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * Gets today's market open time (9:08 AM IST)\r\n * @returns Date object set to today's market open\r\n */\r\nexport const getTodayMarketOpen = (): Date => {\r\n  const now = new Date();\r\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n  // Market opens at 9:08 AM IST (UTC+5:30)\r\n  today.setHours(9, 8, 0, 0);\r\n  return today;\r\n};\r\n\r\n/**\r\n * Gets today's market close time (3:30 PM IST)\r\n * @returns Date object set to today's market close\r\n */\r\nexport const getTodayMarketClose = (): Date => {\r\n  const now = new Date();\r\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n  // Market closes at 3:30 PM IST (UTC+5:30)\r\n  today.setHours(15, 30, 0, 0);\r\n  return today;\r\n};\r\n\r\n/**\r\n * Checks if the market is currently open based on the specified hours (9:08 AM to 3:30 PM IST)\r\n * @returns boolean indicating if market is open\r\n */\r\nexport const isMarketOpen = (): boolean => {\r\n  const now = new Date();\r\n  const day = now.getDay();\r\n\r\n  // Market is open Monday (1) to Friday (5)\r\n  if (day === 0 || day === 6) return false; // Sunday (0) or Saturday (6) are always closed\r\n\r\n  const hours = now.getHours();\r\n  const minutes = now.getMinutes();\r\n\r\n  // Market hours: 9:08 AM to 3:30 PM IST\r\n  if (hours < 9 || (hours === 9 && minutes < 8)) {\r\n    return false;\r\n  }\r\n  if (hours > 15 || (hours === 15 && minutes > 30)) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// Store for Friday's close price\r\nlet fridayClosePrice: number | null = null;\r\nlet lastFridayDate: Date | null = null;\r\n\r\n/**\r\n * Gets the current date in IST timezone\r\n */\r\nconst getCurrentISTDate = (): Date => {\r\n  const now = new Date();\r\n  // Convert to IST (UTC+5:30)\r\n  return new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\r\n};\r\n\r\n/**\r\n * Gets the last working day (Friday or earlier if there are holidays)\r\n * @param fromDate Optional starting date, defaults to current IST date\r\n * @returns Date object set to the last working day\r\n */\r\nconst getLastWorkingDay = (fromDate?: Date): Date => {\r\n  const date = fromDate ? new Date(fromDate) : getCurrentISTDate();\r\n\r\n  // If it's Saturday (6) or Sunday (0), go back to Friday\r\n  while (date.getDay() === 0 || date.getDay() === 6) {\r\n    date.setDate(date.getDate() - 1);\r\n  }\r\n\r\n  return date;\r\n};\r\n\r\n/**\r\n * Checks if current date is weekend (Saturday or Sunday) in IST\r\n */\r\nconst isWeekendIST = (): boolean => {\r\n  const now = getCurrentISTDate();\r\n  const day = now.getDay();\r\n  return day === 0 || day === 6; // Sunday (0) or Saturday (6)\r\n};\r\n\r\n/**\r\n * Checks if current time is after-hours on a weekday (12:00 AM to 9:15 AM IST)\r\n * This is when system date may have changed but markets haven't opened yet\r\n */\r\nconst isAfterHoursWeekday = (): boolean => {\r\n  const now = getCurrentISTDate();\r\n  const day = now.getDay();\r\n  const hours = now.getHours();\r\n  const minutes = now.getMinutes();\r\n\r\n  // Only applies to weekdays (Monday=1 to Friday=5)\r\n  if (day === 0 || day === 6) return false;\r\n\r\n  // Check if time is between 12:00 AM (00:00) and 9:15 AM (09:15)\r\n  if (hours < 9 || (hours === 9 && minutes < 15)) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * Checks if current time is in the problematic night hours (3:55 AM to 9:15 AM IST)\r\n * During this period, regular APIs often fail and historical fallback should be prioritized\r\n */\r\nconst isProblematicNightHours = (): boolean => {\r\n  const now = getCurrentISTDate();\r\n  const day = now.getDay();\r\n  const hours = now.getHours();\r\n  const minutes = now.getMinutes();\r\n\r\n  // Only applies to weekdays (Monday=1 to Friday=5)\r\n  if (day === 0 || day === 6) return false;\r\n\r\n  // Check if time is between 3:55 AM (03:55) and 9:15 AM (09:15)\r\n  if (hours > 3 && hours < 9) {\r\n    return true;\r\n  }\r\n  if (hours === 3 && minutes >= 55) {\r\n    return true;\r\n  }\r\n  if (hours === 9 && minutes < 15) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * Gets the previous trading day, accounting for weekends and after-hours\r\n * This is crucial for after-hours weekday polling when system date has changed\r\n * but we need previous day's market data\r\n */\r\nconst getPreviousTradingDay = (): Date => {\r\n  const now = getCurrentISTDate();\r\n  const previousDay = new Date(now);\r\n\r\n  // Go back one day\r\n  previousDay.setDate(now.getDate() - 1);\r\n\r\n  // If the previous day is weekend, keep going back to Friday\r\n  while (previousDay.getDay() === 0 || previousDay.getDay() === 6) {\r\n    previousDay.setDate(previousDay.getDate() - 1);\r\n  }\r\n\r\n  return previousDay;\r\n};\r\n\r\n/**\r\n * Formats date to YYYY-MM-DD string in local timezone\r\n */\r\nconst formatDateOnly = (date: Date): string => {\r\n  return date.toISOString().split('T')[0];\r\n};\r\n\r\n/**\r\n * Checks if two dates are the same day\r\n */\r\nconst isSameDayIST = (date1: Date, date2: Date): boolean => {\r\n  return formatDateOnly(date1) === formatDateOnly(date2);\r\n};\r\n\r\n/**\r\n * Gets the most recent Friday's date\r\n */\r\nconst getLastFriday = (): Date => {\r\n  const date = getCurrentISTDate();\r\n  const day = date.getDay();\r\n  const diff = (day + 2) % 7; // Days since last Friday\r\n  const friday = new Date(date);\r\n  friday.setDate(date.getDate() - diff);\r\n  return friday;\r\n};\r\n\r\n/**\r\n * Retry mechanism for API calls with exponential backoff\r\n */\r\nconst retryWithBackoff = async <T>(\r\n  fn: () => Promise<T>,\r\n  maxRetries: number = 3,\r\n  baseDelay: number = 1000\r\n): Promise<T> => {\r\n  let lastError: Error;\r\n\r\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      return await fn();\r\n    } catch (error) {\r\n      lastError = error as Error;\r\n\r\n      // Don't retry on the last attempt\r\n      if (attempt === maxRetries) {\r\n        break;\r\n      }\r\n\r\n      // Calculate delay with exponential backoff\r\n      const delay = baseDelay * Math.pow(2, attempt);\r\n\r\n      // Wait before retrying\r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n\r\n  throw lastError;\r\n};\r\n\r\n/**\r\n * Fetches price ticks for a given symbol and date range\r\n * @param symbol The stock symbol (e.g., 'TAJGVK')\r\n * @param fromDate Start date (default: today's market open)\r\n * @param toDate End date (default: current time)\r\n * @param interval Candle interval (default: '1m')\r\n * @returns Promise with price ticks data\r\n */\r\nexport const fetchPriceTicks = async (\r\n  symbol: string,\r\n  fromDate?: Date,\r\n  toDate?: Date,\r\n  interval?: string\r\n): Promise<PriceTicksResponse> => {\r\n  return retryWithBackoff(async () => {\r\n    const now = getCurrentISTDate();\r\n    const isWeekend = isWeekendIST();\r\n    const isAfterHours = isAfterHoursWeekday();\r\n    let from: Date, to: Date;\r\n    let actualInterval: string;\r\n\r\n    // Determine interval and date range based on market status\r\n    if (isWeekend && !fromDate && !toDate) {\r\n      // Weekend: Use daily candles and get data from last working days\r\n      actualInterval = interval || '1d';\r\n\r\n      // Get last working day (Friday or earlier)\r\n      const lastWorkingDay = getLastWorkingDay();\r\n\r\n      // Set 'to' date to end of last working day\r\n      to = new Date(lastWorkingDay);\r\n      to.setHours(23, 59, 59, 999);\r\n\r\n      // Set 'from' date to cover sufficient historical data (e.g., last 30 working days)\r\n      from = new Date(lastWorkingDay);\r\n      from.setDate(from.getDate() - 45); // Go back ~45 days to ensure we get 30 working days\r\n      from.setHours(9, 15, 59, 0); // Market open time\r\n\r\n    } else if (isAfterHours && !fromDate && !toDate) {\r\n      // After-hours weekday (12:00 AM to 9:15 AM): Use previous trading day's data\r\n      actualInterval = interval || '1m';\r\n\r\n      // Get previous trading day (even if system date changed at midnight)\r\n      const previousTradingDay = getPreviousTradingDay();\r\n\r\n      // Set 'from' to previous trading day market open\r\n      from = new Date(previousTradingDay);\r\n      from.setHours(9, 15, 59, 0);\r\n\r\n      // Set 'to' to previous trading day end (or market close)\r\n      to = new Date(previousTradingDay);\r\n      to.setHours(23, 59, 59, 999); // Full day data\r\n      // Alternative: to.setHours(15, 30, 0, 0); // Market close only\r\n\r\n    } else if (!fromDate && !toDate) {\r\n      // Normal weekday during/after market hours: Use current day\r\n      actualInterval = interval || '1m';\r\n      from = getTodayMarketOpen();\r\n      to = new Date();\r\n\r\n    } else {\r\n      // Explicit dates provided\r\n      actualInterval = interval || '1m';\r\n      from = fromDate || getTodayMarketOpen();\r\n      to = toDate || new Date();\r\n\r\n    }\r\n\r\n    // Format dates to match the required API format (YYYY-MM-DDTHH:mm:ss+05:30)\r\n    const formatForApi = (date: Date) => {\r\n      const pad = (num: number) => num.toString().padStart(2, '0');\r\n      // Format as: YYYY-MM-DDTHH:mm:ss+05:30 (URL encoded)\r\n      return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}%3A${pad(date.getMinutes())}%3A${pad(date.getSeconds())}%2B05%3A30`;\r\n    };\r\n\r\n    const fromStr = formatForApi(from);\r\n    const toStr = formatForApi(to);\r\n    const encodedSymbol = `EQ%3A${symbol.toUpperCase()}`;\r\n\r\n    // Updated to use the correct API URL format with dynamic interval\r\n    const url = `https://api-v2.strike.money/v2/api/equity/priceticks?candleInterval=${actualInterval}&from=${fromStr}&to=${toStr}&securities=${encodedSymbol}`;\r\n\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1',\r\n        'Sec-Fetch-Dest': 'empty',\r\n        'Sec-Fetch-Mode': 'cors',\r\n        'Sec-Fetch-Site': 'cross-site',\r\n      },\r\n      // Add additional options to handle SSL issues\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'omit',\r\n      // Add timeout to prevent hanging requests\r\n      signal: AbortSignal.timeout(15000), // 15 second timeout\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      const errorMessage = `API request failed with status ${response.status}: ${errorText}`;\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Store Friday's close price if today is Friday and market is closed\r\n    // This logic is still relevant for potential caching but won't prevent calls\r\n    if (isFriday(now) && now > getTodayMarketClose()) {\r\n      const ticks = data.data.ticks[symbol];\r\n      if (ticks && ticks.length > 0) {\r\n        const lastTick = ticks[ticks.length - 1];\r\n        if (lastTick && lastTick[4]) { // index 4 is close price\r\n          fridayClosePrice = lastTick[4];\r\n          lastFridayDate = new Date(now);\r\n          // You might want to store this in localStorage for persistence across page reloads\r\n          if (typeof window !== 'undefined') {\r\n            localStorage.setItem('fridayClosePrice', fridayClosePrice.toString());\r\n            localStorage.setItem('lastFridayDate', lastFridayDate.toISOString());\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }, 3, 1000); // Retry up to 3 times with 1 second base delay\r\n};\r\n\r\n/**\r\n * Alternative fetch function with different error handling strategies\r\n * Fallback mechanism for when the primary API fails\r\n */\r\nexport const fetchPriceTicksWithFallback = async (\r\n  symbol: string,\r\n  fromDate?: Date,\r\n  toDate?: Date,\r\n  interval?: string\r\n): Promise<PriceTicksResponse> => {\r\n  const fallbackUrls = [\r\n    'https://api-prod-v21.strike.money',\r\n    'https://api.strike.money'\r\n  ];\r\n\r\n  let lastError: Error;\r\n\r\n  for (const baseUrl of fallbackUrls) {\r\n    try {\r\n      const now = getCurrentISTDate();\r\n      const isWeekend = isWeekendIST();\r\n      const isAfterHours = isAfterHoursWeekday();\r\n      let from: Date, to: Date;\r\n      let actualInterval: string;\r\n\r\n      // Use same logic as main function\r\n      if (isWeekend && !fromDate && !toDate) {\r\n        actualInterval = interval || '1d';\r\n        const lastWorkingDay = getLastWorkingDay();\r\n        to = new Date(lastWorkingDay);\r\n        to.setHours(23, 59, 59, 999);\r\n        from = new Date(lastWorkingDay);\r\n        from.setDate(from.getDate() - 45);\r\n        from.setHours(9, 15, 59, 0);\r\n      } else if (isAfterHours && !fromDate && !toDate) {\r\n        actualInterval = interval || '1m';\r\n        const previousTradingDay = getPreviousTradingDay();\r\n        from = new Date(previousTradingDay);\r\n        from.setHours(9, 15, 59, 0);\r\n        to = new Date(previousTradingDay);\r\n        to.setHours(23, 59, 59, 999);\r\n      } else if (!fromDate && !toDate) {\r\n        actualInterval = interval || '1m';\r\n        from = getTodayMarketOpen();\r\n        to = new Date();\r\n      } else {\r\n        actualInterval = interval || '1m';\r\n        from = fromDate || getTodayMarketOpen();\r\n        to = toDate || new Date();\r\n      }\r\n\r\n      const formatForApi = (date: Date) => {\r\n        const pad = (num: number) => num.toString().padStart(2, '0');\r\n        return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}%3A${pad(date.getMinutes())}%3A${pad(date.getSeconds())}%2B05%3A30`;\r\n      };\r\n\r\n      const fromStr = formatForApi(from);\r\n      const toStr = formatForApi(to);\r\n      const encodedSymbol = `EQ%3A${symbol.toUpperCase()}`;\r\n      const url = `${baseUrl}/v2/api/equity/priceticks?candleInterval=${actualInterval}&from=${fromStr}&to=${toStr}&securities=${encodedSymbol}`;\r\n\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\r\n        },\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        // Add timeout\r\n        signal: AbortSignal.timeout(10000), // 10 second timeout\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return data;\r\n      } else {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n    } catch (error) {\r\n      lastError = error as Error;\r\n      continue;\r\n    }\r\n  }\r\n\r\n  throw lastError || new Error('All API endpoints failed');\r\n};\r\n\r\n/**\r\n * Smart fetch function that prioritizes historical fallback during problematic night hours\r\n * Uses historical data first during 3:55 AM to 9:15 AM IST on weekdays\r\n */\r\nexport const fetchPriceTicksSmart = async (\r\n  symbol: string,\r\n  fromDate?: Date,\r\n  toDate?: Date,\r\n  interval?: string\r\n): Promise<PriceTicksResponse> => {\r\n  const isNightHours = isProblematicNightHours();\r\n\r\n  if (isNightHours) {\r\n    try {\r\n      // Try historical fallback first during night hours\r\n      return await fetchPriceTicksWithHistoricalFallback(symbol);\r\n    } catch (historicalError) {\r\n      try {\r\n        // If historical fails, try primary API\r\n        return await fetchPriceTicks(symbol, fromDate, toDate, interval);\r\n      } catch (primaryError) {\r\n        // If primary fails, try secondary fallback\r\n        return await fetchPriceTicksWithFallback(symbol, fromDate, toDate, interval);\r\n      }\r\n    }\r\n  } else {\r\n    // Normal hours: use regular priority order\r\n    try {\r\n      // Try primary API first\r\n      return await fetchPriceTicks(symbol, fromDate, toDate, interval);\r\n    } catch (primaryError) {\r\n      try {\r\n        // If primary fails, try secondary fallback\r\n        return await fetchPriceTicksWithFallback(symbol, fromDate, toDate, interval);\r\n      } catch (fallbackError) {\r\n        // If all else fails, try historical fallback\r\n        return await fetchPriceTicksWithHistoricalFallback(symbol);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Final fallback function that uses daily data with historical date range\r\n * This is used when all other methods fail, especially during after-hours/pre-market times\r\n */\r\nexport const fetchPriceTicksWithHistoricalFallback = async (\r\n  symbol: string\r\n): Promise<PriceTicksResponse> => {\r\n  const now = getCurrentISTDate();\r\n  const currentDate = new Date(now);\r\n\r\n  // Set 'to' date to current system date (or previous working day if weekend)\r\n  const to = isWeekendIST() ? getLastWorkingDay() : currentDate;\r\n  to.setHours(23, 59, 59, 999);\r\n\r\n  // Set 'from' date to go back significantly to ensure we get data\r\n  const from = new Date(to);\r\n  from.setFullYear(from.getFullYear() - 1); // Go back 1 year to ensure data availability\r\n  from.setMonth(11); // December\r\n  from.setDate(4);   // December 4th\r\n  from.setHours(9, 15, 59, 0);\r\n\r\n  const formatForApi = (date: Date) => {\r\n    const pad = (num: number) => num.toString().padStart(2, '0');\r\n    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}%3A${pad(date.getMinutes())}%3A${pad(date.getSeconds())}%2B05%3A30`;\r\n  };\r\n\r\n  const fromStr = formatForApi(from);\r\n  const toStr = formatForApi(to);\r\n  const encodedSymbol = `EQ%3A${symbol.toUpperCase()}`;\r\n\r\n  // Use daily interval for historical data\r\n  const url = `https://api-v2.strike.money/v2/api/equity/priceticks?candleInterval=1d&from=${fromStr}&to=${toStr}&securities=${encodedSymbol}`;\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1',\r\n        'Sec-Fetch-Dest': 'empty',\r\n        'Sec-Fetch-Mode': 'cors',\r\n        'Sec-Fetch-Site': 'cross-site',\r\n      },\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'omit',\r\n      signal: AbortSignal.timeout(20000), // 20 second timeout for historical data\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Historical fallback failed with status ${response.status}: ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    // Verify we got data\r\n    const ticks = data.data?.ticks?.[symbol.toUpperCase()];\r\n    if (!ticks || ticks.length === 0) {\r\n      throw new Error(`No historical data available for ${symbol}`);\r\n    }\r\n\r\n    return data;\r\n\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Test function to verify API URL construction\r\n * This demonstrates weekday, after-hours, and weekend URL formats\r\n */\r\nexport const testApiUrlConstruction = (symbol: string = 'TATACOMM'): {\r\n  weekday: string;\r\n  afterHours: string;\r\n  weekend: string\r\n} => {\r\n  const formatForApi = (date: Date) => {\r\n    const pad = (num: number) => num.toString().padStart(2, '0');\r\n    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}%3A${pad(date.getMinutes())}%3A${pad(date.getSeconds())}%2B05%3A30`;\r\n  };\r\n\r\n  const encodedSymbol = `EQ%3A${symbol.toUpperCase()}`;\r\n\r\n  // Normal Weekday URL (1m interval) - Market hours\r\n  const weekdayFrom = new Date('2025-06-11T09:15:59+05:30');\r\n  const weekdayTo = new Date('2025-06-11T15:30:00+05:30');\r\n  const weekdayFromStr = formatForApi(weekdayFrom);\r\n  const weekdayToStr = formatForApi(weekdayTo);\r\n  const weekdayUrl = `https://api-v2.strike.money/v2/api/equity/priceticks?candleInterval=1m&from=${weekdayFromStr}&to=${weekdayToStr}&securities=${encodedSymbol}`;\r\n\r\n  // After-Hours Weekday URL (1m interval) - Previous trading day data\r\n  // Example: It's Friday 13th at 2:00 AM, system date changed to Saturday 14th\r\n  // But we use Friday 13th data because markets haven't opened yet\r\n  const afterHoursFrom = new Date('2025-06-13T09:15:59+05:30'); // Previous trading day (Friday)\r\n  const afterHoursTo = new Date('2025-06-13T23:59:59+05:30');   // Previous trading day end\r\n  const afterHoursFromStr = formatForApi(afterHoursFrom);\r\n  const afterHoursToStr = formatForApi(afterHoursTo);\r\n  const afterHoursUrl = `https://api-v2.strike.money/v2/api/equity/priceticks?candleInterval=1m&from=${afterHoursFromStr}&to=${afterHoursToStr}&securities=${encodedSymbol}`;\r\n\r\n  // Weekend URL (1d interval) - Historical data\r\n  const weekendFrom = new Date('2023-11-29T09:15:59+05:30');\r\n  const weekendTo = new Date('2025-06-13T23:59:59+05:30');\r\n  const weekendFromStr = formatForApi(weekendFrom);\r\n  const weekendToStr = formatForApi(weekendTo);\r\n  const weekendUrl = `https://api-v2.strike.money/v2/api/equity/priceticks?candleInterval=1d&from=${weekendFromStr}&to=${weekendToStr}&securities=${encodedSymbol}`;\r\n\r\n  return {\r\n    weekday: weekdayUrl,\r\n    afterHours: afterHoursUrl,\r\n    weekend: weekendUrl\r\n  };\r\n};\r\n","import React, { useState, useCallback, useRef } from 'react';\r\nimport { Button, Card, CardBody, Progress, Tooltip, Input, Tabs, Tab } from '@heroui/react';\r\nimport { Icon } from '@iconify/react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { ChartImage } from '../types/trade';\r\nimport { ChartImageService } from '../services/chartImageService';\r\nimport { validateImageFile, formatFileSize, CHART_IMAGE_CONFIG, getCompressionInfo } from '../utils/chartImageUtils';\r\n\r\ninterface ChartImageUploadProps {\r\n  tradeId: string;\r\n  imageType: 'beforeEntry' | 'afterExit';\r\n  currentImage?: ChartImage;\r\n  onImageUploaded: (chartImage: ChartImage, uploadMethod?: 'file' | 'url') => void;\r\n  onImageDeleted: () => void;\r\n  disabled?: boolean;\r\n  compact?: boolean;\r\n  suggestedUploadMethod?: 'file' | 'url';\r\n  allowTemporary?: boolean; // NEW: Allow temporary uploads for new trades\r\n}\r\n\r\nexport const ChartImageUpload: React.FC<ChartImageUploadProps> = ({\r\n  tradeId,\r\n  imageType,\r\n  currentImage,\r\n  onImageUploaded,\r\n  onImageDeleted,\r\n  disabled = false,\r\n  compact = false,\r\n  suggestedUploadMethod,\r\n  allowTemporary = true, // NEW: Default to allowing temporary uploads\r\n}) => {\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [dragActive, setDragActive] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\r\n  const [uploadMethod, setUploadMethod] = useState<'file' | 'url'>(() => {\r\n    // Use suggested method if provided, otherwise default to 'file'\r\n    return suggestedUploadMethod || 'file';\r\n  });\r\n  const [tradingViewUrl, setTradingViewUrl] = useState('');\r\n  \r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  \r\n  const title = imageType === 'beforeEntry' ? 'Before Entry Chart' : 'After Exit Chart';\r\n  const icon = imageType === 'beforeEntry' ? 'lucide:trending-up' : 'lucide:trending-down';\r\n\r\n  // Helper function to ensure chart image has dataUrl for immediate preview\r\n  const ensureChartImageDataUrl = useCallback(async (chartImage: ChartImage): Promise<ChartImage> => {\r\n    if (chartImage.dataUrl) {\r\n      return chartImage; // Already has dataUrl\r\n    }\r\n\r\n    // For temporary charts, don't try to fetch from service (they're not in Supabase yet)\r\n    if ((chartImage as any).isTemporary) {\r\n      console.warn(`⚠️ [ENSURE_DATAURL] Temporary chart missing dataUrl: ${chartImage.filename}`);\r\n      return chartImage; // Return as-is, should have been set by service\r\n    }\r\n\r\n    // Get dataUrl from service for saved charts\r\n    const dataUrl = await ChartImageService.getChartImageDataUrl(chartImage);\r\n    return {\r\n      ...chartImage,\r\n      dataUrl: dataUrl || undefined\r\n    };\r\n  }, []);\r\n\r\n  // Auto-select suggested upload method for consistency\r\n  React.useEffect(() => {\r\n    if (suggestedUploadMethod && !currentImage) {\r\n      setUploadMethod(suggestedUploadMethod);\r\n\r\n    }\r\n  }, [suggestedUploadMethod, currentImage, imageType]);\r\n  \r\n  // Load preview URL for current image\r\n  React.useEffect(() => {\r\n    if (currentImage) {\r\n      console.log(`🔍 [PREVIEW] Processing currentImage for ${imageType}:`, {\r\n        filename: currentImage.filename,\r\n        hasDataUrl: !!currentImage.dataUrl,\r\n        isTemporary: !!(currentImage as any).isTemporary,\r\n        storage: currentImage.storage\r\n      });\r\n\r\n      // If the image already has a dataUrl (temporary or loaded from database), use it directly\r\n      if (currentImage.dataUrl) {\r\n        setPreviewUrl(currentImage.dataUrl);\r\n        console.log(`📷 [PREVIEW] Using dataUrl for ${imageType}:`, currentImage.filename);\r\n      } else if ((currentImage as any).isTemporary) {\r\n        // For temporary images without dataUrl, show error\r\n        setPreviewUrl(null);\r\n        setError('Temporary chart image missing preview data');\r\n        console.warn(`⚠️ [PREVIEW] Temporary image missing dataUrl for ${imageType}:`, currentImage.filename);\r\n      } else {\r\n        // For saved images, fetch from service\r\n        console.log(`🔍 [PREVIEW] Fetching from service for ${imageType}:`, currentImage.filename);\r\n\r\n        // Clear any existing error state\r\n        setError(null);\r\n\r\n        ChartImageService.getChartImageDataUrl(currentImage).then(url => {\r\n          if (url) {\r\n            // Add a small delay to ensure the data URL is fully ready\r\n            setTimeout(() => {\r\n              setPreviewUrl(url);\r\n              console.log(`✅ [PREVIEW] Successfully loaded from service for ${imageType}`);\r\n            }, 100);\r\n          } else {\r\n            setPreviewUrl(null);\r\n            setError('Failed to load image from cloud storage');\r\n            console.error(`❌ [PREVIEW] Failed to load from service for ${imageType}`);\r\n          }\r\n        }).catch(error => {\r\n          setPreviewUrl(null);\r\n          setError('Failed to load image preview');\r\n          console.error(`❌ [PREVIEW] Error loading from service for ${imageType}:`, error);\r\n        });\r\n      }\r\n    } else {\r\n      setPreviewUrl(null);\r\n    }\r\n  }, [currentImage, imageType]);\r\n  \r\n  // Cleanup preview URL on unmount\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (previewUrl && previewUrl.startsWith('blob:')) {\r\n        URL.revokeObjectURL(previewUrl);\r\n      }\r\n    };\r\n  }, [previewUrl]);\r\n  \r\n  // Validate TradingView URL\r\n  const isValidTradingViewUrl = useCallback((url: string): boolean => {\r\n    try {\r\n      const urlObj = new URL(url);\r\n      return urlObj.hostname.includes('tradingview.com') ||\r\n             urlObj.hostname.includes('chartimg.com') ||\r\n             url.includes('tradingview') ||\r\n             url.includes('chart');\r\n    } catch {\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Convert TradingView URL to direct S3 image URL\r\n  const getTradingViewImageUrl = useCallback((url: string): string => {\r\n\r\n\r\n    // If it's already a direct S3 image URL, return as-is\r\n    if (url.includes('s3.tradingview.com/snapshots/')) {\r\n\r\n      return url;\r\n    }\r\n\r\n    // If it's already an image URL, return as-is\r\n    if (url.includes('.png') || url.includes('.jpg') || url.includes('.jpeg') || url.includes('.webp')) {\r\n\r\n      return url;\r\n    }\r\n\r\n    // Extract snapshot ID from various TradingView URL formats\r\n    let snapshotId = null;\r\n\r\n    // Pattern 1: https://www.tradingview.com/x/SNAPSHOT_ID/\r\n    const xUrlMatch = url.match(/tradingview\\.com\\/x\\/([a-zA-Z0-9]+)\\/?/);\r\n    if (xUrlMatch) {\r\n      snapshotId = xUrlMatch[1];\r\n\r\n    }\r\n\r\n    // Pattern 2: https://www.tradingview.com/chart/SYMBOL/SNAPSHOT_ID/\r\n    if (!snapshotId) {\r\n      const chartUrlMatch = url.match(/tradingview\\.com\\/chart\\/[^\\/]+\\/([a-zA-Z0-9]+)\\/?/);\r\n      if (chartUrlMatch) {\r\n        snapshotId = chartUrlMatch[1];\r\n\r\n      }\r\n    }\r\n\r\n    // Pattern 3: Look for snapshot ID in URL parameters\r\n    if (!snapshotId) {\r\n      const paramMatch = url.match(/[?&]snapshot[_-]?id=([a-zA-Z0-9]+)/i);\r\n      if (paramMatch) {\r\n        snapshotId = paramMatch[1];\r\n\r\n      }\r\n    }\r\n\r\n    // Pattern 4: Extract any alphanumeric ID that looks like a snapshot ID (8+ chars)\r\n    if (!snapshotId) {\r\n      const idMatches = url.match(/[a-zA-Z0-9]{8,}/g);\r\n      if (idMatches) {\r\n        // Take the last match as it's likely the snapshot ID\r\n        snapshotId = idMatches[idMatches.length - 1];\r\n\r\n      }\r\n    }\r\n\r\n    // If we found a snapshot ID, construct the S3 URL\r\n    if (snapshotId && snapshotId.length >= 8) {\r\n      const firstLetter = snapshotId.charAt(0).toLowerCase();\r\n      const s3Url = `https://s3.tradingview.com/snapshots/${firstLetter}/${snapshotId}.png`;\r\n\r\n      return s3Url;\r\n    }\r\n\r\n    // Handle TradingView widget URLs (fallback)\r\n    if (url.includes('tradingview.com/widgetembed/')) {\r\n      const symbolMatch = url.match(/symbol=([^&]+)/);\r\n      if (symbolMatch) {\r\n\r\n        return `https://www.tradingview.com/chart/?symbol=${symbolMatch[1]}`;\r\n      }\r\n    }\r\n\r\n    // For other formats, try to append image export parameters (fallback)\r\n    const separator = url.includes('?') ? '&' : '?';\r\n    const fallbackUrl = `${url}${separator}format=image&width=1200&height=600`;\r\n\r\n    return fallbackUrl;\r\n  }, []);\r\n\r\n  const handleUrlUpload = useCallback(async () => {\r\n    if (disabled || !tradingViewUrl.trim()) return;\r\n\r\n    setError(null);\r\n    setIsUploading(true);\r\n    setUploadProgress(0);\r\n\r\n    try {\r\n      // Validate URL\r\n      if (!isValidTradingViewUrl(tradingViewUrl)) {\r\n        setError('Please enter a valid TradingView chart URL');\r\n        return;\r\n      }\r\n\r\n      // Convert to image URL\r\n      const imageUrl = getTradingViewImageUrl(tradingViewUrl);\r\n\r\n      // Simulate upload progress\r\n      const progressInterval = setInterval(() => {\r\n        setUploadProgress(prev => Math.min(prev + 10, 80));\r\n      }, 100);\r\n\r\n      // Download image from URL\r\n      const response = await fetch(imageUrl, {\r\n        mode: 'cors',\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to download image: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const blob = await response.blob();\r\n\r\n      // Convert blob to file\r\n      const filename = `tradingview-${imageType}-${Date.now()}.png`;\r\n      const file = new File([blob], filename, { type: blob.type || 'image/png' });\r\n\r\n      clearInterval(progressInterval);\r\n      setUploadProgress(90);\r\n\r\n      // Upload the downloaded file\r\n      console.log(`🔍 [URL_UPLOAD] Chart upload parameters:`, {\r\n        tradeId,\r\n        imageType,\r\n        fileName: file.name,\r\n        allowTemporary,\r\n        shouldCompress: true\r\n      });\r\n\r\n      const result = await ChartImageService.attachChartImage(tradeId, imageType, file, true, allowTemporary);\r\n\r\n      setUploadProgress(100);\r\n\r\n      if (result.success && result.chartImage) {\r\n        // Ensure the chart image has a dataUrl for immediate preview\r\n        const chartImageWithPreview = await ensureChartImageDataUrl(result.chartImage);\r\n\r\n        // Mark as temporary if needed\r\n        if (result.isTemporary) {\r\n          chartImageWithPreview.isTemporary = true;\r\n        }\r\n\r\n        onImageUploaded(chartImageWithPreview, 'url');\r\n        setTradingViewUrl(''); // Clear the URL input\r\n\r\n      } else {\r\n        setError(result.error || 'Upload failed');\r\n      }\r\n\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : 'Failed to download from URL');\r\n      console.error('❌ TradingView URL upload error:', {\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        name: error instanceof Error ? error.name : 'Error'\r\n      });\r\n    } finally {\r\n      setIsUploading(false);\r\n      setUploadProgress(0);\r\n    }\r\n  }, [tradeId, imageType, onImageUploaded, disabled, title, tradingViewUrl, isValidTradingViewUrl, getTradingViewImageUrl, ensureChartImageDataUrl]);\r\n\r\n  const handleFileSelect = useCallback(async (file: File) => {\r\n    if (disabled) return;\r\n\r\n    setError(null);\r\n    setIsUploading(true);\r\n    setUploadProgress(0);\r\n\r\n    try {\r\n      // Validate file\r\n      const validation = validateImageFile(file);\r\n      if (!validation.isValid) {\r\n        setError(validation.error || 'Invalid file');\r\n        return;\r\n      }\r\n\r\n      // Show warnings if any\r\n      if (validation.warnings && validation.warnings.length > 0) {\r\n        console.warn('File upload warnings:', validation.warnings);\r\n      }\r\n\r\n      // Simulate upload progress\r\n      const progressInterval = setInterval(() => {\r\n        setUploadProgress(prev => Math.min(prev + 10, 90));\r\n      }, 100);\r\n\r\n      // Upload image\r\n      console.log(`🔍 [UPLOAD] Chart upload parameters:`, {\r\n        tradeId,\r\n        imageType,\r\n        fileName: file.name,\r\n        allowTemporary,\r\n        shouldCompress: true\r\n      });\r\n\r\n      const result = await ChartImageService.attachChartImage(tradeId, imageType, file, true, allowTemporary);\r\n\r\n      clearInterval(progressInterval);\r\n      setUploadProgress(100);\r\n\r\n      if (result.success && result.chartImage) {\r\n        // Ensure the chart image has a dataUrl for immediate preview\r\n        const chartImageWithPreview = await ensureChartImageDataUrl(result.chartImage);\r\n\r\n        // Mark as temporary if needed\r\n        if (result.isTemporary) {\r\n          chartImageWithPreview.isTemporary = true;\r\n        }\r\n\r\n        onImageUploaded(chartImageWithPreview, 'file');\r\n        console.log(`✅ ${title} uploaded successfully${result.isTemporary ? ' (temporary)' : ''}`);\r\n\r\n      } else {\r\n        setError(result.error || 'Upload failed');\r\n      }\r\n\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : 'Upload failed');\r\n      console.error('❌ Chart image upload error:', {\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        name: error instanceof Error ? error.name : 'Error'\r\n      });\r\n    } finally {\r\n      setIsUploading(false);\r\n      setUploadProgress(0);\r\n    }\r\n  }, [tradeId, imageType, onImageUploaded, disabled, title, ensureChartImageDataUrl]);\r\n  \r\n  const handleFileInputChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (file) {\r\n      handleFileSelect(file);\r\n    }\r\n    // Reset input value to allow re-uploading the same file\r\n    event.target.value = '';\r\n  }, [handleFileSelect]);\r\n  \r\n  const handleDrop = useCallback((event: React.DragEvent) => {\r\n    event.preventDefault();\r\n    setDragActive(false);\r\n    \r\n    const file = event.dataTransfer.files[0];\r\n    if (file) {\r\n      handleFileSelect(file);\r\n    }\r\n  }, [handleFileSelect]);\r\n  \r\n  const handleDragOver = useCallback((event: React.DragEvent) => {\r\n    event.preventDefault();\r\n    setDragActive(true);\r\n  }, []);\r\n  \r\n  const handleDragLeave = useCallback((event: React.DragEvent) => {\r\n    event.preventDefault();\r\n    setDragActive(false);\r\n  }, []);\r\n  \r\n  const handleDelete = useCallback(async () => {\r\n    if (!currentImage || disabled) return;\r\n\r\n\r\n\r\n    try {\r\n      const success = await ChartImageService.deleteChartImage(tradeId, imageType, currentImage);\r\n      if (success) {\r\n        onImageDeleted();\r\n      } else {\r\n        setError('Failed to delete image');\r\n      }\r\n    } catch (error) {\r\n\r\n      setError(error instanceof Error ? error.message : 'Delete failed');\r\n    }\r\n  }, [currentImage, tradeId, imageType, onImageDeleted, disabled, title]);\r\n  \r\n  const openFileDialog = useCallback(() => {\r\n    if (!disabled) {\r\n      fileInputRef.current?.click();\r\n    }\r\n  }, [disabled]);\r\n  \r\n  if (compact && !currentImage) {\r\n    return (\r\n      <Tooltip content={`Upload ${title}`}>\r\n        <Button\r\n          isIconOnly\r\n          variant=\"light\"\r\n          size=\"sm\"\r\n          onPress={openFileDialog}\r\n          isDisabled={disabled}\r\n          className=\"text-gray-500 hover:text-primary-500\"\r\n          aria-label={`Upload ${title}`}\r\n        >\r\n          <Icon icon={icon} className=\"w-4 h-4\" />\r\n          <input\r\n            ref={fileInputRef}\r\n            type=\"file\"\r\n            accept={CHART_IMAGE_CONFIG.ALLOWED_TYPES.join(',')}\r\n            onChange={handleFileInputChange}\r\n            className=\"hidden\"\r\n            aria-label={`Upload ${title} chart image file`}\r\n          />\r\n        </Button>\r\n      </Tooltip>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardBody className=\"p-4\">\r\n        <div className=\"flex items-center justify-between mb-3\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Icon icon={icon} className=\"w-4 h-4 text-primary-500\" />\r\n            <span className=\"text-sm font-medium\">{title}</span>\r\n          </div>\r\n          {currentImage && (\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"text-right\">\r\n                <div className=\"text-xs text-gray-500\">\r\n                  {formatFileSize(currentImage.size)}\r\n                </div>\r\n                {(() => {\r\n                  const compressionInfo = getCompressionInfo(currentImage);\r\n                  if (compressionInfo.isCompressed && compressionInfo.compressionText) {\r\n                    return (\r\n                      <div className=\"text-xs text-green-600 dark:text-green-400 flex items-center gap-1\">\r\n                        <Icon icon=\"lucide:zap\" className=\"w-3 h-3\" />\r\n                        {compressionInfo.compressionText}\r\n                      </div>\r\n                    );\r\n                  }\r\n                  return null;\r\n                })()}\r\n              </div>\r\n              <Button\r\n                isIconOnly\r\n                variant=\"light\"\r\n                size=\"sm\"\r\n                onPress={handleDelete}\r\n                isDisabled={disabled}\r\n                className=\"text-danger-500 hover:text-danger-600\"\r\n                aria-label={`Delete ${title}`}\r\n              >\r\n                <Icon icon=\"lucide:trash-2\" className=\"w-4 h-4\" />\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <AnimatePresence mode=\"wait\">\r\n          {currentImage && previewUrl ? (\r\n            <motion.div\r\n              key=\"preview\"\r\n              initial={{ opacity: 0, scale: 0.95 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              exit={{ opacity: 0, scale: 0.95 }}\r\n              className=\"relative group\"\r\n            >\r\n              <img\r\n                src={previewUrl}\r\n                alt={title}\r\n                className=\"w-full h-32 object-cover rounded-lg border border-gray-200 dark:border-gray-700\"\r\n                onError={() => {\r\n                  setError('Failed to load image preview');\r\n                }}\r\n              />\r\n              <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center gap-2\">\r\n                <Button\r\n                  isIconOnly\r\n                  variant=\"flat\"\r\n                  size=\"sm\"\r\n                  onPress={() => {\r\n                    setUploadMethod('file');\r\n                    openFileDialog();\r\n                  }}\r\n                  isDisabled={disabled}\r\n                  className=\"w-6 h-6 min-w-6 rounded-md bg-black/90 hover:bg-black text-white border-0 shadow-sm hover:shadow-md transition-all duration-200 disabled:opacity-50\"\r\n                  aria-label=\"Replace chart image\"\r\n                >\r\n                  <Icon icon=\"lucide:upload\" className=\"w-3 h-3\" />\r\n                </Button>\r\n              </div>\r\n            </motion.div>\r\n          ) : (\r\n            <motion.div\r\n              key=\"upload\"\r\n              initial={{ opacity: 0, scale: 0.95 }}\r\n              animate={{ opacity: 1, scale: 1 }}\r\n              exit={{ opacity: 0, scale: 0.95 }}\r\n              className=\"space-y-4\"\r\n            >\r\n              {/* Upload Method Tabs */}\r\n              {suggestedUploadMethod && imageType === 'afterExit' && (\r\n                <div className=\"mb-2 p-2 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg\">\r\n                  <p className=\"text-xs text-blue-600 dark:text-blue-400 flex items-center gap-1\">\r\n                    <Icon icon=\"lucide:info\" className=\"w-3 h-3\" />\r\n                    Auto-selected {suggestedUploadMethod === 'url' ? 'TradingView URL' : 'file upload'} method to match your \"Before Entry\" chart\r\n                  </p>\r\n                </div>\r\n              )}\r\n              <Tabs\r\n                selectedKey={uploadMethod}\r\n                onSelectionChange={(key) => setUploadMethod(key as 'file' | 'url')}\r\n                size=\"sm\"\r\n                variant=\"underlined\"\r\n                classNames={{\r\n                  tabList: \"gap-6 w-full relative rounded-none p-0 border-b border-divider\",\r\n                  cursor: \"w-full bg-primary-500\",\r\n                  tab: \"max-w-fit px-0 h-12\",\r\n                  tabContent: \"group-data-[selected=true]:text-primary-500\"\r\n                }}\r\n              >\r\n                <Tab\r\n                  key=\"file\"\r\n                  title={\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Icon icon=\"lucide:upload\" className=\"w-4 h-4\" />\r\n                      <span>Upload File</span>\r\n                    </div>\r\n                  }\r\n                />\r\n                <Tab\r\n                  key=\"url\"\r\n                  title={\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Icon icon=\"lucide:link\" className=\"w-4 h-4\" />\r\n                      <span>TradingView URL</span>\r\n                    </div>\r\n                  }\r\n                />\r\n              </Tabs>\r\n\r\n              {/* Upload Content */}\r\n              {uploadMethod === 'file' ? (\r\n                <div\r\n                  className={`\r\n                    border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer\r\n                    ${dragActive\r\n                      ? 'border-primary-500 bg-primary-50 dark:bg-primary-950'\r\n                      : 'border-gray-300 dark:border-gray-600 hover:border-primary-400'\r\n                    }\r\n                    ${disabled ? 'opacity-50 cursor-not-allowed' : ''}\r\n                  `}\r\n                  onDrop={handleDrop}\r\n                  onDragOver={handleDragOver}\r\n                  onDragLeave={handleDragLeave}\r\n                  onClick={openFileDialog}\r\n                  role=\"button\"\r\n                  tabIndex={0}\r\n                  aria-label={`Upload ${title} by dropping file or clicking`}\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'Enter' || e.key === ' ') {\r\n                      e.preventDefault();\r\n                      openFileDialog();\r\n                    }\r\n                  }}\r\n                >\r\n                  {isUploading ? (\r\n                    <div className=\"space-y-3\">\r\n                      <Icon icon=\"lucide:upload-cloud\" className=\"w-8 h-8 mx-auto text-primary-500 animate-pulse\" />\r\n                      <div>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Uploading...</p>\r\n                        <Progress value={uploadProgress} className=\"mt-2\" />\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"space-y-2\">\r\n                      <Icon icon=\"lucide:image-plus\" className=\"w-8 h-8 mx-auto text-gray-400\" />\r\n                      <div>\r\n                        <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                          Drop image here or click to upload\r\n                        </p>\r\n                        <p className=\"text-xs text-gray-500\">\r\n                          PNG, JPG, WebP up to {formatFileSize(CHART_IMAGE_CONFIG.MAX_FILE_SIZE)}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Input\r\n                      label=\"TradingView Chart URL\"\r\n                      placeholder=\"https://www.tradingview.com/chart/...\"\r\n                      value={tradingViewUrl}\r\n                      onValueChange={setTradingViewUrl}\r\n                      variant=\"bordered\"\r\n                      startContent={<Icon icon=\"lucide:link\" className=\"w-4 h-4 text-gray-400\" />}\r\n                      isDisabled={disabled || isUploading}\r\n                      description=\"Paste your TradingView chart link here\"\r\n                    />\r\n                  </div>\r\n\r\n                  {isUploading ? (\r\n                    <div className=\"space-y-3 text-center\">\r\n                      <Icon icon=\"lucide:download\" className=\"w-8 h-8 mx-auto text-primary-500 animate-pulse\" />\r\n                      <div>\r\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Downloading from TradingView...</p>\r\n                        <Progress value={uploadProgress} className=\"mt-2\" />\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"flex justify-center\">\r\n                      <Button\r\n                        isIconOnly\r\n                        variant=\"flat\"\r\n                        size=\"sm\"\r\n                        onPress={handleUrlUpload}\r\n                        isDisabled={disabled || !tradingViewUrl.trim()}\r\n                        className=\"w-6 h-6 min-w-6 rounded-lg bg-black/90 hover:bg-black text-white border-0 shadow-md hover:shadow-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                        aria-label=\"Upload chart from URL\"\r\n                      >\r\n                        <Icon icon=\"lucide:upload\" className=\"w-3 h-3\" />\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n        \r\n        {error && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            className=\"mt-3 p-2 bg-danger-50 dark:bg-danger-950 border border-danger-200 dark:border-danger-800 rounded-lg\"\r\n          >\r\n            <p className=\"text-sm text-danger-600 dark:text-danger-400\">{error}</p>\r\n          </motion.div>\r\n        )}\r\n\r\n\r\n        \r\n        <input\r\n          ref={fileInputRef}\r\n          type=\"file\"\r\n          accept={CHART_IMAGE_CONFIG.ALLOWED_TYPES.join(',')}\r\n          onChange={handleFileInputChange}\r\n          className=\"hidden\"\r\n          aria-label={`Upload ${title} chart image file`}\r\n        />\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, Tooltip } from '@heroui/react';\r\nimport { Icon } from '@iconify/react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { ChartImage } from '../types/trade';\r\nimport { ChartImageService } from '../services/chartImageService';\r\nimport { formatFileSize } from '../utils/chartImageUtils';\r\n\r\ninterface ChartImageViewerProps {\r\n  isOpen: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  chartImage: ChartImage | null;\r\n  title?: string;\r\n}\r\n\r\nexport const ChartImageViewer: React.FC<ChartImageViewerProps> = ({\r\n  isOpen,\r\n  onOpenChange,\r\n  chartImage,\r\n  title = 'Chart Image',\r\n}) => {\r\n  const [imageUrl, setImageUrl] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\r\n  \r\n  // Load image when modal opens\r\n  useEffect(() => {\r\n    if (isOpen && chartImage) {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      console.log(`🔍 [CHART_VIEWER] Loading chart image:`, {\r\n        filename: chartImage.filename,\r\n        hasDataUrl: !!chartImage.dataUrl,\r\n        isTemporary: !!(chartImage as any).isTemporary,\r\n        storage: chartImage.storage\r\n      });\r\n\r\n      // If chartImage already has a dataUrl, use it directly\r\n      if (chartImage.dataUrl) {\r\n        setImageUrl(chartImage.dataUrl);\r\n        setIsLoading(false);\r\n        console.log(`📷 [CHART_VIEWER] Using existing dataUrl for:`, chartImage.filename);\r\n      } else if ((chartImage as any).isTemporary) {\r\n        // For temporary images without dataUrl, show error\r\n        setError('Temporary chart image missing preview data');\r\n        setIsLoading(false);\r\n        console.warn(`⚠️ [CHART_VIEWER] Temporary image missing dataUrl:`, chartImage.filename);\r\n      } else {\r\n        // For saved images, fetch from service\r\n        console.log(`🔍 [CHART_VIEWER] Fetching from service:`, chartImage.filename);\r\n        ChartImageService.getChartImageDataUrl(chartImage)\r\n          .then(url => {\r\n            setImageUrl(url);\r\n            setIsLoading(false);\r\n            console.log(`✅ [CHART_VIEWER] Successfully loaded from service`);\r\n          })\r\n          .catch(err => {\r\n            setError('Failed to load image');\r\n            setIsLoading(false);\r\n            console.error('❌ [CHART_VIEWER] Failed to load chart image:', err);\r\n          });\r\n      }\r\n    } else {\r\n      setImageUrl(null);\r\n      setZoom(1);\r\n      setPosition({ x: 0, y: 0 });\r\n    }\r\n  }, [isOpen, chartImage]);\r\n  \r\n  // Cleanup blob URLs\r\n  useEffect(() => {\r\n    return () => {\r\n      if (imageUrl && imageUrl.startsWith('blob:')) {\r\n        URL.revokeObjectURL(imageUrl);\r\n      }\r\n    };\r\n  }, [imageUrl]);\r\n  \r\n  const handleZoomIn = () => {\r\n    setZoom(prev => Math.min(prev * 1.5, 5));\r\n  };\r\n  \r\n  const handleZoomOut = () => {\r\n    setZoom(prev => Math.max(prev / 1.5, 0.5));\r\n  };\r\n  \r\n  const handleResetZoom = () => {\r\n    setZoom(1);\r\n    setPosition({ x: 0, y: 0 });\r\n  };\r\n  \r\n  const handleMouseDown = (e: React.MouseEvent) => {\r\n    if (zoom > 1) {\r\n      setIsDragging(true);\r\n      setDragStart({\r\n        x: e.clientX - position.x,\r\n        y: e.clientY - position.y,\r\n      });\r\n    }\r\n  };\r\n  \r\n  const handleMouseMove = (e: React.MouseEvent) => {\r\n    if (isDragging && zoom > 1) {\r\n      setPosition({\r\n        x: e.clientX - dragStart.x,\r\n        y: e.clientY - dragStart.y,\r\n      });\r\n    }\r\n  };\r\n  \r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n  };\r\n  \r\n  const handleWheel = React.useCallback((e: WheelEvent) => {\r\n    // Only prevent default if we're actually zooming\r\n    if (e.deltaY !== 0) {\r\n      e.preventDefault();\r\n      const delta = e.deltaY > 0 ? 0.9 : 1.1;\r\n      setZoom(prev => Math.max(0.5, Math.min(5, prev * delta)));\r\n    }\r\n  }, []);\r\n\r\n  // Use native event listener with passive: false to avoid preventDefault warnings\r\n  const wheelContainerRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    const container = wheelContainerRef.current;\r\n    if (container) {\r\n      container.addEventListener('wheel', handleWheel, { passive: false });\r\n      return () => {\r\n        container.removeEventListener('wheel', handleWheel);\r\n      };\r\n    }\r\n  }, [handleWheel]);\r\n  \r\n  const downloadImage = () => {\r\n    if (imageUrl && chartImage) {\r\n      const link = document.createElement('a');\r\n      link.href = imageUrl;\r\n      link.download = chartImage.filename;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onOpenChange={onOpenChange}\r\n      size=\"5xl\"\r\n      backdrop=\"blur\"\r\n      classNames={{\r\n        base: \"bg-white/95 dark:bg-gray-900/95\",\r\n        backdrop: \"bg-black/50\",\r\n      }}\r\n    >\r\n      <ModalContent>\r\n        {(onClose) => (\r\n          <>\r\n            <ModalHeader className=\"flex justify-between items-center border-b border-gray-200 dark:border-gray-700\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <Icon icon=\"lucide:image\" className=\"w-5 h-5 text-primary-500\" />\r\n                <div>\r\n                  <h3 className=\"text-lg font-semibold\">{title}</h3>\r\n                  {chartImage && (\r\n                    <p className=\"text-sm text-gray-500\">\r\n                      {chartImage.filename} • {formatFileSize(chartImage.size)}\r\n                      {chartImage.compressed && ' • Compressed'}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex items-center gap-2\">\r\n                {/* Zoom Controls */}\r\n                <div className=\"flex items-center gap-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1\">\r\n                  <Tooltip content=\"Zoom Out\">\r\n                    <Button\r\n                      isIconOnly\r\n                      variant=\"light\"\r\n                      size=\"sm\"\r\n                      onPress={handleZoomOut}\r\n                      isDisabled={zoom <= 0.5}\r\n                    >\r\n                      <Icon icon=\"lucide:zoom-out\" className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </Tooltip>\r\n                  \r\n                  <span className=\"text-sm font-mono px-2 min-w-[60px] text-center\">\r\n                    {Math.round(zoom * 100)}%\r\n                  </span>\r\n                  \r\n                  <Tooltip content=\"Zoom In\">\r\n                    <Button\r\n                      isIconOnly\r\n                      variant=\"light\"\r\n                      size=\"sm\"\r\n                      onPress={handleZoomIn}\r\n                      isDisabled={zoom >= 5}\r\n                    >\r\n                      <Icon icon=\"lucide:zoom-in\" className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </Tooltip>\r\n                  \r\n                  <Tooltip content=\"Reset Zoom\">\r\n                    <Button\r\n                      isIconOnly\r\n                      variant=\"light\"\r\n                      size=\"sm\"\r\n                      onPress={handleResetZoom}\r\n                    >\r\n                      <Icon icon=\"lucide:maximize\" className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </Tooltip>\r\n                </div>\r\n                \r\n                {/* Download Button */}\r\n                <Tooltip content=\"Download Image\">\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={downloadImage}\r\n                    isDisabled={!imageUrl}\r\n                  >\r\n                    <Icon icon=\"lucide:download\" className=\"w-4 h-4\" />\r\n                  </Button>\r\n                </Tooltip>\r\n              </div>\r\n            </ModalHeader>\r\n            \r\n            <ModalBody className=\"p-0 overflow-hidden\">\r\n              <div\r\n                ref={wheelContainerRef}\r\n                className=\"relative w-full h-[70vh] bg-gray-50 dark:bg-gray-900 overflow-hidden\"\r\n              >\r\n                <AnimatePresence mode=\"wait\">\r\n                  {isLoading ? (\r\n                    <motion.div\r\n                      key=\"loading\"\r\n                      initial={{ opacity: 0 }}\r\n                      animate={{ opacity: 1 }}\r\n                      exit={{ opacity: 0 }}\r\n                      className=\"absolute inset-0 flex items-center justify-center\"\r\n                    >\r\n                      <div className=\"text-center\">\r\n                        <Icon icon=\"lucide:loader-2\" className=\"w-8 h-8 animate-spin text-primary-500 mx-auto mb-2\" />\r\n                        <p className=\"text-sm text-gray-500\">Loading image...</p>\r\n                      </div>\r\n                    </motion.div>\r\n                  ) : error ? (\r\n                    <motion.div\r\n                      key=\"error\"\r\n                      initial={{ opacity: 0 }}\r\n                      animate={{ opacity: 1 }}\r\n                      exit={{ opacity: 0 }}\r\n                      className=\"absolute inset-0 flex items-center justify-center\"\r\n                    >\r\n                      <div className=\"text-center\">\r\n                        <Icon icon=\"lucide:image-off\" className=\"w-8 h-8 text-danger-500 mx-auto mb-2\" />\r\n                        <p className=\"text-sm text-danger-600\">{error}</p>\r\n                      </div>\r\n                    </motion.div>\r\n                  ) : imageUrl ? (\r\n                    <motion.div\r\n                      key=\"image\"\r\n                      initial={{ opacity: 0, scale: 0.95 }}\r\n                      animate={{ opacity: 1, scale: 1 }}\r\n                      exit={{ opacity: 0, scale: 0.95 }}\r\n                      className=\"absolute inset-0 flex items-center justify-center\"\r\n                    >\r\n                      <img\r\n                        src={imageUrl}\r\n                        alt={title}\r\n                        className={`max-w-none transition-transform ${\r\n                          zoom > 1 ? 'cursor-grab' : 'cursor-zoom-in'\r\n                        } ${isDragging ? 'cursor-grabbing' : ''}`}\r\n                        style={{\r\n                          transform: `scale(${zoom}) translate(${position.x / zoom}px, ${position.y / zoom}px)`,\r\n                          maxHeight: zoom === 1 ? '100%' : 'none',\r\n                          maxWidth: zoom === 1 ? '100%' : 'none',\r\n                        }}\r\n                        onMouseDown={handleMouseDown}\r\n                        onMouseMove={handleMouseMove}\r\n                        onMouseUp={handleMouseUp}\r\n                        onMouseLeave={handleMouseUp}\r\n                        onClick={zoom === 1 ? handleZoomIn : undefined}\r\n                        draggable={false}\r\n                      />\r\n                    </motion.div>\r\n                  ) : null}\r\n                </AnimatePresence>\r\n              </div>\r\n            </ModalBody>\r\n            \r\n            <ModalFooter className=\"border-t border-gray-200 dark:border-gray-700\">\r\n              <div className=\"flex justify-between items-center w-full\">\r\n                <div className=\"text-sm text-gray-500\">\r\n                  {zoom > 1 && 'Click and drag to pan • '}\r\n                  Scroll to zoom • Click image to zoom in\r\n                </div>\r\n                <Button color=\"primary\" onPress={onClose}>\r\n                  Close\r\n                </Button>\r\n              </div>\r\n            </ModalFooter>\r\n          </>\r\n        )}\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, Tooltip, Select, SelectItem, Chip, Progress, Input, DatePicker } from '@heroui/react';\r\nimport { Icon } from '@iconify/react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { ChartImage } from '../types/trade';\r\nimport { DatabaseService, ChartImageBlob } from '../db/database';\r\nimport { formatFileSize } from '../utils/chartImageUtils';\r\nimport { SupabaseService } from '../services/supabaseService';\r\nimport { ChartImageService } from '../services/chartImageService';\r\n\r\ninterface UniversalChartViewerProps {\r\n  isOpen: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  initialChartImage?: ChartImage | null;\r\n  initialTradeId?: string;\r\n  refreshTrigger?: number; // Add refresh trigger prop\r\n}\r\n\r\ninterface ChartImageWithContext extends ChartImageBlob {\r\n  tradeName?: string;\r\n  tradeDate?: string;\r\n  tradeNo?: number;\r\n  dataUrl?: string;\r\n  // Additional trade context for filtering\r\n  plRs?: number;\r\n  setup?: string;\r\n  positionStatus?: 'Open' | 'Closed' | 'Partial';\r\n}\r\n\r\ntype FilterType = 'all' | 'beforeEntry' | 'afterExit';\r\ntype OutcomeFilter = 'all' | 'win' | 'loss' | 'breakeven';\r\n\r\ninterface DateRange {\r\n  start: string | null;\r\n  end: string | null;\r\n}\r\n\r\nexport const UniversalChartViewer: React.FC<UniversalChartViewerProps> = ({\r\n  isOpen,\r\n  onOpenChange,\r\n  initialChartImage,\r\n  initialTradeId,\r\n  refreshTrigger,\r\n}) => {\r\n  const [allImages, setAllImages] = useState<ChartImageWithContext[]>([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [filter, setFilter] = useState<FilterType>('all');\r\n  const [outcomeFilter, setOutcomeFilter] = useState<OutcomeFilter>('all');\r\n  const [setupFilter, setSetupFilter] = useState<string>('all');\r\n  const [dateRange, setDateRange] = useState<DateRange>({ start: null, end: null });\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [showHeader, setShowHeader] = useState(true);\r\n  const [isFullscreen, setIsFullscreen] = useState(false);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\r\n  const [preloadedImages, setPreloadedImages] = useState<Map<string, string>>(new Map());\r\n  const [loadingProgress, setLoadingProgress] = useState(0);\r\n  const [symbolSearch, setSymbolSearch] = useState('');\r\n  const [showSymbolDropdown, setShowSymbolDropdown] = useState(false);\r\n\r\n  // Setup options (same as in trade modal)\r\n  const SETUP_OPTIONS = [\r\n    'ITB', 'Chop BO', 'IPO Base', '3/5/8', '21/50', 'Breakout', 'Pullback',\r\n    'Reversal', 'Continuation', 'Gap Fill', 'OTB', 'Stage 2', 'ONP BO',\r\n    'EP', 'Pivot Bo', 'Cheat', 'Flag', 'Other'\r\n  ];\r\n\r\n  // Get unique symbols for search\r\n  const uniqueSymbols = useMemo(() => {\r\n    const symbols = new Set(allImages.map(img => img.tradeName).filter(Boolean));\r\n    return Array.from(symbols).sort();\r\n  }, [allImages]);\r\n\r\n  // Get unique setups from the data\r\n  const uniqueSetups = useMemo(() => {\r\n    const setups = Array.from(new Set(allImages.map(img => img.setup).filter(Boolean)));\r\n    return setups.sort();\r\n  }, [allImages]);\r\n\r\n  // Get filtered symbols for dropdown\r\n  const filteredSymbols = useMemo(() => {\r\n    if (!symbolSearch) return uniqueSymbols.slice(0, 10);\r\n    return uniqueSymbols\r\n      .filter(symbol => symbol.toLowerCase().includes(symbolSearch.toLowerCase()))\r\n      .slice(0, 10);\r\n  }, [uniqueSymbols, symbolSearch]);\r\n\r\n  // Helper function to determine trade outcome\r\n  const getTradeOutcome = (plRs: number | undefined, positionStatus: string | undefined): OutcomeFilter => {\r\n    if (plRs === undefined || positionStatus === 'Open') return 'breakeven';\r\n    if (plRs > 0) return 'win';\r\n    if (plRs < 0) return 'loss';\r\n    return 'breakeven';\r\n  };\r\n\r\n  // Check if any filters are active\r\n  const hasActiveFilters = useMemo(() => {\r\n    return filter !== 'all' ||\r\n           outcomeFilter !== 'all' ||\r\n           setupFilter !== 'all' ||\r\n           dateRange.start ||\r\n           dateRange.end ||\r\n           symbolSearch.length > 0;\r\n  }, [filter, outcomeFilter, setupFilter, dateRange, symbolSearch]);\r\n\r\n  // Filter images based on all active filters\r\n  const filteredImages = useMemo(() => {\r\n    let images = allImages;\r\n\r\n    // Apply chart type filter (beforeEntry/afterExit)\r\n    if (filter !== 'all') {\r\n      images = images.filter(img => img.imageType === filter);\r\n    }\r\n\r\n    // Apply outcome filter (win/loss/breakeven)\r\n    if (outcomeFilter !== 'all') {\r\n      images = images.filter(img => {\r\n        const outcome = getTradeOutcome(img.plRs, img.positionStatus);\r\n        return outcome === outcomeFilter;\r\n      });\r\n    }\r\n\r\n    // Apply setup filter\r\n    if (setupFilter !== 'all') {\r\n      images = images.filter(img => img.setup === setupFilter);\r\n    }\r\n\r\n    // Apply date range filter\r\n    if (dateRange.start || dateRange.end) {\r\n      images = images.filter(img => {\r\n        if (!img.tradeDate) return false;\r\n        const tradeDate = new Date(img.tradeDate);\r\n\r\n        if (dateRange.start) {\r\n          const startDate = new Date(dateRange.start);\r\n          if (tradeDate < startDate) return false;\r\n        }\r\n\r\n        if (dateRange.end) {\r\n          const endDate = new Date(dateRange.end);\r\n          if (tradeDate > endDate) return false;\r\n        }\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    // Apply symbol search\r\n    if (symbolSearch) {\r\n      images = images.filter(img =>\r\n        img.tradeName?.toLowerCase().includes(symbolSearch.toLowerCase())\r\n      );\r\n    }\r\n\r\n    return images;\r\n  }, [allImages, filter, outcomeFilter, setupFilter, dateRange, symbolSearch, getTradeOutcome]);\r\n\r\n  const currentImage = filteredImages[currentIndex];\r\n\r\n  // Load all chart images when modal opens or when refresh is triggered\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      loadAllImages();\r\n    } else {\r\n      // Cleanup when modal closes\r\n      preloadedImages.forEach(url => {\r\n        if (url.startsWith('blob:')) {\r\n          URL.revokeObjectURL(url);\r\n        }\r\n      });\r\n      setPreloadedImages(new Map());\r\n      setZoom(1);\r\n      setPosition({ x: 0, y: 0 });\r\n      // Reset current index when closing\r\n      setCurrentIndex(0);\r\n    }\r\n  }, [isOpen, refreshTrigger]); // Add refreshTrigger to dependencies\r\n\r\n  // Set initial image when provided\r\n  useEffect(() => {\r\n    if (initialChartImage && filteredImages.length > 0) {\r\n      const index = filteredImages.findIndex(img => img.id === initialChartImage.id);\r\n      if (index >= 0) {\r\n        setCurrentIndex(index);\r\n      }\r\n    }\r\n  }, [initialChartImage, filteredImages]);\r\n\r\n  // Reset current index when filter or symbol search changes\r\n  useEffect(() => {\r\n    setCurrentIndex(0);\r\n  }, [filter, symbolSearch]);\r\n\r\n  // Keyboard navigation\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if (!isOpen) return;\r\n\r\n      switch (e.key) {\r\n        case 'ArrowLeft':\r\n          e.preventDefault();\r\n          navigatePrevious();\r\n          break;\r\n        case 'ArrowRight':\r\n          e.preventDefault();\r\n          navigateNext();\r\n          break;\r\n        case 'Escape':\r\n          onOpenChange(false);\r\n          break;\r\n        case '1':\r\n          setFilter('beforeEntry');\r\n          break;\r\n        case '2':\r\n          setFilter('afterExit');\r\n          break;\r\n        case '0':\r\n          setFilter('all');\r\n          break;\r\n        case 'w':\r\n          setOutcomeFilter('win');\r\n          break;\r\n        case 'l':\r\n          setOutcomeFilter('loss');\r\n          break;\r\n        case 'b':\r\n          setOutcomeFilter('breakeven');\r\n          break;\r\n        case 'c':\r\n          // Clear all filters\r\n          setFilter('all');\r\n          setOutcomeFilter('all');\r\n          setSetupFilter('all');\r\n          setDateRange({ start: null, end: null });\r\n          setSymbolSearch('');\r\n          break;\r\n        case 'f':\r\n          // Toggle filter panel\r\n          setShowFilters(!showFilters);\r\n          break;\r\n        case 'F11':\r\n        case 'F':\r\n          // Toggle fullscreen\r\n          e.preventDefault();\r\n          toggleFullscreen();\r\n          break;\r\n        case 'h':\r\n        case 'H':\r\n          // Toggle header visibility\r\n          setShowHeader(!showHeader);\r\n          break;\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isOpen, currentIndex, filteredImages.length]);\r\n\r\n  const loadAllImages = async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setLoadingProgress(0);\r\n\r\n    try {\r\n      // PURE SUPABASE: Load trades from Supabase (chart images are embedded in trade records)\r\n      const allTrades = await SupabaseService.getAllTrades();\r\n\r\n      // PURE SUPABASE: Extract chart images from trade chart attachments\r\n      const imagesWithDataUrls: ChartImageWithContext[] = [];\r\n      let processedCount = 0;\r\n      const totalItems = allTrades.length;\r\n\r\n      // Process trades and extract chart attachments\r\n      for (let i = 0; i < allTrades.length; i++) {\r\n        const trade = allTrades[i];\r\n        setLoadingProgress((processedCount / totalItems) * 100);\r\n\r\n        try {\r\n          if (trade.chartAttachments) {\r\n            // Process beforeEntry chart\r\n            if (trade.chartAttachments.beforeEntry) {\r\n              const chartImage = trade.chartAttachments.beforeEntry;\r\n\r\n              let dataUrl = chartImage.dataUrl;\r\n\r\n              // If no dataUrl, try to generate one (but skip temporary charts)\r\n              if (!dataUrl && chartImage.storage === 'blob' && chartImage.blobId && !(chartImage as any).isTemporary) {\r\n                dataUrl = await ChartImageService.getChartImageDataUrl(chartImage);\r\n              }\r\n\r\n              if (dataUrl) {\r\n                const imageWithContext = {\r\n                  id: chartImage.id,\r\n                  tradeId: trade.id,\r\n                  imageType: 'beforeEntry' as const,\r\n                  filename: chartImage.filename,\r\n                  mimeType: chartImage.mimeType,\r\n                  size: chartImage.size,\r\n                  data: new Blob(),\r\n                  uploadedAt: new Date(chartImage.uploadedAt),\r\n                  compressed: chartImage.compressed || false,\r\n                  originalSize: chartImage.originalSize,\r\n                  tradeName: trade.name,\r\n                  tradeDate: trade.date,\r\n                  tradeNo: trade.tradeNo ? Number(trade.tradeNo) : 0,\r\n                  dataUrl,\r\n                  // Additional trade context for filtering\r\n                  plRs: trade.plRs,\r\n                  setup: trade.setup,\r\n                  positionStatus: trade.positionStatus\r\n                };\r\n\r\n                imagesWithDataUrls.push(imageWithContext);\r\n              }\r\n            }\r\n\r\n            // Process afterExit chart\r\n            if (trade.chartAttachments.afterExit) {\r\n              const chartImage = trade.chartAttachments.afterExit;\r\n\r\n              let dataUrl = chartImage.dataUrl;\r\n\r\n              // If no dataUrl, try to generate one (but skip temporary charts)\r\n              if (!dataUrl && chartImage.storage === 'blob' && chartImage.blobId && !(chartImage as any).isTemporary) {\r\n                dataUrl = await ChartImageService.getChartImageDataUrl(chartImage);\r\n              }\r\n\r\n              if (dataUrl) {\r\n                const imageWithContext = {\r\n                  id: chartImage.id,\r\n                  tradeId: trade.id,\r\n                  imageType: 'afterExit' as const,\r\n                  filename: chartImage.filename,\r\n                  mimeType: chartImage.mimeType,\r\n                  size: chartImage.size,\r\n                  data: new Blob(),\r\n                  uploadedAt: new Date(chartImage.uploadedAt),\r\n                  compressed: chartImage.compressed || false,\r\n                  originalSize: chartImage.originalSize,\r\n                  tradeName: trade.name,\r\n                  tradeDate: trade.date,\r\n                  tradeNo: trade.tradeNo ? Number(trade.tradeNo) : 0,\r\n                  dataUrl,\r\n                  // Additional trade context for filtering\r\n                  plRs: trade.plRs,\r\n                  setup: trade.setup,\r\n                  positionStatus: trade.positionStatus\r\n                };\r\n\r\n                imagesWithDataUrls.push(imageWithContext);\r\n\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error(`Failed to process chart attachments for trade ${trade.name}:`, err);\r\n        }\r\n        processedCount++;\r\n      }\r\n\r\n      // All chart processing is now done in the main loop above\r\n\r\n\r\n\r\n      // Deduplicate images by ID (in case same image exists in both blob and inline storage)\r\n      const uniqueImages = new Map<string, ChartImageWithContext>();\r\n      imagesWithDataUrls.forEach(image => {\r\n        if (!uniqueImages.has(image.id)) {\r\n          uniqueImages.set(image.id, image);\r\n        }\r\n      });\r\n\r\n      // Sort images: beforeEntry first, then afterExit, then by trade date\r\n      const sortedImages = Array.from(uniqueImages.values()).sort((a, b) => {\r\n        // First sort by image type: beforeEntry (0) comes before afterExit (1)\r\n        const typeOrder = { beforeEntry: 0, afterExit: 1 };\r\n        const typeComparison = typeOrder[a.imageType] - typeOrder[b.imageType];\r\n\r\n        if (typeComparison !== 0) {\r\n          return typeComparison;\r\n        }\r\n\r\n        // If same type, sort by trade date (newest first)\r\n        const dateA = a.tradeDate ? new Date(a.tradeDate).getTime() : 0;\r\n        const dateB = b.tradeDate ? new Date(b.tradeDate).getTime() : 0;\r\n        return dateB - dateA;\r\n      });\r\n\r\n      setAllImages(sortedImages);\r\n      setLoadingProgress(100);\r\n\r\n      // Preload first few images\r\n      preloadAdjacentImages(0, imagesWithDataUrls);\r\n\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\r\n      setError(`Failed to load chart images: ${errorMessage}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const preloadAdjacentImages = useCallback((index: number, images: ChartImageWithContext[]) => {\r\n    const preloadRange = 2; // Preload 2 images before and after current\r\n    const newPreloaded = new Map(preloadedImages);\r\n\r\n    for (let i = Math.max(0, index - preloadRange); i <= Math.min(images.length - 1, index + preloadRange); i++) {\r\n      const img = images[i];\r\n      if (img.dataUrl && !newPreloaded.has(img.id)) {\r\n        newPreloaded.set(img.id, img.dataUrl);\r\n      }\r\n    }\r\n\r\n    setPreloadedImages(newPreloaded);\r\n  }, [preloadedImages]);\r\n\r\n  const navigateNext = useCallback(() => {\r\n    if (currentIndex < filteredImages.length - 1) {\r\n      const newIndex = currentIndex + 1;\r\n      setCurrentIndex(newIndex);\r\n      preloadAdjacentImages(newIndex, filteredImages);\r\n      resetZoom();\r\n    }\r\n  }, [currentIndex, filteredImages, preloadAdjacentImages]);\r\n\r\n  const navigatePrevious = useCallback(() => {\r\n    if (currentIndex > 0) {\r\n      const newIndex = currentIndex - 1;\r\n      setCurrentIndex(newIndex);\r\n      preloadAdjacentImages(newIndex, filteredImages);\r\n      resetZoom();\r\n    }\r\n  }, [currentIndex, filteredImages, preloadAdjacentImages]);\r\n\r\n  const resetZoom = () => {\r\n    setZoom(1);\r\n    setPosition({ x: 0, y: 0 });\r\n  };\r\n\r\n  const handleZoomIn = () => {\r\n    setZoom(prev => Math.min(prev * 1.5, 5));\r\n  };\r\n\r\n  const handleZoomOut = () => {\r\n    setZoom(prev => Math.max(prev / 1.5, 0.5));\r\n  };\r\n\r\n  const handleMouseDown = (e: React.MouseEvent) => {\r\n    if (zoom > 1) {\r\n      setIsDragging(true);\r\n      setDragStart({\r\n        x: e.clientX - position.x,\r\n        y: e.clientY - position.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMouseMove = (e: React.MouseEvent) => {\r\n    if (isDragging && zoom > 1) {\r\n      setPosition({\r\n        x: e.clientX - dragStart.x,\r\n        y: e.clientY - dragStart.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setIsDragging(false);\r\n  };\r\n\r\n  const toggleFullscreen = async () => {\r\n    try {\r\n      if (!isFullscreen) {\r\n        // Enter fullscreen\r\n        if (document.documentElement.requestFullscreen) {\r\n          await document.documentElement.requestFullscreen();\r\n        }\r\n        setIsFullscreen(true);\r\n      } else {\r\n        // Exit fullscreen\r\n        if (document.exitFullscreen) {\r\n          await document.exitFullscreen();\r\n        }\r\n        setIsFullscreen(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Fullscreen error:', error);\r\n    }\r\n  };\r\n\r\n  // Listen for fullscreen changes\r\n  useEffect(() => {\r\n    const handleFullscreenChange = () => {\r\n      setIsFullscreen(!!document.fullscreenElement);\r\n    };\r\n\r\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\r\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\r\n  }, []);\r\n\r\n  const downloadCurrentImage = () => {\r\n    if (currentImage?.dataUrl) {\r\n      const link = document.createElement('a');\r\n      link.href = currentImage.dataUrl;\r\n      link.download = currentImage.filename;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  };\r\n\r\n  const getImageTypeLabel = (type: 'beforeEntry' | 'afterExit') => {\r\n    return type === 'beforeEntry' ? 'Before Entry' : 'After Exit';\r\n  };\r\n\r\n  const getImageTypeIcon = (type: 'beforeEntry' | 'afterExit') => {\r\n    return type === 'beforeEntry' ? 'lucide:trending-up' : 'lucide:trending-down';\r\n  };\r\n\r\n  // Symbol search helper functions\r\n  const handleSymbolSearchChange = (value: string) => {\r\n    setSymbolSearch(value);\r\n    setShowSymbolDropdown(value.length > 0);\r\n  };\r\n\r\n  const handleSymbolSelect = (symbol: string) => {\r\n    setSymbolSearch(symbol);\r\n    setShowSymbolDropdown(false);\r\n    // Find first image for this symbol\r\n    const symbolIndex = filteredImages.findIndex(img => img.tradeName === symbol);\r\n    if (symbolIndex >= 0) {\r\n      setCurrentIndex(symbolIndex);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onOpenChange={onOpenChange}\r\n      size=\"full\"\r\n      backdrop=\"blur\"\r\n      classNames={{\r\n        base: \"bg-white/95 dark:bg-gray-900/95\",\r\n        backdrop: \"bg-black/60\",\r\n      }}\r\n      hideCloseButton\r\n    >\r\n      <ModalContent>\r\n        {(onClose) => (\r\n          <>\r\n            {/* Collapsible Header */}\r\n            <AnimatePresence>\r\n              {showHeader && (\r\n                <motion.div\r\n                  initial={{ height: 0, opacity: 0 }}\r\n                  animate={{ height: 'auto', opacity: 1 }}\r\n                  exit={{ height: 0, opacity: 0 }}\r\n                  transition={{ duration: 0.2 }}\r\n                  className=\"overflow-hidden\"\r\n                >\r\n                  <ModalHeader className=\"border-b border-gray-200 dark:border-gray-700 px-6 py-3\">\r\n              {/* Main Header Row */}\r\n              <div className=\"flex justify-between items-center\">\r\n                <div className=\"flex items-center\">\r\n                  {/* Current Symbol Only */}\r\n                  {currentImage && (\r\n                    <span className=\"text-lg font-semibold text-gray-700 dark:text-gray-300\">\r\n                      {currentImage.tradeName}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  {/* Search */}\r\n                  <div className=\"relative\">\r\n                    <Input\r\n                      size=\"sm\"\r\n                      placeholder=\"Search...\"\r\n                      value={symbolSearch}\r\n                      onChange={(e) => handleSymbolSearchChange(e.target.value)}\r\n                      onFocus={() => setShowSymbolDropdown(symbolSearch.length > 0)}\r\n                      onBlur={() => setTimeout(() => setShowSymbolDropdown(false), 200)}\r\n                      className=\"w-28\"\r\n                      classNames={{\r\n                        input: \"text-xs\",\r\n                        inputWrapper: \"h-7 min-h-7\"\r\n                      }}\r\n                      startContent={<Icon icon=\"lucide:search\" className=\"w-3 h-3 text-gray-400\" />}\r\n                      aria-label=\"Search chart symbols\"\r\n                    />\r\n\r\n                    {/* Symbol Dropdown */}\r\n                    {showSymbolDropdown && filteredSymbols.length > 0 && (\r\n                      <div className=\"absolute top-full left-0 right-0 mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 max-h-32 overflow-y-auto\">\r\n                        {filteredSymbols.map((symbol) => (\r\n                          <div\r\n                            key={symbol}\r\n                            className=\"px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer text-sm\"\r\n                            onMouseDown={() => handleSymbolSelect(symbol)}\r\n                            role=\"button\"\r\n                            tabIndex={0}\r\n                            aria-label={`Select symbol ${symbol}`}\r\n                            onKeyDown={(e) => {\r\n                              if (e.key === 'Enter' || e.key === ' ') {\r\n                                e.preventDefault();\r\n                                handleSymbolSelect(symbol);\r\n                              }\r\n                            }}\r\n                          >\r\n                            {symbol}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {/* Filter */}\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    onPress={() => setShowFilters(!showFilters)}\r\n                    className=\"w-7 h-7 min-w-7 relative\"\r\n                  >\r\n                    <Icon icon=\"lucide:filter\" className=\"w-3 h-3\" />\r\n                    {hasActiveFilters && (\r\n                      <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-3 h-3 flex items-center justify-center text-[10px]\">\r\n                        {[filter !== 'all', outcomeFilter !== 'all', setupFilter !== 'all', dateRange.start, dateRange.end, symbolSearch].filter(Boolean).length}\r\n                      </span>\r\n                    )}\r\n                  </Button>\r\n\r\n                  {/* Counter */}\r\n                  <div className=\"text-sm font-medium text-gray-600 dark:text-gray-400 px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded text-center min-w-[2.5rem]\">\r\n                    {filteredImages.length > 0 ? `${currentIndex + 1}/${filteredImages.length}` : '0/0'}\r\n                  </div>\r\n\r\n                  {/* Navigation */}\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={navigatePrevious}\r\n                    isDisabled={currentIndex <= 0}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon=\"lucide:chevron-left\" className=\"w-3 h-3\" />\r\n                  </Button>\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={navigateNext}\r\n                    isDisabled={currentIndex >= filteredImages.length - 1}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon=\"lucide:chevron-right\" className=\"w-3 h-3\" />\r\n                  </Button>\r\n\r\n                  {/* Zoom */}\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={handleZoomOut}\r\n                    isDisabled={zoom <= 0.5}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon=\"lucide:zoom-out\" className=\"w-4 h-4\" />\r\n                  </Button>\r\n                  <div className=\"text-sm font-mono px-1 min-w-[2rem] text-center text-gray-600 dark:text-gray-400\">\r\n                    {Math.round(zoom * 100)}%\r\n                  </div>\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={handleZoomIn}\r\n                    isDisabled={zoom >= 5}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon=\"lucide:zoom-in\" className=\"w-4 h-4\" />\r\n                  </Button>\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={toggleFullscreen}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon={isFullscreen ? \"lucide:minimize\" : \"lucide:maximize\"} className=\"w-4 h-4\" />\r\n                  </Button>\r\n\r\n                  {/* Actions */}\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={downloadCurrentImage}\r\n                    isDisabled={!currentImage?.dataUrl}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon=\"lucide:download\" className=\"w-4 h-4\" />\r\n                  </Button>\r\n\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={() => setShowHeader(false)}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon=\"lucide:chevron-up\" className=\"w-3 h-3\" />\r\n                  </Button>\r\n\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={onClose}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon=\"lucide:x\" className=\"w-3 h-3\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Collapsible Filter Panel */}\r\n              <AnimatePresence>\r\n                {showFilters && (\r\n                  <motion.div\r\n                    initial={{ height: 0, opacity: 0 }}\r\n                    animate={{ height: 'auto', opacity: 1 }}\r\n                    exit={{ height: 0, opacity: 0 }}\r\n                    transition={{ duration: 0.2 }}\r\n                    className=\"border-t border-gray-200 dark:border-gray-700 pt-2 mt-2 overflow-hidden\"\r\n                  >\r\n                    <div className=\"flex justify-end flex-wrap gap-2 mr-8\">\r\n                      {/* Chart Type */}\r\n                      <Select\r\n                        size=\"sm\"\r\n                        value={filter}\r\n                        onChange={(e) => setFilter(e.target.value as FilterType)}\r\n                        className=\"w-24\"\r\n                        classNames={{\r\n                          trigger: \"h-7 min-h-7\",\r\n                          value: \"text-xs\"\r\n                        }}\r\n                        placeholder=\"Type\"\r\n                        aria-label=\"Filter by chart type\"\r\n                      >\r\n                        <SelectItem key=\"all\">All</SelectItem>\r\n                        <SelectItem key=\"beforeEntry\">Entry</SelectItem>\r\n                        <SelectItem key=\"afterExit\">Exit</SelectItem>\r\n                      </Select>\r\n\r\n                      {/* Outcome */}\r\n                      <Select\r\n                        size=\"sm\"\r\n                        value={outcomeFilter}\r\n                        onChange={(e) => setOutcomeFilter(e.target.value as OutcomeFilter)}\r\n                        className=\"w-28\"\r\n                        classNames={{\r\n                          trigger: \"h-7 min-h-7\",\r\n                          value: \"text-xs\"\r\n                        }}\r\n                        placeholder=\"Outcome\"\r\n                        aria-label=\"Filter by trade outcome\"\r\n                      >\r\n                        <SelectItem key=\"all\">All</SelectItem>\r\n                        <SelectItem key=\"win\">Win</SelectItem>\r\n                        <SelectItem key=\"loss\">Loss</SelectItem>\r\n                        <SelectItem key=\"breakeven\">Breakeven</SelectItem>\r\n                      </Select>\r\n\r\n                      {/* Setup */}\r\n                      <Select\r\n                        size=\"sm\"\r\n                        value={setupFilter}\r\n                        onChange={(e) => setSetupFilter(e.target.value)}\r\n                        className=\"w-28\"\r\n                        classNames={{\r\n                          trigger: \"h-7 min-h-7\",\r\n                          value: \"text-xs\"\r\n                        }}\r\n                        placeholder=\"Setup\"\r\n                        aria-label=\"Filter by trade setup\"\r\n                      >\r\n                        <SelectItem key=\"all\">All</SelectItem>\r\n                        {(uniqueSetups as any).map((setup: string) =>\r\n                          <SelectItem key={setup}>{setup}</SelectItem>\r\n                        )}\r\n                      </Select>\r\n\r\n                      {/* From Date */}\r\n                      <Input\r\n                        type=\"date\"\r\n                        size=\"sm\"\r\n                        value={dateRange.start || ''}\r\n                        onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value || null }))}\r\n                        className=\"w-32\"\r\n                        classNames={{\r\n                          input: \"text-xs\",\r\n                          inputWrapper: \"h-7 min-h-7\"\r\n                        }}\r\n                        placeholder=\"From\"\r\n                        aria-label=\"Filter from date\"\r\n                      />\r\n\r\n                      {/* To Date */}\r\n                      <Input\r\n                        type=\"date\"\r\n                        size=\"sm\"\r\n                        value={dateRange.end || ''}\r\n                        onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value || null }))}\r\n                        className=\"w-32\"\r\n                        classNames={{\r\n                          input: \"text-xs\",\r\n                          inputWrapper: \"h-7 min-h-7\"\r\n                        }}\r\n                        placeholder=\"To\"\r\n                        aria-label=\"Filter to date\"\r\n                      />\r\n\r\n                      {/* Clear */}\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"light\"\r\n                        color=\"danger\"\r\n                        onPress={() => {\r\n                          setFilter('all');\r\n                          setOutcomeFilter('all');\r\n                          setSetupFilter('all');\r\n                          setDateRange({ start: null, end: null });\r\n                          setSymbolSearch('');\r\n                        }}\r\n                        className=\"h-7 text-xs\"\r\n                        startContent={<Icon icon=\"lucide:x\" className=\"w-3 h-3\" />}\r\n                        isDisabled={!hasActiveFilters}\r\n                      >\r\n                        Clear\r\n                      </Button>\r\n                    </div>\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n            </ModalHeader>\r\n                </motion.div>\r\n              )}\r\n            </AnimatePresence>\r\n\r\n            {/* Collapsed Header Toggle */}\r\n            {!showHeader && (\r\n              <div className=\"absolute top-2 right-2 z-50\">\r\n                <Button\r\n                  isIconOnly\r\n                  variant=\"flat\"\r\n                  size=\"sm\"\r\n                  onPress={() => setShowHeader(true)}\r\n                  className=\"w-8 h-8 bg-black/20 hover:bg-black/40 text-white backdrop-blur-sm\"\r\n                  aria-label=\"Show header\"\r\n                >\r\n                  <Icon icon=\"lucide:chevron-down\" className=\"w-4 h-4\" />\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            <ModalBody className=\"p-0 overflow-hidden\">\r\n              {isLoading ? (\r\n                <div className=\"flex flex-col items-center justify-center h-[80vh]\">\r\n                  <motion.div\r\n                    initial={{ opacity: 0, scale: 0.8 }}\r\n                    animate={{ opacity: 1, scale: 1 }}\r\n                    transition={{ duration: 0.4 }}\r\n                    className=\"mb-6\"\r\n                  >\r\n                    <Icon icon=\"lucide:loader-2\" className=\"w-12 h-12 animate-spin text-foreground mb-4\" />\r\n                  </motion.div>\r\n                  <motion.div\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    transition={{ duration: 0.4, delay: 0.1 }}\r\n                    className=\"text-center\"\r\n                  >\r\n                    <p className=\"text-lg font-medium text-foreground mb-4 font-sans\">Loading chart images...</p>\r\n                    <Progress value={loadingProgress} className=\"w-64 mb-2\" color=\"primary\" />\r\n                    <p className=\"text-sm text-foreground/70 font-sans\">{Math.round(loadingProgress)}%</p>\r\n                  </motion.div>\r\n                </div>\r\n              ) : error ? (\r\n                <div className=\"flex flex-col items-center justify-center h-[80vh]\">\r\n                  <Icon icon=\"lucide:image-off\" className=\"w-12 h-12 text-danger-500 mb-4\" />\r\n                  <p className=\"text-lg text-danger-600\">{error}</p>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    variant=\"light\"\r\n                    onPress={loadAllImages}\r\n                    className=\"mt-4\"\r\n                    startContent={<Icon icon=\"lucide:refresh-cw\" className=\"w-4 h-4\" />}\r\n                  >\r\n                    Retry\r\n                  </Button>\r\n                </div>\r\n              ) : filteredImages.length === 0 ? (\r\n                <div className=\"flex flex-col items-center justify-center h-[80vh]\">\r\n                  <Icon icon=\"lucide:image-off\" className=\"w-12 h-12 text-gray-400 mb-4\" />\r\n                  <p className=\"text-lg text-gray-600 dark:text-gray-400\">No chart images found</p>\r\n                  <p className=\"text-sm text-gray-500\">Upload some chart images to get started</p>\r\n                </div>\r\n              ) : currentImage ? (\r\n                <div className=\"relative w-full h-[80vh] bg-gray-50 dark:bg-gray-900 overflow-hidden\">\r\n                  <AnimatePresence mode=\"wait\">\r\n                    <motion.div\r\n                      key={currentImage.id}\r\n                      initial={{ opacity: 0, x: 20 }}\r\n                      animate={{ opacity: 1, x: 0 }}\r\n                      exit={{ opacity: 0, x: -20 }}\r\n                      transition={{ duration: 0.2 }}\r\n                      className=\"absolute inset-0 flex items-center justify-center\"\r\n                    >\r\n                      <img\r\n                        src={currentImage.dataUrl}\r\n                        alt={`${currentImage.tradeName} - ${getImageTypeLabel(currentImage.imageType)}`}\r\n                        className={`max-w-none transition-transform ${\r\n                          zoom > 1 ? 'cursor-grab' : 'cursor-zoom-in'\r\n                        } ${isDragging ? 'cursor-grabbing' : ''}`}\r\n                        style={{\r\n                          transform: `scale(${zoom}) translate(${position.x / zoom}px, ${position.y / zoom}px)`,\r\n                          maxHeight: zoom === 1 ? '100%' : 'none',\r\n                          maxWidth: zoom === 1 ? '100%' : 'none',\r\n                        }}\r\n                        onMouseDown={handleMouseDown}\r\n                        onMouseMove={handleMouseMove}\r\n                        onMouseUp={handleMouseUp}\r\n                        onMouseLeave={handleMouseUp}\r\n                        onClick={zoom === 1 ? handleZoomIn : undefined}\r\n                        draggable={false}\r\n                      />\r\n                    </motion.div>\r\n                  </AnimatePresence>\r\n\r\n                  {/* Navigation Overlay */}\r\n                  <div className=\"absolute inset-y-0 left-0 flex items-center\">\r\n                    <Button\r\n                      isIconOnly\r\n                      variant=\"flat\"\r\n                      size=\"lg\"\r\n                      onPress={navigatePrevious}\r\n                      isDisabled={currentIndex <= 0}\r\n                      className=\"ml-4 bg-black/20 hover:bg-black/40 text-white backdrop-blur-sm\"\r\n                      aria-label=\"Previous image\"\r\n                    >\r\n                      <Icon icon=\"lucide:chevron-left\" className=\"w-6 h-6\" />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                    <Button\r\n                      isIconOnly\r\n                      variant=\"flat\"\r\n                      size=\"lg\"\r\n                      onPress={navigateNext}\r\n                      isDisabled={currentIndex >= filteredImages.length - 1}\r\n                      className=\"mr-4 bg-black/20 hover:bg-black/40 text-white backdrop-blur-sm\"\r\n                      aria-label=\"Next image\"\r\n                    >\r\n                      <Icon icon=\"lucide:chevron-right\" className=\"w-6 h-6\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n            </ModalBody>\r\n\r\n            <ModalFooter className=\"border-t border-gray-200 dark:border-gray-700 px-4 py-2\">\r\n              <div className=\"flex justify-between items-center w-full\">\r\n                <div className=\"text-xs text-gray-500 flex gap-3\">\r\n                  <span>← → navigate</span>\r\n                  <span>H header</span>\r\n                  <span>F filters</span>\r\n                  <span>F11 fullscreen</span>\r\n                  {zoom > 1 && <span>• Drag to pan</span>}\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  {currentImage && currentImage.tradeDate && (\r\n                    <span className=\"text-xs text-gray-500\">\r\n                      {new Date(currentImage.tradeDate).toLocaleDateString()}\r\n                    </span>\r\n                  )}\r\n                  <Button\r\n                    isIconOnly\r\n                    variant=\"light\"\r\n                    size=\"sm\"\r\n                    onPress={onClose}\r\n                    className=\"w-7 h-7 min-w-7\"\r\n                  >\r\n                    <Icon icon=\"lucide:x\" className=\"w-4 h-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </ModalFooter>\r\n          </>\r\n        )}\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n","import { Trade } from \"../types/trade\";\r\n\r\nexport interface TradeIssue {\r\n  type: 'error' | 'warning';\r\n  message: string;\r\n}\r\n\r\nexport function validateTrade(trade: Trade): TradeIssue[] {\r\n  const issues: TradeIssue[] = [];\r\n\r\n  // Calculate total bought quantity\r\n  const totalBoughtQty = (trade.initialQty || 0) +\r\n    (trade.pyramid1Qty || 0) +\r\n    (trade.pyramid2Qty || 0);\r\n\r\n  // Calculate total exit quantity\r\n  const totalExitQty = (trade.exit1Qty || 0) +\r\n    (trade.exit2Qty || 0) +\r\n    (trade.exit3Qty || 0);\r\n\r\n  // 1. Exit qty > Bought qty (ERROR) - but only if there are actual exits\r\n  if (totalExitQty > 0 && totalExitQty > totalBoughtQty) {\r\n    issues.push({\r\n      type: 'error',\r\n      message: `Exit quantity (${totalExitQty}) cannot be greater than bought quantity (${totalBoughtQty}). Please check your pyramid and exit quantities.`\r\n    });\r\n  }\r\n\r\n  // 2. Pyramid quantities without prices (WARNING)\r\n  if ((trade.pyramid1Qty || 0) > 0 && !((trade.pyramid1Price || 0) > 0)) {\r\n    issues.push({\r\n      type: 'warning',\r\n      message: 'Pyramid 1 has quantity but no price specified'\r\n    });\r\n  }\r\n\r\n  if ((trade.pyramid2Qty || 0) > 0 && !((trade.pyramid2Price || 0) > 0)) {\r\n    issues.push({\r\n      type: 'warning',\r\n      message: 'Pyramid 2 has quantity but no price specified'\r\n    });\r\n  }\r\n\r\n  // 3. Exit quantities without prices (WARNING)\r\n  if ((trade.exit1Qty || 0) > 0 && !((trade.exit1Price || 0) > 0)) {\r\n    issues.push({\r\n      type: 'warning',\r\n      message: 'Exit 1 has quantity but no price specified'\r\n    });\r\n  }\r\n\r\n  if ((trade.exit2Qty || 0) > 0 && !((trade.exit2Price || 0) > 0)) {\r\n    issues.push({\r\n      type: 'warning',\r\n      message: 'Exit 2 has quantity but no price specified'\r\n    });\r\n  }\r\n\r\n  if ((trade.exit3Qty || 0) > 0 && !((trade.exit3Price || 0) > 0)) {\r\n    issues.push({\r\n      type: 'warning',\r\n      message: 'Exit 3 has quantity but no price specified'\r\n    });\r\n  }\r\n\r\n  // 2. Open qty but no exit details (WARNING)\r\n  const hasOpenQty = trade.openQty > 0;\r\n  const noExitDetails = !trade.exit1Qty && !trade.exit2Qty && !trade.exit3Qty;\r\n  if (hasOpenQty && noExitDetails) {\r\n    issues.push({\r\n      type: 'warning',\r\n      message: `Trade has open quantity (${trade.openQty}) but no exit details entered`\r\n    });\r\n  }\r\n\r\n  // 3. All exited but status not updated (WARNING)\r\n  const allExited = trade.openQty === 0 && totalExitQty > 0;\r\n  const statusNotUpdated = trade.positionStatus === \"Open\";\r\n  if (allExited && statusNotUpdated) {\r\n    issues.push({\r\n      type: 'warning',\r\n      message: 'All quantity exited but status still marked as \"Open\"'\r\n    });\r\n  }\r\n\r\n  // 4. Has exit details but wrong status (WARNING)\r\n  const hasExits = totalExitQty > 0;\r\n  const wrongPartialStatus = hasExits && trade.openQty > 0 && trade.positionStatus === \"Open\";\r\n  if (wrongPartialStatus) {\r\n    issues.push({\r\n      type: 'warning',\r\n      message: 'Trade has partial exits but status not marked as \"Partial\"'\r\n    });\r\n  }\r\n\r\n  return issues;\r\n}","import React from \"react\";\nimport {\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Input,\n  Checkbox,\n  Select,\n  SelectItem,\n  Textarea,\n  Divider,\n  Tabs,\n  Tab,\n  Chip\n} from \"@heroui/react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Icon } from \"@iconify/react\";\nimport { Trade, ChartImage, TradeChartAttachments } from \"../types/trade\";\nimport { generateId } from \"../utils/helpers\";\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\nimport { usePriceTicks } from \"../hooks/usePriceTicks\";\nimport { fetchPriceTicks, fetchPriceTicksWithFallback, fetchPriceTicksWithHistoricalFallback, fetchPriceTicksSmart } from '../utils/priceTickApi';\nimport { ChartImageUpload } from \"./ChartImageUpload\";\nimport { ChartImageViewer } from \"./ChartImageViewer\";\nimport { UniversalChartViewer } from \"./UniversalChartViewer\";\nimport {\n  calcAvgEntry,\n  calcPositionSize,\n  calcAllocation,\n  calcSLPercent,\n  calcOpenQty,\n  calcExitedQty,\n  calcAvgExitPrice,\n  calcStockMove,\n  calcRewardRisk,\n  calcHoldingDays,\n  calcRealisedAmount,\n  calcPLRs,\n  calcPFImpact,\n  calcCummPf,\n  calcUnrealizedPL,\n  calcRealizedPL_FIFO\n} from \"../utils/tradeCalculations\";\nimport { useTruePortfolioWithTrades } from \"../hooks/use-true-portfolio-with-trades\";\nimport { useTrades } from \"../hooks/use-trades\";\nimport { validateTrade, TradeIssue } from \"../utils/tradeValidations\";\nimport * as Papa from \"papaparse\"; // Centralized import\n\n  // Debounce helper\n  const useDebounce = <T,>(value: T, delay: number): T => {\n    const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n    React.useEffect(() => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      return () => {\n        clearTimeout(handler);\n      };\n    }, [value, delay]);\n\n    return debouncedValue;\n  };\n\n  interface TradeModalProps {\n    isOpen: boolean;\n    onOpenChange: (isOpen: boolean) => void;\n    trade?: Trade;\n    onSave: (trade: Trade) => void;\n    mode: \"add\" | \"edit\";\n    symbol?: string;\n    isUploadOnlyMode?: boolean;\n    isActionsEditMode?: boolean; // New prop for actions tab edit mode\n    onChartRefresh?: () => void; // Callback to refresh chart viewer\n  }\n\n  type TradeModalFormData = Trade & { slPercent: number };\n\n  const defaultTrade: TradeModalFormData = {\n    id: \"\",\n    tradeNo: \"\",\n    date: new Date().toISOString().split(\"T\")[0],\n    name: \"\",\n    entry: 0,\n    avgEntry: 0,\n    sl: 0,\n    tsl: 0,\n    buySell: \"Buy\",\n    cmp: 0,\n    setup: \"\",\n    baseDuration: \"\",\n    initialQty: 0,\n    pyramid1Price: 0,\n    pyramid1Qty: 0,\n    pyramid1Date: \"\",\n    pyramid2Price: 0,\n    pyramid2Qty: 0,\n    pyramid2Date: \"\",\n    positionSize: 0,\n    allocation: 0,\n    exit1Price: 0,\n    exit1Qty: 0,\n    exit1Date: \"\",\n    exit2Price: 0,\n    exit2Qty: 0,\n    exit2Date: \"\",\n    exit3Price: 0,\n    exit3Qty: 0,\n    exit3Date: \"\",\n    openQty: 0,\n    exitedQty: 0,\n    avgExitPrice: 0,\n    stockMove: 0,\n    rewardRisk: 0,\n    holdingDays: 0,\n    positionStatus: \"Open\",\n    realisedAmount: 0,\n    plRs: 0,\n    pfImpact: 0,\n    cummPf: 0,\n    planFollowed: true,\n    exitTrigger: \"\",\n    proficiencyGrowthAreas: \"\",\n    slPercent: 0,\n    openHeat: 0\n  };\n\n  interface TradeEntry {\n    price: number;\n    qty: number;\n  }\n\n  const recalculateTrade = (\n    trade: Partial<TradeModalFormData>, \n    defaultPortfolioSize: number,\n    getPortfolioSize?: (month: string, year: number) => number\n  ): TradeModalFormData => {\n    // Safely parse and filter entries\n    const entries: TradeEntry[] = [\n      { price: Number(trade.entry || 0), qty: Number(trade.initialQty || 0) },\n      { price: Number(trade.pyramid1Price || 0), qty: Number(trade.pyramid1Qty || 0) },\n      { price: Number(trade.pyramid2Price || 0), qty: Number(trade.pyramid2Qty || 0) }\n    ].filter(e => e.qty > 0 && e.price > 0);\n\n    const avgEntry = entries.length > 0 ? calcAvgEntry(entries) : Number(trade.entry) || 0;\n    const totalQty = entries.reduce((sum, e) => sum + e.qty, 0);\n    const positionSize = totalQty > 0 ? calcPositionSize(avgEntry, totalQty) : 0;\n    // Get the portfolio size for the trade's month/year\n    let tradePortfolioSize = defaultPortfolioSize;\n    if (trade.date && getPortfolioSize) {\n      const tradeDate = new Date(trade.date);\n      const month = tradeDate.toLocaleString('default', { month: 'short' });\n      const year = tradeDate.getFullYear();\n      const monthlyPortfolioSize = getPortfolioSize(month, year);\n      if (monthlyPortfolioSize !== undefined) {\n        tradePortfolioSize = monthlyPortfolioSize;\n      }\n    }\n    \n    const allocation = positionSize > 0 && tradePortfolioSize > 0 ? \n      calcAllocation(positionSize, tradePortfolioSize) : 0;\n    \n    // Calculate exits\n    const exit1Qty = Number(trade.exit1Qty || 0);\n    const exit2Qty = Number(trade.exit2Qty || 0);\n    const exit3Qty = Number(trade.exit3Qty || 0);\n    \n    const exitedQty = calcExitedQty(exit1Qty, exit2Qty, exit3Qty);\n    const openQty = Math.max(0, totalQty - exitedQty);\n    \n    const exits: TradeEntry[] = [\n      { price: Number(trade.exit1Price || 0), qty: exit1Qty },\n      { price: Number(trade.exit2Price || 0), qty: exit2Qty },\n      { price: Number(trade.exit3Price || 0), qty: exit3Qty }\n    ].filter(e => e.qty > 0 && e.price > 0);\n    \n    const avgExitPrice = exits.length > 0 ? calcAvgExitPrice(exits) : 0;\n    const stockMove = avgEntry > 0 ? calcStockMove(avgEntry, avgExitPrice, Number(trade.cmp || 0), openQty, exitedQty, trade.positionStatus || 'Open', trade.buySell || 'Buy') : 0;\n    \n    // Calculate SL percentage\n    const entryPrice = Number(trade.entry) || 0;\n    const slPrice = Number(trade.sl) || 0;\n    const slPercent = entryPrice > 0 && slPrice > 0 ? calcSLPercent(slPrice, entryPrice) : 0;\n    \n    // Calculate reward/risk\n    const cmp = Number(trade.cmp) || 0;\n    const rewardRisk = entryPrice > 0 && slPrice > 0 ? calcRewardRisk(cmp, entryPrice, slPrice, trade.positionStatus || 'Open', avgExitPrice, openQty, exitedQty, trade.buySell || 'Buy') : 0;\n    \n    // Calculate holding period\n    const entryDate = trade.date || '';\n    const exitDate = trade.exit1Date || '';\n    const holdingDays = entryDate && exitDate ? calcHoldingDays(entryDate, exitDate) : 0;\n    \n    // Calculate P&L\n    const realisedAmount = exitedQty > 0 ? calcRealisedAmount(exitedQty, avgExitPrice) : 0;\n    // Build entry and exit lots for FIFO\n    const entryLots = [\n      { price: Number(trade.entry || 0), qty: Number(trade.initialQty || 0) },\n      { price: Number(trade.pyramid1Price || 0), qty: Number(trade.pyramid1Qty || 0) },\n      { price: Number(trade.pyramid2Price || 0), qty: Number(trade.pyramid2Qty || 0) }\n    ].filter(e => e.qty > 0 && e.price > 0);\n    const exitLots = [\n      { price: Number(trade.exit1Price || 0), qty: exit1Qty },\n      { price: Number(trade.exit2Price || 0), qty: exit2Qty },\n      { price: Number(trade.exit3Price || 0), qty: exit3Qty }\n    ].filter(e => e.qty > 0 && e.price > 0);\n    const plRs = exitedQty > 0 ? calcRealizedPL_FIFO(entryLots, exitLots, trade.buySell as 'Buy' | 'Sell') : 0;\n    // Note: PF Impact calculation in trade modal uses entry date portfolio size\n    // This is acceptable for preview as accounting method-specific recalculation\n    // will happen when the trade is saved to the main trade processing pipeline\n    const pfImpact = tradePortfolioSize > 0 ? calcPFImpact(plRs, tradePortfolioSize) : 0;\n    \n    return {\n      ...(trade as TradeModalFormData),\n      avgEntry,\n      positionSize,\n      allocation,\n      exitedQty,\n      openQty,\n      avgExitPrice,\n      stockMove,\n      slPercent,\n      rewardRisk,\n      holdingDays,\n      realisedAmount,\n      plRs,\n      pfImpact\n    };\n  };\n\n  export const TradeModal: React.FC<TradeModalProps> = React.memo(({\n    isOpen,\n    onOpenChange,\n    trade,\n    onSave,\n    mode,\n    symbol: initialSymbol = \"\",\n    isUploadOnlyMode = false,\n    isActionsEditMode = false,\n    onChartRefresh,\n  }) => {\n\n\n    // Track if CMP was manually set by user\n    const [cmpManuallySet, setCmpManuallySet] = React.useState(false);\n\n    const { trades } = useTrades();\n    const { portfolioSize, getPortfolioSize } = useTruePortfolioWithTrades(trades);\n    // Reset form when symbol changes - moved after handleChange is defined\n\n  // Unique key for sessionStorage (intentionally using sessionStorage for temporary form data)\n  // This is separate from the main IndexedDB migration as it's for temporary auto-save functionality\n  const sessionKey = React.useMemo(() => {\n    if (mode === 'edit' && trade?.id) return `tradeModal_edit_${trade.id}`;\n    if (mode === 'add') return 'tradeModal_add';\n    return 'tradeModal';\n  }, [mode, trade]);\n\n  // Compute next trade number for add mode\n  const nextTradeNo = React.useMemo(() => {\n    if (!trades || trades.length === 0) return \"1\";\n    const nums = trades.map(t => parseInt(t.tradeNo, 10)).filter(n => !isNaN(n));\n    return nums.length > 0 ? String(Math.max(...nums) + 1) : \"1\";\n  }, [trades]);\n\n  // Enhanced data loading with recovery mechanism\n  const [formData, setFormData] = React.useState<TradeModalFormData>(() => {\n    if (typeof window !== 'undefined') {\n      // First try sessionStorage\n      const saved = sessionStorage.getItem(sessionKey + '_formData');\n      if (saved) {\n        try {\n          const parsedData = JSON.parse(saved);\n\n          return parsedData;\n        } catch (error) {\n\n        }\n      }\n\n      // If sessionStorage fails, try to recover from localStorage backup\n      try {\n        const allKeys = Object.keys(localStorage);\n        const backupKeys = allKeys.filter(key => key.startsWith(`tradeBackup_${sessionKey}_`))\n          .sort((a, b) => {\n            const timestampA = parseInt(a.split('_').pop() || '0');\n            const timestampB = parseInt(b.split('_').pop() || '0');\n            return timestampB - timestampA; // Most recent first\n          });\n\n        if (backupKeys.length > 0) {\n          const latestBackup = localStorage.getItem(backupKeys[0]);\n          if (latestBackup) {\n            const backup = JSON.parse(latestBackup);\n\n            return backup.formData;\n          }\n        }\n      } catch (error) {\n\n      }\n    }\n\n    // Fallback to default initialization\n    if (trade) {\n\n      return { ...defaultTrade, ...trade, slPercent: (trade as any).slPercent || 0 };\n    } else if (mode === 'add') {\n\n      return { ...defaultTrade, tradeNo: nextTradeNo };\n    } else {\n\n      return defaultTrade;\n    }\n  });\n\n  // Use formData.name for price ticks to get real-time updates\n  const { latestPrice } = usePriceTicks(formData?.name || initialSymbol);\n\n  const [isDirty, setIsDirty] = React.useState<boolean>(false);\n  const [isAutoSaving, setIsAutoSaving] = React.useState<boolean>(false);\n  const [lastSaved, setLastSaved] = React.useState<Date | null>(null);\n  const [activeTab, setActiveTab] = React.useState<string>(() => {\n    // If in upload-only mode, always start with charts tab\n    if (isUploadOnlyMode) {\n      return 'charts';\n    }\n\n    // If in actions edit mode, always start with basic tab (charts disabled)\n    if (isActionsEditMode) {\n      return 'basic';\n    }\n\n    if (typeof window !== 'undefined') {\n      const saved = sessionStorage.getItem(sessionKey + '_activeTab');\n      if (saved) return saved;\n    }\n    return 'basic';\n  });\n\n  // Chart viewer and refresh state - declare early to avoid initialization issues\n  const [chartViewerImage, setChartViewerImage] = React.useState<ChartImage | null>(null);\n  const [isChartViewerOpen, setIsChartViewerOpen] = React.useState(false);\n  const [isUniversalViewerOpen, setIsUniversalViewerOpen] = React.useState(false);\n  const [chartRefreshTrigger, setChartRefreshTrigger] = React.useState(0);\n\n  // Reset tabs when entering special modes\n  React.useEffect(() => {\n    if (isUploadOnlyMode) {\n      setActiveTab('charts');\n      // Trigger chart refresh to ensure latest data is shown\n      setChartRefreshTrigger(prev => prev + 1);\n\n    } else if (isActionsEditMode) {\n      setActiveTab('basic');\n\n    }\n  }, [isUploadOnlyMode, isActionsEditMode]);\n\n  // Chart attachment state\n  const [chartAttachments, setChartAttachments] = React.useState<TradeChartAttachments>(() => {\n    const existing = trade?.chartAttachments || {};\n    // Ensure metadata dates are proper Date objects\n    if (existing.metadata) {\n      return {\n        ...existing,\n        metadata: {\n          ...existing.metadata,\n          createdAt: existing.metadata.createdAt ? new Date(existing.metadata.createdAt) : new Date(),\n          updatedAt: existing.metadata.updatedAt ? new Date(existing.metadata.updatedAt) : new Date(),\n        }\n      };\n    }\n    return existing;\n  });\n\n  // Track upload methods for chart consistency\n  const [chartUploadMethods, setChartUploadMethods] = React.useState<{\n    beforeEntry?: 'file' | 'url';\n    afterExit?: 'file' | 'url';\n  }>({});\n\n  // Load chart image blobs when modal opens\n  React.useEffect(() => {\n    const loadChartImageBlobs = async () => {\n      if (!trade?.id) return;\n\n      try {\n        // PURE SUPABASE: Load from Supabase instead of IndexedDB\n        const { SupabaseService } = await import('../services/supabaseService');\n        const { ChartImageService } = await import('../services/chartImageService');\n\n        // NEW: Check if trade ID is a UUID format\n        const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(trade.id);\n\n        if (!isUUID) {\n          console.log(`📦 [CHART_LOAD] Trade ID is not UUID format, skipping Supabase chart loading: ${trade.id}`);\n          // For non-UUID trades (new trades), just use the trade's existing chart attachments\n          if (trade.chartAttachments) {\n            setChartAttachments(trade.chartAttachments);\n          }\n          return;\n        }\n\n        // Always reload from Supabase to get the latest state\n        // This is especially important in upload-only mode to reflect any deletions\n        const [supabaseBlobs, currentTrade] = await Promise.all([\n          SupabaseService.getTradeChartImageBlobs(trade.id),\n          SupabaseService.getTrade(trade.id)\n        ]);\n\n\n\n        // Start with the current trade's chart attachments (if any)\n        let attachments: TradeChartAttachments = {};\n\n        // If the trade has inline chart attachments, include them\n        if (currentTrade?.chartAttachments) {\n          attachments = { ...currentTrade.chartAttachments };\n        }\n\n        // Process Supabase blob storage images and add/update them\n        if (supabaseBlobs.length > 0) {\n          for (const supabaseBlob of supabaseBlobs) {\n\n\n            // Create chart image object with blob reference\n            const chartImage: ChartImage = {\n              id: supabaseBlob.id,\n              filename: supabaseBlob.filename,\n              size: supabaseBlob.size_bytes,\n              mimeType: supabaseBlob.mime_type as any,\n              uploadedAt: new Date(supabaseBlob.uploaded_at),\n              compressed: supabaseBlob.compressed || false,\n              originalSize: supabaseBlob.original_size,\n              storage: 'blob',\n              blobId: supabaseBlob.id\n            };\n\n            // Get data URL using the chart image service\n            try {\n              const dataUrl = await ChartImageService.getChartImageDataUrl(chartImage);\n              if (dataUrl) {\n                chartImage.dataUrl = dataUrl;\n              }\n            } catch (error) {\n              // Silent error handling\n            }\n\n            attachments[supabaseBlob.image_type as 'beforeEntry' | 'afterExit'] = chartImage;\n          }\n        }\n\n        // Calculate metadata if we have any attachments\n        if (attachments.beforeEntry || attachments.afterExit) {\n          const allImages = [attachments.beforeEntry, attachments.afterExit].filter(Boolean) as ChartImage[];\n          const totalSize = allImages.reduce((sum, img) => sum + img.size, 0);\n          const oldestUpload = allImages.reduce((oldest, img) =>\n            img.uploadedAt < oldest ? img.uploadedAt : oldest,\n            allImages[0]?.uploadedAt || new Date()\n          );\n          const newestUpload = allImages.reduce((newest, img) =>\n            img.uploadedAt > newest ? img.uploadedAt : newest,\n            allImages[0]?.uploadedAt || new Date()\n          );\n\n          attachments.metadata = {\n            createdAt: oldestUpload,\n            updatedAt: newestUpload,\n            totalSize\n          };\n        }\n\n        setChartAttachments(attachments);\n\n      } catch (error) {\n        console.error('Failed to load chart image blobs:', error);\n      }\n    };\n\n    if (isOpen && trade?.id) {\n      loadChartImageBlobs();\n    }\n  }, [isOpen, trade?.id, isUploadOnlyMode]); // Add isUploadOnlyMode to dependencies to refresh when entering upload mode\n\n  // Enhanced auto-save with backup mechanism and visual feedback\n  React.useEffect(() => {\n    const saveData = async () => {\n      setIsAutoSaving(true);\n      try {\n        // Save to sessionStorage for temporary persistence\n        // EXCLUDE chart attachments to prevent quota exceeded errors\n        const sessionFormData = { ...formData };\n        if (sessionFormData.chartAttachments) {\n          // Remove chart attachments from session storage to save space\n          delete sessionFormData.chartAttachments;\n        }\n        sessionStorage.setItem(sessionKey + '_formData', JSON.stringify(sessionFormData));\n\n        // Also save to localStorage as backup with timestamp\n        // EXCLUDE chart attachments to prevent quota exceeded errors\n        const backupFormData = { ...formData };\n        if (backupFormData.chartAttachments) {\n          // Remove chart attachments from backup to save space\n          delete backupFormData.chartAttachments;\n        }\n\n        const backupKey = `tradeBackup_${sessionKey}_${Date.now()}`;\n        localStorage.setItem(backupKey, JSON.stringify({\n          formData: backupFormData,\n          timestamp: Date.now(),\n          sessionKey\n        }));\n\n        // Clean old backups (keep only last 5)\n        const allKeys = Object.keys(localStorage);\n        const backupKeys = allKeys.filter(key => key.startsWith(`tradeBackup_${sessionKey}_`))\n          .sort((a, b) => {\n            const timestampA = parseInt(a.split('_').pop() || '0');\n            const timestampB = parseInt(b.split('_').pop() || '0');\n            return timestampB - timestampA; // Sort descending\n          });\n\n        // Remove old backups, keep only 5 most recent\n        backupKeys.slice(5).forEach(key => localStorage.removeItem(key));\n\n        setLastSaved(new Date());\n        console.log('💾 Auto-saved form data and created backup');\n      } catch (error) {\n        console.error('❌ Error auto-saving form data:', error);\n      } finally {\n        setIsAutoSaving(false);\n      }\n    };\n\n    // Debounce auto-save to prevent excessive saves\n    const timer = setTimeout(saveData, 1000);\n    return () => clearTimeout(timer);\n  }, [formData, sessionKey]);\n\n  React.useEffect(() => {\n    sessionStorage.setItem(sessionKey + '_activeTab', activeTab);\n  }, [activeTab, sessionKey]);\n\n  // Update CMP when latest price changes (only if not manually set)\n  React.useEffect(() => {\n    if (latestPrice?.close && latestPrice.close > 0 && !cmpManuallySet && formData.cmp === 0) {\n      console.log(\"[TradeModal] Updating CMP with latest price:\", latestPrice.close);\n      setFormData(prev => ({\n        ...prev,\n        cmp: latestPrice.close,\n        _cmpAutoFetched: true\n      }));\n    }\n  }, [latestPrice, cmpManuallySet, formData.cmp]);\n\n  // Clear sessionStorage on close - but only after successful save\n  const [shouldClearSession, setShouldClearSession] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!isOpen && shouldClearSession) {\n      sessionStorage.removeItem(sessionKey + '_formData');\n      sessionStorage.removeItem(sessionKey + '_activeTab');\n      setShouldClearSession(false);\n    }\n  }, [isOpen, sessionKey, shouldClearSession]);\n\n  // Define which fields should be calculated and read-only\n  const calculatedFieldNames = React.useMemo(() => [\n    // Calculated fields\n    'riskReward', 'riskPerShare', 'totalRisk', 'positionSize', 'totalQty',\n    'totalInvestment', 'exit1Amount', 'exit2Amount', 'exit3Amount', 'totalExitAmount',\n    'pnl', 'pnlPercent', 'roi', 'avgEntry', 'allocation', 'slPercent', 'exitedQty',\n    'openQty', 'avgExitPrice', 'stockMove', 'rewardRisk', 'holdingDays',\n    'realisedAmount', 'plRs', 'pfImpact', 'cummPf'\n    // 'cmp' REMOVED to allow manual entry when auto-fetch fails\n  ], []);\n  \n  const debouncedFormData = useDebounce(formData, 300);\n\n  // Virtualization setup for form fields\n  const parentRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    if (trade) {\n      setFormData({ ...defaultTrade, ...trade, slPercent: (trade as any).slPercent || 0 });\n    } else if (mode === 'add') {\n      setFormData({ ...defaultTrade, tradeNo: nextTradeNo });\n    } else {\n      setFormData(defaultTrade);\n    }\n  }, [trade, mode, nextTradeNo]);\n\n  // Auto-calculate derived fields when form data changes\n  React.useEffect(() => {\n    // Skip calculation if form is not dirty and in edit mode\n    if (!isDirty && mode === 'edit') return;\n    \n    // Use a timeout to debounce rapid updates\n    const timer = setTimeout(() => {\n      setFormData(prevData => {\n        // Create a copy of the previous data\n        const updatedData = { ...prevData };\n        \n        // Recalculate all fields using the recalculateTrade function\n        const recalculated = recalculateTrade(updatedData, portfolioSize, getPortfolioSize);\n        \n        // Only update if there are actual changes to prevent infinite loops\n        const hasChanges = Object.keys(recalculated).some(key => \n          JSON.stringify(recalculated[key as keyof Trade]) !== JSON.stringify(updatedData[key as keyof Trade])\n        );\n        \n        return hasChanges ? { ...updatedData, ...recalculated } : updatedData;\n      });\n    }, 100); // 100ms debounce\n    \n    return () => clearTimeout(timer);\n  }, [\n    formData.entry,\n    formData.initialQty,\n    formData.pyramid1Price,\n    formData.pyramid1Qty,\n    formData.pyramid2Price,\n    formData.pyramid2Qty,\n    formData.exit1Price,\n    formData.exit1Qty,\n    formData.exit2Price,\n    formData.exit2Qty,\n    formData.exit3Price,\n    formData.exit3Qty,\n    formData.sl,\n    formData.cmp,\n    formData.date,\n    formData.exit1Date,\n    portfolioSize,\n    isDirty,\n    mode\n  ]);\n\n  // Chart attachment handlers\n  const handleChartImageUploaded = React.useCallback(async (imageType: 'beforeEntry' | 'afterExit', chartImage: ChartImage, uploadMethod?: 'file' | 'url') => {\n    const newChartAttachments = {\n      ...chartAttachments,\n      [imageType]: chartImage,\n      metadata: {\n        createdAt: chartAttachments.metadata?.createdAt || new Date(),\n        updatedAt: new Date(),\n        totalSize: (chartAttachments.metadata?.totalSize || 0) + chartImage.size,\n      }\n    };\n\n    // Update local state\n    setChartAttachments(newChartAttachments);\n    setIsDirty(true);\n\n    // Trigger chart refresh for Universal Chart Viewer\n    setChartRefreshTrigger(prev => prev + 1);\n    onChartRefresh?.(); // Also trigger parent refresh\n    console.log(`🔄 Chart uploaded${(chartImage as any).isTemporary ? ' (temporary)' : ''}, triggering Universal Chart Viewer refresh`);\n\n    // Track upload method for consistency\n    if (uploadMethod) {\n      setChartUploadMethods(prev => ({\n        ...prev,\n        [imageType]: uploadMethod\n      }));\n    }\n\n    // NEW: Handle temporary vs permanent chart uploads\n    const isTemporary = (chartImage as any).isTemporary;\n\n    if (isTemporary) {\n      // For temporary uploads, just store in local state\n      // They will be saved to Supabase when the trade is actually saved\n      console.log(`📦 Chart image stored temporarily: ${chartImage.filename}`);\n    } else {\n      // CRITICAL FIX: Immediately update the trade in the database if it's an existing trade\n      // BUT don't auto-save in upload-only mode to prevent modal from closing\n      if (mode === 'edit' && trade?.id && !isUploadOnlyMode) {\n        try {\n          const updatedTrade = {\n            ...trade,\n            chartAttachments: newChartAttachments\n          };\n\n          // Save the updated trade to database immediately\n          onSave(updatedTrade);\n\n        } catch (error) {\n          console.error('❌ Failed to update trade with chart attachment:', error);\n        }\n      }\n    }\n  }, [chartAttachments, mode, trade, onSave, isUploadOnlyMode]);\n\n  const handleChartImageDeleted = React.useCallback(async (imageType: 'beforeEntry' | 'afterExit') => {\n    const deletedImage = chartAttachments[imageType];\n\n    const newAttachments = { ...chartAttachments };\n    delete newAttachments[imageType];\n\n    // Check if we have any remaining chart attachments\n    const hasRemainingAttachments = newAttachments.beforeEntry || newAttachments.afterExit;\n\n\n    const updatedChartAttachments = hasRemainingAttachments ? {\n      ...newAttachments,\n      metadata: {\n        createdAt: chartAttachments.metadata?.createdAt || new Date(),\n        updatedAt: new Date(),\n        totalSize: Math.max(0, (chartAttachments.metadata?.totalSize || 0) - (deletedImage?.size || 0)),\n      }\n    } : undefined; // Set to undefined if no attachments remain\n\n\n\n    // Update local state\n    setChartAttachments(updatedChartAttachments || {});\n    setIsDirty(true);\n\n    // Trigger chart refresh for Universal Chart Viewer\n    setChartRefreshTrigger(prev => prev + 1);\n    onChartRefresh?.(); // Also trigger parent refresh\n    console.log('🔄 Chart deleted, triggering Universal Chart Viewer refresh');\n\n    // CRITICAL FIX: Update the trade in the database immediately when deleting charts\n    // This ensures the chart attachment reference is removed from the trade record\n    // BUT don't auto-save in upload-only mode to prevent modal from closing\n    if (trade?.id && !isUploadOnlyMode) {\n      try {\n        const updatedTrade = {\n          ...trade,\n          chartAttachments: updatedChartAttachments // This will be undefined if no attachments remain\n        };\n\n        // Save the updated trade to database immediately\n        onSave(updatedTrade);\n\n      } catch (error) {\n        console.error('❌ Failed to update trade after chart deletion:', error);\n      }\n    } else if (isUploadOnlyMode) {\n      console.log('📦 Chart deleted in upload-only mode, not auto-saving to prevent modal close');\n    }\n\n    // Also ensure the form data is updated to reflect the deletion\n    if (hasRemainingAttachments) {\n      setFormData(prev => ({\n        ...prev,\n        chartAttachments: updatedChartAttachments\n      }));\n    } else {\n      // Remove chartAttachments property entirely if no attachments remain\n      setFormData(prev => {\n        const { chartAttachments: _, ...rest } = prev;\n        return rest;\n      });\n    }\n\n\n  }, [chartAttachments, trade, onSave, isUploadOnlyMode]);\n\n  const handleChartImageView = React.useCallback((chartImage: ChartImage, title: string) => {\n    setChartViewerImage(chartImage);\n    setIsChartViewerOpen(true);\n  }, []);\n\n  // Handle form field changes\n  const handleChange = React.useCallback(async (field: keyof TradeModalFormData, value: any) => {\n    // Prevent any changes to calculated fields\n    if (calculatedFieldNames.includes(field as string)) {\n      console.warn(`Attempted to modify read-only field: ${field}`);\n      return;\n    }\n\n    // Convert numeric fields to numbers\n    const numericFields = [\n      'entry', 'sl', 'tsl', 'cmp', 'initialQty',\n      'pyramid1Price', 'pyramid1Qty', 'pyramid2Price', 'pyramid2Qty',\n      'exit1Price', 'exit1Qty', 'exit2Price', 'exit2Qty', 'exit3Price', 'exit3Qty'\n    ];\n\n    const processedValue = numericFields.includes(field as string)\n      ? Number(value) || 0\n      : value;\n\n    // Track if CMP was manually changed\n    if (field === 'cmp') {\n      setCmpManuallySet(true);\n    }\n\n    // If the field is 'name', fetch the latest price and update cmp (only if CMP is currently 0 or not manually set)\n    let updatedFormData = {\n      ...formData,\n      [field]: processedValue,\n      // Mark CMP as manually set if user changed it\n      ...(field === 'cmp' ? { _cmpAutoFetched: false } : {})\n    };\n\n    if (field === 'name' && processedValue && !cmpManuallySet) {\n      try {\n        console.log(\"[TradeModal] Fetching price for symbol:\", processedValue);\n        // Use smart fetch that prioritizes historical fallback during night hours (3:55-9:15 AM)\n        const priceData = await fetchPriceTicksSmart(processedValue);\n        const ticks = priceData?.data?.ticks?.[processedValue.toUpperCase()];\n        if (ticks && ticks.length > 0) {\n          const latestTick = ticks[ticks.length - 1];\n          const fetchedPrice = latestTick[4]; // index 4 is close price\n\n          // Only update CMP if it's currently 0 (not manually set) or if we successfully fetched a price\n          if (formData.cmp === 0 || fetchedPrice > 0) {\n            updatedFormData.cmp = fetchedPrice;\n            // Mark as auto-fetched\n            updatedFormData._cmpAutoFetched = true;\n            console.log(\"[TradeModal] Updated CMP with fetched price:\", fetchedPrice);\n          }\n        } else {\n          // No price data available - keep existing CMP if it's manually set, otherwise set to 0\n          if (formData.cmp === 0) {\n            updatedFormData.cmp = 0;\n            updatedFormData._cmpAutoFetched = false;\n          }\n        }\n      } catch (err) {\n        // Fetch failed - keep existing CMP if it's manually set, otherwise set to 0\n        if (formData.cmp === 0) {\n          updatedFormData.cmp = 0;\n          updatedFormData._cmpAutoFetched = false;\n        }\n        console.warn(`Failed to fetch price for ${processedValue}:`, err);\n      }\n    }\n\n    setIsDirty(true);\n    setFormData(updatedFormData);\n  }, [calculatedFieldNames, formData, cmpManuallySet]);\n\n  // Reset form when symbol changes\n  React.useEffect(() => {\n    if (initialSymbol && mode === 'add') {\n      handleChange('name', initialSymbol);\n    }\n  }, [initialSymbol, mode, handleChange]);\n\n  // Calculate values when form is submitted\n  const calculateValues = React.useCallback(() => {\n    // Use the recalculateTrade function to ensure all fields are up to date\n    const recalculated = recalculateTrade(formData, portfolioSize, getPortfolioSize);\n    \n    // Update form data with recalculated values\n    setFormData(prev => ({\n      ...prev,\n      ...recalculated\n    }));\n    \n    return recalculated;\n  }, [formData, portfolioSize, getPortfolioSize]);\n\n  const [validationIssues, setValidationIssues] = React.useState<TradeIssue[]>([]);\n\n  // Add useEffect to validate on form changes\n  React.useEffect(() => {\n    const issues = validateTrade(formData);\n    setValidationIssues(issues);\n  }, [formData]);\n\n  // Enhanced handleSubmit with better error handling and data persistence\n  const handleSubmit = React.useCallback(async () => {\n    console.log('🔄 Starting trade save process...');\n    console.log('📊 Current formData:', formData);\n\n    const issues = validateTrade(formData);\n    setValidationIssues(issues);\n\n    // Show validation errors to user but allow save with warnings\n    if (issues.some(issue => issue.type === 'error')) {\n      console.error('❌ Validation errors found:', issues.filter(i => i.type === 'error'));\n      alert(`Cannot save trade due to validation errors:\\n${issues.filter(i => i.type === 'error').map(i => i.message).join('\\n')}`);\n      return;\n    }\n\n    // Show warnings but continue with save\n    if (issues.some(issue => issue.type === 'warning')) {\n      console.warn('⚠️ Validation warnings found:', issues.filter(i => i.type === 'warning'));\n    }\n\n    try {\n      // Clean up chart attachments - remove any that don't have valid data\n      const cleanedChartAttachments: TradeChartAttachments = {};\n      let hasValidAttachments = false;\n\n      if (chartAttachments.beforeEntry) {\n        // Validate beforeEntry attachment\n        const beforeEntry = chartAttachments.beforeEntry;\n        if (beforeEntry.id && beforeEntry.filename &&\n            ((beforeEntry.storage === 'inline' && beforeEntry.data) ||\n             (beforeEntry.storage === 'blob' && beforeEntry.blobId))) {\n          cleanedChartAttachments.beforeEntry = beforeEntry;\n          hasValidAttachments = true;\n        } else {\n          console.warn('🧹 Removing invalid beforeEntry chart attachment during save');\n        }\n      }\n\n      if (chartAttachments.afterExit) {\n        // Validate afterExit attachment\n        const afterExit = chartAttachments.afterExit;\n        if (afterExit.id && afterExit.filename &&\n            ((afterExit.storage === 'inline' && afterExit.data) ||\n             (afterExit.storage === 'blob' && afterExit.blobId))) {\n          cleanedChartAttachments.afterExit = afterExit;\n          hasValidAttachments = true;\n        } else {\n          console.warn('🧹 Removing invalid afterExit chart attachment during save');\n        }\n      }\n\n      // Add metadata if we have valid attachments\n      if (hasValidAttachments) {\n        cleanedChartAttachments.metadata = {\n          createdAt: chartAttachments.metadata?.createdAt || new Date(),\n          updatedAt: new Date(),\n          totalSize: (cleanedChartAttachments.beforeEntry?.size || 0) + (cleanedChartAttachments.afterExit?.size || 0),\n        };\n      }\n\n      // Use current formData instead of debounced to ensure latest changes are saved\n      const newTrade = {\n        ...formData, // Use current formData instead of debouncedFormData\n        id: formData.id || generateId(),\n        // Include chart attachments only if we have valid ones\n        chartAttachments: hasValidAttachments ? cleanedChartAttachments : undefined\n      };\n\n      console.log('💾 Saving trade with data:', newTrade);\n      const recalculated = recalculateTrade(newTrade, portfolioSize, getPortfolioSize);\n      console.log('🧮 Recalculated trade:', recalculated);\n\n      // NEW: Save temporary chart images to Supabase after trade is saved\n      const hasTemporaryCharts = hasValidAttachments && (\n        (cleanedChartAttachments.beforeEntry as any)?.isTemporary ||\n        (cleanedChartAttachments.afterExit as any)?.isTemporary\n      );\n\n      if (hasTemporaryCharts) {\n        console.log('📦 Trade has temporary chart images, will save them after trade creation');\n      }\n\n      onSave(recalculated);\n\n      // NEW: Save temporary charts after trade is saved\n      if (hasTemporaryCharts && recalculated.id) {\n        try {\n          console.log('💾 Saving temporary chart images to Supabase...');\n          const { ChartImageService } = await import('../services/chartImageService');\n          const result = await ChartImageService.saveTemporaryChartImages(recalculated.id, cleanedChartAttachments);\n\n          if (result.success) {\n            console.log('✅ Temporary chart images saved successfully');\n          } else {\n            console.error('❌ Failed to save temporary chart images:', result.error);\n            // Don't fail the entire save operation for chart upload issues\n          }\n        } catch (error) {\n          console.error('❌ Error saving temporary chart images:', error);\n          // Don't fail the entire save operation for chart upload issues\n        }\n      }\n\n      setShouldClearSession(true); // Mark for session clearing after successful save\n      console.log('✅ Trade saved successfully');\n    } catch (error) {\n      console.error('💥 Error saving trade:', error);\n      alert('Error saving trade. Please try again.');\n    }\n  }, [formData, chartAttachments, onSave, portfolioSize, getPortfolioSize]);\n\n  const modalMotionProps = React.useMemo(() => ({\n        variants: {\n          enter: {\n            opacity: 1,\n            scale: 1,\n        y: 0,\n            transition: {\n          duration: 0.2,\n              ease: [0.16, 1, 0.3, 1]\n            }\n          },\n          exit: {\n            opacity: 0,\n            scale: 0.98,\n        y: 10,\n            transition: {\n          duration: 0.15,\n              ease: [0.16, 1, 0.3, 1]\n            }\n          }\n        },\n    initial: { opacity: 0, scale: 0.98, y: 10 }\n  }), []);\n\n  const basicFields = React.useMemo(() => [\n    { name: \"tradeNo\", label: \"Trade No.\", type: \"text\" },\n    { name: \"date\", label: \"Date\", type: \"date\" },\n    { name: \"name\", label: \"Stock/Asset Name\", type: \"text\" },\n    { name: \"entry\", label: \"Entry Price (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"sl\", label: \"Stop Loss (SL) (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"tsl\", label: \"Trailing SL (TSL) (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"cmp\", label: \"Current Market Price (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"buySell\", label: \"Buy/Sell\", type: \"select\", options: [\"Buy\", \"Sell\"] },\n    { name: \"initialQty\", label: \"Initial Quantity (qty)\", type: \"number\", unit: \"qty\" },\n    { \n      name: \"setup\", \n      label: \"Setup\", \n      type: \"select\", \n      options: [\n        \"ITB\",\n        \"Chop BO\",\n        \"IPO Base\",\n        \"3/5/8\",\n        \"21/50\",\n        \"Breakout\",\n        \"Pullback\",\n        \"Reversal\",\n        \"Continuation\",\n        \"Gap Fill\",\n        \"OTB\",\n        \"Stage 2\",\n        \"ONP BO\",\n        \"EP\",\n        \"Pivot Bo\",\n        \"Cheat\",\n        \"Flag\",\n        \"Other\"\n      ] \n    },\n    { name: \"baseDuration\", label: \"Base Duration\", type: \"text\" },\n    { name: \"positionStatus\", label: \"Position Status\", type: \"select\", options: [\"Open\", \"Closed\", \"Partial\"] },\n    { name: \"planFollowed\", label: \"Plan Followed\", type: \"checkbox\" },\n    { \n      name: \"exitTrigger\", \n      label: \"Exit Trigger\", \n      type: \"select\",\n      options: [\n        \"Breakeven exit\",\n        \"Market Pressure\",\n        \"R multiples\",\n        \"Random\",\n        \"SL\",\n        \"Target\",\n        \"Trailing SL\"\n      ]\n    },\n    { \n      name: \"proficiencyGrowthAreas\", \n      label: \"Proficiency Growth Areas\", \n      type: \"select\",\n      options: [\n        \"Biased Analysis\",\n        \"Booked Early\",\n        \"Didn't Book Loss\",\n        \"FOMO\",\n        \"Illiquid Stock\",\n        \"Illogical SL\",\n        \"Lack of Patience\",\n        \"Late Entry\",\n        \"Momentum-less stock\",\n        \"Overconfidence\",\n        \"Overtrading\",\n        \"Poor Exit\",\n        \"Poor Po Size\",\n        \"Poor Sector\",\n        \"Poor Stock\",\n        \"Shifted SL Quickly\",\n        \"Too Early Entry\",\n        \"Too Tight SL\"\n      ]\n    }\n  ], []);\n\n  const advancedFields = React.useMemo(() => [\n    // Pyramid 1\n    { name: \"pyramid1Price\", label: \"Pyramid-1 Price (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"pyramid1Qty\", label: \"Pyramid-1 Quantity (qty)\", type: \"number\", unit: \"qty\" },\n    { name: \"pyramid1Date\", label: \"Pyramid-1 Date\", type: \"date\" },\n    \n    // Pyramid 2\n    { name: \"pyramid2Price\", label: \"Pyramid-2 Price (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"pyramid2Qty\", label: \"Pyramid-2 Quantity (qty)\", type: \"number\", unit: \"qty\" },\n    { name: \"pyramid2Date\", label: \"Pyramid-2 Date\", type: \"date\" },\n    \n    // Exit 1\n    { name: \"exit1Price\", label: \"Exit-1 Price (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"exit1Qty\", label: \"Exit-1 Quantity (qty)\", type: \"number\", unit: \"qty\" },\n    { name: \"exit1Date\", label: \"Exit-1 Date\", type: \"date\" },\n    \n    // Exit 2\n    { name: \"exit2Price\", label: \"Exit-2 Price (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"exit2Qty\", label: \"Exit-2 Quantity (qty)\", type: \"number\", unit: \"qty\" },\n    { name: \"exit2Date\", label: \"Exit-2 Date\", type: \"date\" },\n    \n    // Exit 3\n    { name: \"exit3Price\", label: \"Exit-3 Price (₹)\", type: \"number\", unit: \"₹\" },\n    { name: \"exit3Qty\", label: \"Exit-3 Quantity (qty)\", type: \"number\", unit: \"qty\" },\n    { name: \"exit3Date\", label: \"Exit-3 Date\", type: \"date\" }\n  ], []);\n\n  const calculatedFields = [\n    // Entry and Position\n    { name: \"avgEntry\", label: \"Avg. Entry (₹)\", type: \"calculated\", unit: \"₹\" },\n    { name: \"positionSize\", label: \"Position Size (₹)\", type: \"calculated\", unit: \"₹\" },\n    { name: \"allocation\", label: \"Allocation (%)\", type: \"calculated\", unit: \"%\" },\n    \n    // Exit and Position Status\n    { name: \"openQty\", label: \"Open Qty (qty)\", type: \"calculated\", unit: \"qty\" },\n    { name: \"exitedQty\", label: \"Exited Qty (qty)\", type: \"calculated\", unit: \"qty\" },\n    { name: \"avgExitPrice\", label: \"Avg. Exit (₹)\", type: \"calculated\", unit: \"₹\" },\n    \n    // Performance Metrics\n    { name: \"stockMove\", label: \"Stock Move (₹)\", type: \"calculated\", unit: \"₹\" },\n    { name: \"slPercent\", label: \"SL (%)\", type: \"calculated\", unit: \"%\" },\n    { name: \"rewardRisk\", label: \"Reward/Risk (x)\", type: \"calculated\", unit: \"x\" },\n    { name: \"holdingDays\", label: \"Holding Days\", type: \"calculated\", unit: \"days\" },\n    { name: \"realisedAmount\", label: \"Realised (₹)\", type: \"calculated\", unit: \"₹\" },\n    { name: \"plRs\", label: \"P/L (₹)\", type: \"calculated\", unit: \"₹\" },\n    { name: \"pfImpact\", label: \"PF Impact (%)\", type: \"calculated\", unit: \"%\" },\n    { name: \"cummPf\", label: \"Cumulative PF (%)\", type: \"calculated\", unit: \"%\" }\n  ];\n\n  const currentFields = React.useMemo(() => {\n    // Always return fields, never empty array to avoid virtualizer issues\n    return activeTab === \"basic\" ? basicFields : advancedFields;\n  }, [activeTab]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: currentFields.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 80,\n    overscan: 5\n  });\n\n  // Reset virtualizer when tab changes\n  React.useEffect(() => {\n    if (rowVirtualizer && parentRef.current) {\n      rowVirtualizer.scrollToOffset(0);\n    }\n  }, [activeTab, rowVirtualizer]);\n\n  const renderField = React.useCallback((field: any) => {\n    // If it's a calculated field, always render as read-only with consistent styling\n    if (calculatedFieldNames.includes(field.name)) {\n      const value = formData[field.name as keyof TradeModalFormData];\n      let displayValue = value?.toString() || \"0\";\n      \n      // Format numbers to 2 decimal places if they're numeric\n      if (typeof value === 'number') {\n        displayValue = value.toFixed(2);\n        if (field.unit === '%' || field.percentage) {\n          displayValue = `${displayValue}%`;\n        } else if (field.unit === '₹' || field.currency) {\n          displayValue = `₹${displayValue}`;\n        } else if (field.unit) {\n          displayValue = `${displayValue} ${field.unit}`;\n        }\n      }\n      \n      return (\n        <div key={field.name} className=\"flex flex-col gap-1\">\n          <label className=\"text-sm font-medium text-foreground-600\">\n            {field.label}\n          </label>\n          <div className=\"p-2 rounded-md bg-default-100 border-1 border-default-200 min-h-[40px] flex items-center\">\n            {displayValue}\n          </div>\n        </div>\n      );\n    }\n\n    // Special handling for CMP field\n    if (field.name === \"cmp\") {\n      return (\n        <div key={field.name} className=\"flex flex-col gap-1\">\n          <label className=\"text-sm font-medium text-foreground-600 flex items-center gap-2\">\n            {field.label}\n            {formData._cmpAutoFetched === false && (\n              <Chip size=\"sm\" color=\"warning\" variant=\"flat\" className=\"text-xs\">\n                Manual\n              </Chip>\n            )}\n            {formData._cmpAutoFetched === true && (\n              <Chip size=\"sm\" color=\"success\" variant=\"flat\" className=\"text-xs\">\n                Auto\n              </Chip>\n            )}\n          </label>\n          <Input\n            type=\"number\"\n            value={formData.cmp?.toString() ?? \"0\"}\n            onValueChange={(value) => handleChange(\"cmp\", Number(value))}\n            variant=\"bordered\"\n            startContent={<span className=\"text-default-400\">₹</span>}\n            placeholder={latestPrice?.close ? `Auto: ${latestPrice.close}` : \"Enter manually\"}\n            isDisabled={formData._cmpAutoFetched === true}\n            description={\n              formData._cmpAutoFetched === false\n                ? \"Manually entered price\"\n                : formData._cmpAutoFetched === true\n                  ? \"\"\n                  : latestPrice?.close\n                    ? \"Price available - will auto-update\"\n                    : \"\"\n            }\n            className=\"transform-gpu\"\n          />\n        </div>\n      );\n    }\n\n    switch (field.type) {\n      case \"number\":\n        return (\n          <Input\n            key={field.name}\n            label={field.label}\n            type=\"number\"\n            value={formData[field.name]?.toString() ?? \"0\"}\n            onValueChange={(value) => handleChange(field.name, Number(value))}\n            variant=\"bordered\"\n            startContent={field.unit === '₹' && <span className=\"text-default-400\">₹</span>}\n            endContent={field.unit && field.unit !== '₹' && <span className=\"text-default-400\">{field.unit}</span>}\n            className=\"transform-gpu\"\n          />\n        );\n      case \"date\":\n        return (\n          <Input\n            key={field.name}\n            label={field.label}\n            type=\"date\"\n            value={formData[field.name] || \"\"}\n            onValueChange={(value) => handleChange(field.name, value)}\n            variant=\"bordered\"\n            className=\"transform-gpu\"\n          />\n        );\n      case \"select\":\n        return (\n          <Select\n            key={field.name}\n            label={field.label}\n            selectedKeys={[formData[field.name]]}\n            onChange={(e) => handleChange(field.name, e.target.value)}\n            variant=\"bordered\"\n            className=\"transform-gpu\"\n          >\n            {field.options.map((opt: string) => (\n              <SelectItem key={opt}>{opt}</SelectItem>\n            ))}\n          </Select>\n        );\n      case \"text\": // Handle text inputs specifically\n        if (field.name === \"name\") {\n          return (\n            <NameCell\n              key={field.name}\n              value={formData.name || \"\"}\n              onSave={(value) => handleChange(\"name\", value)}\n            />\n          );\n        }\n        return (\n          <Input\n            key={field.name}\n            label={field.label}\n            value={formData[field.name] || \"\"}\n            onValueChange={(value) => handleChange(field.name, value)}\n            variant=\"bordered\"\n            className=\"transform-gpu\"\n          />\n        );\n      default:\n        return (\n          <Input\n            key={field.name}\n            label={field.label}\n            value={formData[field.name] || \"\"}\n            onValueChange={(value) => handleChange(field.name, value)}\n            variant=\"bordered\"\n            className=\"transform-gpu\"\n          />\n        );\n    }\n  }, [formData, handleChange, calculatedFieldNames]);\n\n  const renderFields = () => {\n    // Don't render fields for charts tab - this function should only be called for basic/advanced\n    if (activeTab === \"charts\") {\n      return null;\n    }\n\n    return (\n      <div\n        ref={parentRef}\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-[60vh] overflow-auto\"\n        style={{\n          height: `${rowVirtualizer.getTotalSize()}px`,\n          position: 'relative'\n        }}\n      >\n        {rowVirtualizer.getVirtualItems().map((virtualRow) => (\n          <div\n            key={virtualRow.index}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: virtualRow.size,\n              transform: `translateY(${virtualRow.start}px)`\n            }}\n          >\n            {renderField(currentFields[virtualRow.index])}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const csvUrl = '/name_sector_industry.csv';\n\n  interface NameCellProps {\n    value: string;\n    onSave: (value: string) => void;\n  }\n\n  const NameCell: React.FC<NameCellProps> = React.memo(function NameCell({ value, onSave }) {\n    const [isEditing, setIsEditing] = React.useState(false);\n    const [editValue, setEditValue] = React.useState(value);\n    const [showDropdown, setShowDropdown] = React.useState(false);\n    const [filtered, setFiltered] = React.useState<string[]>([]);\n    const [selectedIndex, setSelectedIndex] = React.useState(-1);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const dropdownRef = React.useRef<HTMLDivElement>(null);\n    const [position, setPosition] = React.useState({\n      top: 0,\n      left: 0,\n      width: 0,\n      height: 0\n    });\n\n    // Move stockNames state and effect here\n    const [stockNames, setStockNames] = React.useState<string[]>([]);\n    React.useEffect(() => {\n      async function loadStockNames() {\n        const response = await fetch(csvUrl);\n        const csvText = await response.text();\n        const Papa = (await import('papaparse')).default;\n        Papa.parse(csvText, {\n          header: true,\n          complete: (results) => {\n            const names = (results.data as any[]).map(row => row['Stock Name']).filter(Boolean);\n            setStockNames(names);\n          }\n        });\n      }\n      loadStockNames();\n    }, []);\n\n    // Function to find closest matching stock name\n    const findClosestMatch = (input: string): string | null => {\n      if (!input || !stockNames.length) return null;\n      \n      const inputLower = input.toLowerCase();\n      let bestMatch = null;\n      let bestScore = 0;\n\n      // First try exact prefix match\n      const exactPrefixMatch = stockNames.find(name => \n        name.toLowerCase().startsWith(inputLower)\n      );\n      if (exactPrefixMatch) return exactPrefixMatch;\n\n      // Then try contains match\n      const containsMatch = stockNames.find(name => \n        name.toLowerCase().includes(inputLower)\n      );\n      if (containsMatch) return containsMatch;\n\n      // Finally try fuzzy match\n      for (const name of stockNames) {\n        const nameLower = name.toLowerCase();\n        let score = 0;\n        let inputIndex = 0;\n\n        // Calculate similarity score\n        for (let i = 0; i < nameLower.length && inputIndex < inputLower.length; i++) {\n          if (nameLower[i] === inputLower[inputIndex]) {\n            score++;\n            inputIndex++;\n          }\n        }\n\n        if (score > bestScore) {\n          bestScore = score;\n          bestMatch = name;\n        }\n      }\n\n      // Only return match if it's reasonably similar\n      return bestScore > (inputLower.length / 2) ? bestMatch : null;\n    };\n\n    React.useEffect(() => {\n      if (isEditing && editValue) {\n        const matches = stockNames.filter(n => \n          n.toLowerCase().includes(editValue.toLowerCase())\n        );\n        setFiltered(matches.slice(0, 10));\n        setShowDropdown(matches.length > 0);\n        setSelectedIndex(-1);\n\n        // Update position when editing starts\n        if (inputRef.current) {\n          const rect = inputRef.current.getBoundingClientRect();\n          setPosition({\n            top: rect.top,\n            left: rect.left,\n            width: rect.width,\n            height: rect.height\n          });\n        }\n      } else {\n        setShowDropdown(false);\n      }\n    }, [editValue, isEditing, stockNames]);\n\n    // Add a resize listener to update position dynamically\n    React.useEffect(() => {\n      const handleResize = () => {\n        if (isEditing && inputRef.current) {\n          const rect = inputRef.current.getBoundingClientRect();\n          setPosition({\n            top: rect.top,\n            left: rect.left,\n            width: rect.width,\n            height: rect.height\n          });\n        }\n      };\n\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, [isEditing]);\n\n    const handleSave = (val?: string) => {\n      const finalValue = val ?? editValue;\n\n      // Allow empty values to be saved (clearing the field)\n      if (!finalValue.trim()) {\n        onSave(''); // Save empty string\n        setIsEditing(false);\n        setShowDropdown(false);\n        setSelectedIndex(-1);\n        return;\n      }\n\n      // Check if the value exists in stockNames\n      const exactMatch = stockNames.find(\n        name => name.toLowerCase() === finalValue.toLowerCase()\n      );\n\n      if (exactMatch) {\n        onSave(exactMatch); // Use the exact case from database\n      } else {\n        // Try to find closest match\n        const closestMatch = findClosestMatch(finalValue);\n        if (closestMatch) {\n          const confirmed = window.confirm(\n            `\"${finalValue}\" not found. Did you mean \"${closestMatch}\"?`\n          );\n          if (confirmed) {\n            onSave(closestMatch);\n          } else {\n            // Revert to previous value if user declines suggestion\n             setEditValue(value);\n          }\n        } else {\n           const addNew = window.confirm(`\"${finalValue}\" is not a valid stock name. Do you want to add it?`);\n           if(addNew){\n            onSave(finalValue.toUpperCase());\n           } else {\n            setEditValue(value); // Revert to previous value\n           }\n        }\n      }\n      setIsEditing(false);\n      setShowDropdown(false);\n      setSelectedIndex(-1);\n    };\n\n    // Scroll selected item into view\n    React.useEffect(() => {\n      if (selectedIndex >= 0 && dropdownRef.current) {\n        const selectedElement = document.getElementById(`stock-suggestion-${selectedIndex}`);\n        if (selectedElement) {\n          selectedElement.scrollIntoView({ \n            block: 'nearest',\n            behavior: 'smooth'\n          });\n        }\n      }\n    }, [selectedIndex]);\n\n    const handleKeyDown = (e: React.KeyboardEvent) => {\n      if (!showDropdown) return;\n\n      switch (e.key) {\n        case 'ArrowDown':\n          e.preventDefault();\n          setSelectedIndex(prev => {\n            const next = prev + 1;\n            return next >= filtered.length ? 0 : next;\n          });\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          setSelectedIndex(prev => {\n            const next = prev - 1;\n            return next < 0 ? filtered.length - 1 : next;\n          });\n          break;\n        case 'Enter':\n          e.preventDefault();\n          if (selectedIndex >= 0) {\n            handleSave(filtered[selectedIndex]);\n          } else if (filtered.length === 1) {\n            handleSave(filtered[0]);\n          } else {\n            handleSave();\n          }\n          break;\n        case 'Escape':\n          e.preventDefault();\n          setShowDropdown(false);\n          setSelectedIndex(-1);\n          break;\n        case 'Tab':\n          if (selectedIndex >= 0) {\n            e.preventDefault();\n            handleSave(filtered[selectedIndex]);\n          }\n          break;\n      }\n    };\n\n    if (isEditing) {\n      return (\n        <div className=\"relative min-w-[220px]\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            className=\"w-full min-w-[220px] px-3 py-2 text-sm bg-gray-100 dark:bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-primary\"\n            value={editValue}\n            onChange={e => setEditValue(e.target.value)}\n            onBlur={() => setTimeout(() => handleSave(), 100)}\n            onKeyDown={handleKeyDown}\n            autoFocus\n          />\n          {showDropdown && (\n            <div\n              ref={dropdownRef}\n              style={{ \n                position: 'fixed',\n                top: position.top + position.height,\n                left: position.left,\n                width: position.width,\n              }}\n              className=\"z-50 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded shadow max-h-48 overflow-y-auto overflow-x-auto\"\n              role=\"listbox\"\n              tabIndex={-1}\n            >\n              {filtered.map((name, i) => (\n                <div\n                  key={name}\n                  id={`stock-suggestion-${i}`}\n                  role=\"option\"\n                  aria-selected={i === selectedIndex}\n                  className={`px-3 py-1.5 text-sm cursor-pointer whitespace-nowrap ${\n                    i === selectedIndex\n                      ? 'bg-blue-100 dark:bg-blue-900'\n                      : 'hover:bg-blue-50 dark:hover:bg-blue-800'\n                  }`}\n                  onMouseDown={() => handleSave(name)}\n                  onMouseEnter={() => setSelectedIndex(i)}\n                >\n                  {name}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <div \n        className=\"px-2 py-1 text-sm bg-gray-100 dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors cursor-text\"\n        onClick={() => setIsEditing(true)}\n      >\n        {value || <span className=\"text-gray-400\">Stock name</span>}\n      </div>\n    );\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onOpenChange={onOpenChange}\n      size={activeTab === 'charts' ? \"3xl\" : \"2xl\"}\n      scrollBehavior=\"inside\"\n      motionProps={modalMotionProps}\n      classNames={{\n        base: \"transform-gpu backdrop-blur-sm\",\n        wrapper: \"transform-gpu\",\n        backdrop: \"bg-black/40\",\n        closeButton: \"text-foreground/60 hover:bg-white/10\"\n      }}\n      backdrop=\"blur\"\n    >\n      <ModalContent className={`bg-white/95 dark:bg-gray-900/95 backdrop-blur-2xl border border-gray-200 dark:border-gray-700 shadow-2xl max-h-[85vh] z-[9999] ${\n        activeTab === 'charts'\n          ? 'w-[90vw] max-w-4xl'\n          : 'w-[95vw] max-w-md'\n      }`}>\n        {(onClose) => (\n          <>\n            <ModalHeader className=\"flex flex-col gap-1 border-b border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-900/80\">\n              <div className=\"flex justify-between items-center w-full\">\n                <Tabs\n                  selectedKey={activeTab}\n                  onSelectionChange={(key) => {\n                    // Prevent tab switching in upload-only mode\n                    if (isUploadOnlyMode) {\n                      return; // Stay on charts tab\n                    }\n\n                    // In actions edit mode, prevent switching to charts tab\n                    if (isActionsEditMode && key === 'charts') {\n                      return; // Don't allow charts tab\n                    }\n\n                    setActiveTab(key as string);\n                  }}\n                  aria-label=\"Options\"\n                  color=\"primary\"\n                  size=\"sm\"\n                  classNames={{\n                    tabList: \"bg-transparent p-0.5 rounded-xl\",\n                    cursor: \"bg-gray-200 dark:bg-gray-600 rounded-lg shadow-sm\",\n                    tab: \"px-4 py-1.5 text-xs font-medium text-gray-700 dark:text-gray-200 data-[selected=true]:text-gray-900 dark:data-[selected=true]:text-white data-[hover=true]:bg-gray-100/80 dark:data-[hover=true]:bg-gray-700/50 rounded-lg transition-all duration-200\"\n                  }}\n                >\n                  <Tab\n                    key=\"basic\"\n                    title=\"Basic\"\n                    isDisabled={isUploadOnlyMode}\n                    className={isUploadOnlyMode ? \"opacity-50 cursor-not-allowed\" : \"\"}\n                  />\n                  <Tab\n                    key=\"advanced\"\n                    title=\"Advanced\"\n                    isDisabled={isUploadOnlyMode}\n                    className={isUploadOnlyMode ? \"opacity-50 cursor-not-allowed\" : \"\"}\n                  />\n                  <Tab\n                    key=\"charts\"\n                    title=\"Charts\"\n                    isDisabled={isActionsEditMode}\n                    className={\n                      isUploadOnlyMode\n                        ? \"ring-2 ring-primary-500\"\n                        : isActionsEditMode\n                        ? \"opacity-50 cursor-not-allowed\"\n                        : \"\"\n                    }\n                  />\n                </Tabs>\n\n\n              </div>\n            </ModalHeader>\n            <Divider />\n            <ModalBody className=\"px-2 py-2 overflow-y-auto overflow-x-hidden overscroll-contain will-change-transform touch-auto\">\n\n              {/* Form Fields */}\n              <AnimatePresence mode=\"wait\" initial={false}>\n                <motion.div\n                  key={activeTab}\n                  initial={{ opacity: 0, x: 10 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -10 }}\n                  transition={{ duration: 0.15, ease: [0.2, 0, 0.2, 1] }}\n                  className=\"transform-gpu\"\n                >\n                  {activeTab === 'charts' ? (\n                    <div className=\"space-y-6\">\n                      {isUploadOnlyMode && (\n                        <div className=\"bg-primary-50 dark:bg-primary-950 border border-primary-200 dark:border-primary-800 rounded-lg p-3 mb-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <Icon icon=\"lucide:upload\" className=\"w-4 h-4 text-primary-600 dark:text-primary-400\" />\n                            <span className=\"text-sm font-medium text-primary-700 dark:text-primary-300\">\n                              Chart Upload Mode\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-primary-600 dark:text-primary-400 mt-1\">\n                            You can only upload charts in this mode. Other trade details are not editable.\n                          </p>\n                        </div>\n                      )}\n                      <div className=\"flex justify-end mb-6\">\n                        <Button\n                          color=\"primary\"\n                          variant=\"flat\"\n                          size=\"sm\"\n                          onPress={() => setIsUniversalViewerOpen(true)}\n                          startContent={<Icon icon=\"lucide:images\" className=\"w-4 h-4\" />}\n                        >\n                          Browse All Charts\n                        </Button>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <ChartImageUpload\n                          tradeId={formData.id || 'new'}\n                          imageType=\"beforeEntry\"\n                          currentImage={chartAttachments.beforeEntry}\n                          onImageUploaded={(chartImage, uploadMethod) => handleChartImageUploaded('beforeEntry', chartImage, uploadMethod)}\n                          onImageDeleted={() => handleChartImageDeleted('beforeEntry')}\n                          disabled={false}\n                          allowTemporary={true}\n                        />\n\n                        <ChartImageUpload\n                          tradeId={formData.id || 'new'}\n                          imageType=\"afterExit\"\n                          currentImage={chartAttachments.afterExit}\n                          onImageUploaded={(chartImage, uploadMethod) => handleChartImageUploaded('afterExit', chartImage, uploadMethod)}\n                          onImageDeleted={() => handleChartImageDeleted('afterExit')}\n                          disabled={false}\n                          allowTemporary={true}\n                          suggestedUploadMethod={chartUploadMethods.beforeEntry}\n                        />\n                      </div>\n                    </div>\n                  ) : (\n                    <>\n                      {/* Summary Card Section: Show key calculated metrics at the top */}\n                      <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 mb-4 transform-gpu\">\n                        <div className=\"p-2 rounded-lg bg-white/5 backdrop-blur-md border border-white/10 hover:bg-white/5 transition-all duration-200 shadow-sm hover:shadow\">\n                          <div className=\"text-[10px] text-foreground-500\">Avg. Entry (₹)</div>\n                          <div className=\"font-medium text-sm\">{formData.avgEntry?.toFixed(2) ?? '0.00'}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-[10px] text-foreground-500\">Position (₹)</div>\n                          <div className=\"font-medium text-sm\">{(formData.positionSize / 1000)?.toFixed(1) ?? '0.0'}K</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-[10px] text-foreground-500\">Alloc. (%)</div>\n                          <div className=\"font-medium text-sm\">{formData.allocation?.toFixed(1) ?? '0.0'}%</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">Open Qty (qty)</div>\n                          <div className=\"font-semibold\">{formData.openQty ?? 0}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">Exited Qty (qty)</div>\n                          <div className=\"font-semibold\">{formData.exitedQty ?? 0}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">Avg. Exit (₹)</div>\n                          <div className=\"font-semibold\">{formData.avgExitPrice?.toFixed(2) ?? '0.00'}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">Stock Move (₹)</div>\n                          <div className=\"font-semibold\">{formData.stockMove?.toFixed(2) ?? '0.00'}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">SL (%)</div>\n                          <div className=\"font-semibold\">{formData.slPercent?.toFixed(2) ?? '0.00'}%</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">Reward/Risk (x)</div>\n                          <div className=\"font-semibold\">{formData.rewardRisk?.toFixed(2) ?? '0.00'}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">Holding Days</div>\n                          <div className=\"font-semibold\">{formData.holdingDays ?? 0}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">Realised (₹)</div>\n                          <div className=\"font-semibold\">{formData.realisedAmount?.toFixed(2) ?? '0.00'}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">P/L (₹)</div>\n                          <div className=\"font-semibold\">{formData.plRs?.toFixed(2) ?? '0.00'}</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">PF Impact (%)</div>\n                          <div className=\"font-semibold\">{formData.pfImpact?.toFixed(2) ?? '0.00'}%</div>\n                        </div>\n                        <div className=\"p-3 rounded-md bg-default-100 border border-default-200\">\n                          <div className=\"text-xs text-foreground-400 mb-1\">Cumulative PF (%)</div>\n                          <div className=\"font-semibold\">{formData.cummPf?.toFixed(2) ?? '0.00'}%</div>\n                        </div>\n                      </div>\n\n                      {/* Add Validation Messages below summary cards */}\n                      {validationIssues.length > 0 && (\n                        <div className=\"mb-4 backdrop-blur-lg bg-white/5 rounded-lg p-2 border border-white/10 text-sm transform-gpu\">\n                          {validationIssues.map((issue, index) => (\n                            <div\n                              key={index}\n                              className={`p-2 text-sm rounded-lg mb-1.5 flex items-center gap-2 backdrop-blur-md ${\n                                issue.type === 'error'\n                                  ? 'bg-danger-500/10 border border-danger-500/20 text-danger-200 backdrop-blur-md'\n                                  : 'bg-warning-500/10 border border-warning-500/20 text-warning-200 backdrop-blur-md'\n                              }`}\n                            >\n                              <Icon\n                                icon={issue.type === 'error' ? \"lucide:alert-circle\" : \"lucide:alert-triangle\"}\n                                className={issue.type === 'error' ? \"text-danger-500\" : \"text-warning-500\"}\n                              />\n                              <span className=\"text-sm\">{issue.message}</span>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n\n                      {renderFields()}\n                    </>\n                  )}\n                </motion.div>\n              </AnimatePresence>\n            </ModalBody>\n            <Divider />\n            <ModalFooter className=\"border-t border-gray-200 dark:border-gray-700 py-2 px-4 bg-white/80 dark:bg-transparent\">\n              <Button\n                variant=\"flat\"\n                onPress={() => onOpenChange(false)}\n                className=\"bg-white hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600 h-8 min-w-20 text-xs text-gray-800 dark:text-gray-200\"\n              >\n                Cancel\n              </Button>\n                <Button \n                  color=\"primary\" \n                  onPress={handleSubmit}\n                  isDisabled={validationIssues.some(issue => issue.type === 'error')}\n                  className=\"bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white shadow-md shadow-blue-500/20 h-8 min-w-24 text-sm min-w-8 w-8 h-8 p-0 flex items-center justify-center bg-gray-800 hover:bg-gray-900 text-white shadow-sm rounded-full\"\n                  isIconOnly\n                >\n                  <Icon \n                    icon={mode === \"add\" ? \"lucide:plus\" : \"lucide:check\"} \n                    className=\"h-4 w-4\"\n                  />\n                </Button>\n            </ModalFooter>\n          </>\n        )}\n      </ModalContent>\n\n      {/* Chart Image Viewer Modal */}\n      <ChartImageViewer\n        isOpen={isChartViewerOpen}\n        onOpenChange={setIsChartViewerOpen}\n        chartImage={chartViewerImage}\n        title={chartViewerImage ?\n          (chartAttachments.beforeEntry?.id === chartViewerImage.id ? 'Before Entry Chart' : 'After Exit Chart')\n          : 'Chart Image'\n        }\n      />\n\n      {/* Universal Chart Viewer Modal */}\n      <UniversalChartViewer\n        isOpen={isUniversalViewerOpen}\n        onOpenChange={setIsUniversalViewerOpen}\n        initialChartImage={chartViewerImage}\n        initialTradeId={formData.id}\n        refreshTrigger={chartRefreshTrigger}\n      />\n    </Modal>\n  );\n});\n\nTradeModal.displayName = \"TradeModal\";","import { useState, useEffect, useCallback, useMemo, useRef } from 'react';\r\nimport { PriceTick, fetchPriceTicks, fetchPriceTicksWithFallback, getTodayMarketOpen, isMarketOpen } from '../utils/priceTickApi';\r\nimport { isWeekend } from 'date-fns';\r\n\r\ninterface ProcessedTick extends Omit<PriceTick, 'dateTime'> {\r\n  dateTime: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport const usePriceTicks = (symbol: string) => {\r\n  const [priceTicks, setPriceTicks] = useState<ProcessedTick[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const isMounted = useRef(true);\r\n\r\n  const processTicks = useCallback((data: any): ProcessedTick[] => {\r\n    if (!data?.data?.ticks?.[symbol]) return [];\r\n\r\n    return data.data.ticks[symbol].map((tick: any) => ({\r\n      dateTime: tick[0],\r\n      timestamp: new Date(tick[0]).getTime(),\r\n      open: tick[1],\r\n      high: tick[2],\r\n      low: tick[3],\r\n      close: tick[4],\r\n      volume: tick[5],\r\n      dayVolume: tick[6]\r\n    }));\r\n  }, [symbol]);\r\n\r\n  // Fetch data for the current market session with fallback mechanism\r\n  const fetchTicks = useCallback(async (fromDate?: Date, toDate?: Date) => {\r\n    if (!symbol || !isMounted.current) {\r\n      return [];\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      let data;\r\n\r\n      try {\r\n        // Try primary API first\r\n        data = await fetchPriceTicks(symbol, fromDate, toDate);\r\n        } catch (primaryError) {\r\n        // If primary fails, try fallback mechanism\r\n        data = await fetchPriceTicksWithFallback(symbol, fromDate, toDate);\r\n        }\r\n\r\n      const processed = processTicks(data);\r\n      if (isMounted.current) {\r\n        setPriceTicks(processed);\r\n        setLastUpdated(new Date());\r\n        // Clear any previous errors on success\r\n        setError(null);\r\n      }\r\n\r\n      return processed;\r\n    } catch (err) {\r\n      if (isMounted.current) {\r\n        const errorMessage = err instanceof Error ? err.message : 'Failed to fetch price ticks';\r\n\r\n        // Provide more specific error messages for common issues\r\n        let userFriendlyError = errorMessage;\r\n        if (errorMessage.includes('525') || errorMessage.includes('SSL')) {\r\n          userFriendlyError = 'SSL connection failed. The API server may be temporarily unavailable.';\r\n        } else if (errorMessage.includes('CORS')) {\r\n          userFriendlyError = 'Cross-origin request blocked. Please check API configuration.';\r\n        } else if (errorMessage.includes('timeout')) {\r\n          userFriendlyError = 'Request timed out. Please check your internet connection.';\r\n        } else if (errorMessage.includes('404')) {\r\n          userFriendlyError = 'API endpoint not found. The service may be temporarily unavailable.';\r\n        }\r\n\r\n        setError(new Error(userFriendlyError));\r\n      }\r\n      return [];\r\n    } finally {\r\n      if (isMounted.current) {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  }, [symbol, processTicks]);\r\n\r\n  // Stop polling\r\n  const stopPolling = useCallback(() => {\r\n    if (pollingIntervalRef.current) {\r\n      clearInterval(pollingIntervalRef.current);\r\n      pollingIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Helper function to determine if it's after-hours weekday (12:00 AM to 9:15 AM IST)\r\n  const isAfterHoursWeekday = useCallback((): boolean => {\r\n    const now = new Date();\r\n    const day = now.getDay();\r\n    const hours = now.getHours();\r\n    const minutes = now.getMinutes();\r\n\r\n    // Only applies to weekdays (Monday=1 to Friday=5)\r\n    if (day === 0 || day === 6) return false;\r\n\r\n    // Check if time is between 12:00 AM (00:00) and 9:15 AM (09:15)\r\n    if (hours < 9 || (hours === 9 && minutes < 15)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }, []);\r\n\r\n  // Start polling with conditional interval based on market status, weekends, and after-hours\r\n  const startPolling = useCallback(() => {\r\n    // Clear any existing interval first\r\n    stopPolling();\r\n\r\n    const now = new Date();\r\n    const isCurrentlyWeekend = isWeekend(now);\r\n    const isCurrentlyMarketOpen = isMarketOpen();\r\n    const isCurrentlyAfterHours = isAfterHoursWeekday();\r\n\r\n    // Determine polling interval based on market status, weekend, and after-hours\r\n    let pollingInterval: number;\r\n    let marketStatus: string;\r\n\r\n    if (isCurrentlyWeekend) {\r\n      pollingInterval = 1800000; // 30 minutes on weekends (less frequent)\r\n      marketStatus = 'Weekend';\r\n    } else if (isCurrentlyAfterHours) {\r\n      pollingInterval = 600000; // 10 minutes during after-hours weekdays (12:00 AM - 9:15 AM)\r\n      marketStatus = 'After-Hours';\r\n    } else if (isCurrentlyMarketOpen) {\r\n      pollingInterval = 60000; // 1 minute during market hours (9:15 AM - 3:30 PM)\r\n      marketStatus = 'Open';\r\n    } else {\r\n      pollingInterval = 600000; // 10 minutes when market is closed on weekdays (3:30 PM - 12:00 AM)\r\n      marketStatus = 'Closed';\r\n    }\r\n\r\n    // Initial fetch - let the API determine the appropriate date range and interval\r\n    fetchTicks();\r\n\r\n    // Set up polling\r\n    pollingIntervalRef.current = setInterval(() => {\r\n      const currentNow = new Date();\r\n      const currentIsWeekend = isWeekend(currentNow);\r\n      const currentIsMarketOpen = isMarketOpen();\r\n      const currentIsAfterHours = isAfterHoursWeekday();\r\n\r\n      // Determine current status and interval\r\n      let currentPollingInterval: number;\r\n      let currentMarketStatus: string;\r\n\r\n      if (currentIsWeekend) {\r\n        currentPollingInterval = 1800000; // 30 minutes\r\n        currentMarketStatus = 'Weekend';\r\n      } else if (currentIsAfterHours) {\r\n        currentPollingInterval = 600000; // 10 minutes\r\n        currentMarketStatus = 'After-Hours';\r\n      } else if (currentIsMarketOpen) {\r\n        currentPollingInterval = 60000; // 1 minute\r\n        currentMarketStatus = 'Open';\r\n      } else {\r\n        currentPollingInterval = 600000; // 10 minutes\r\n        currentMarketStatus = 'Closed';\r\n      }\r\n\r\n      // CRITICAL FIX: Prevent recursive polling that causes memory leaks\r\n      // Instead of restarting polling, just continue with current interval\r\n      // The useEffect will handle interval changes when dependencies change\r\n\r\n      fetchTicks(); // Let API determine appropriate parameters\r\n    }, pollingInterval);\r\n\r\n    return () => {\r\n      stopPolling();\r\n    };\r\n  }, [symbol, fetchTicks, stopPolling, isAfterHoursWeekday]);\r\n\r\n  // Initialize and clean up\r\n  useEffect(() => {\r\n    isMounted.current = true;\r\n    // Only start polling if a symbol is provided\r\n    if (symbol) {\r\n      startPolling();\r\n    }\r\n\r\n    return () => {\r\n      isMounted.current = false;\r\n      stopPolling();\r\n    };\r\n  }, [symbol, startPolling]); // symbol dependency ensures polling restarts if symbol changes\r\n\r\n  // Function to refresh data\r\n  const refresh = useCallback((fromDate?: Date, toDate?: Date) => {\r\n    return fetchTicks(fromDate, toDate);\r\n  }, [fetchTicks]);\r\n\r\n  // Get the latest price\r\n  const latestPrice = useMemo(() => {\r\n    if (priceTicks.length === 0) return null;\r\n    // Ensure the last tick is for the current symbol if the symbol changes rapidly\r\n    const lastTick = priceTicks[priceTicks.length - 1];\r\n     // Basic check if the tick data structure looks plausible\r\n    if (Array.isArray((lastTick as any).ticks?.[symbol]) && (lastTick as any).ticks[symbol].length > 0) {\r\n       const symbolTicks = (lastTick as any).ticks[symbol];\r\n       const latest = symbolTicks[symbolTicks.length - 1];\r\n       // Assuming index 4 is the close price based on PriceTicksResponse interface\r\n       if (latest && typeof latest[4] === 'number'){\r\n          // Create a simplified object matching ProcessedTick structure\r\n          return {\r\n            dateTime: latest[0] || '', // Date string\r\n            timestamp: new Date(latest[0] || '').getTime(), // Timestamp\r\n            open: latest[1] || 0,\r\n            high: latest[2] || 0,\r\n            low: latest[3] || 0,\r\n            close: latest[4] || 0, // Correct: Access close price from array index 4\r\n            volume: latest[5] || 0,\r\n            dayVolume: latest[6] || 0,\r\n            // Include other properties from the main tick object if needed, but be cautious with types\r\n             ...(typeof lastTick === 'object' && lastTick !== null ? lastTick : {})\r\n          };\r\n       }\r\n    } else if (lastTick && typeof lastTick.close === 'number') {\r\n       // Fallback for the processed tick structure if API response format changes or mock data is used\r\n       return lastTick;\r\n    }\r\n    return null;\r\n  }, [priceTicks, symbol]); // Add symbol dependency\r\n\r\n  // Get price at a specific time\r\n  const getPriceAtTime = useCallback((timestamp: Date): ProcessedTick | null => {\r\n    if (priceTicks.length === 0) return null;\r\n\r\n    const targetTime = timestamp.getTime();\r\n\r\n    // Find the closest timestamp\r\n    return priceTicks.reduce((prev, curr) => {\r\n      const prevDiff = Math.abs(prev.timestamp - targetTime);\r\n      const currDiff = Math.abs(curr.timestamp - targetTime);\r\n      return prevDiff < currDiff ? prev : curr;\r\n    });\r\n  }, [priceTicks]);\r\n\r\n  // Get price change percentage\r\n  const priceChange = useMemo(() => {\r\n    if (priceTicks.length < 2) return 0;\r\n    const first = priceTicks[0].close;\r\n    const last = priceTicks[priceTicks.length - 1].close;\r\n    return ((last - first) / first) * 100;\r\n  }, [priceTicks]);\r\n\r\n  // Get today's market open time (9:08 AM IST)\r\n  const getTodayMarketOpen = useCallback((): Date => {\r\n    const now = new Date();\r\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n    // Market opens at 9:08 AM IST (UTC+5:30)\r\n    today.setHours(9, 8, 0, 0);\r\n    return today;\r\n  }, []);\r\n\r\n  return {\r\n    priceTicks,\r\n    latestPrice,\r\n    loading,\r\n    error,\r\n    lastUpdated,\r\n    refresh,\r\n    getPriceAtTime,\r\n    priceChange\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Divider\r\n} from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\ninterface DeleteConfirmModalProps {\r\n  isOpen: boolean;\r\n  onOpenChange: (isOpen: boolean) => void;\r\n  onDelete: () => void;\r\n  tradeName: string;\r\n}\r\n\r\nexport const DeleteConfirmModal: React.FC<DeleteConfirmModalProps> = ({\r\n  isOpen,\r\n  onOpenChange,\r\n  onDelete,\r\n  tradeName\r\n}) => {\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onOpenChange={onOpenChange}\r\n      size=\"sm\"\r\n      backdrop=\"blur\"\r\n      className=\"bg-background/95 backdrop-blur-sm\"\r\n      motionProps={{\r\n        variants: {\r\n          enter: {\r\n            opacity: 1,\r\n            scale: 1,\r\n            y: 0,\r\n            transition: {\r\n              duration: 0.3,\r\n              ease: [0.16, 1, 0.3, 1]\r\n            }\r\n          },\r\n          exit: {\r\n            opacity: 0,\r\n            scale: 0.98,\r\n            y: 10,\r\n            transition: {\r\n              duration: 0.2,\r\n              ease: [0.16, 1, 0.3, 1]\r\n            }\r\n          }\r\n        },\r\n        initial: { opacity: 0, scale: 0.98, y: 10 }\r\n      }}\r\n    >\r\n      <ModalContent className=\"shadow-elegant\">\r\n        {(onClose) => (\r\n          <>\r\n            <ModalHeader className=\"flex flex-col gap-1 pb-2\">\r\n              <h2 className=\"text-xl font-semibold bg-gradient-to-r from-danger-500 to-danger-600 bg-clip-text text-transparent\">\r\n                Confirm Delete\r\n              </h2>\r\n            </ModalHeader>\r\n            <Divider className=\"opacity-50\" />\r\n            <ModalBody>\r\n              <div className=\"flex flex-col items-center gap-4 py-6\">\r\n                <motion.div\r\n                  className=\"w-16 h-16 rounded-full bg-danger-100 dark:bg-danger-900/30 flex items-center justify-center shadow-soft-sm\"\r\n                  initial={{ scale: 0.8, rotate: -10 }}\r\n                  animate={{ scale: 1, rotate: 0 }}\r\n                  transition={{\r\n                    type: \"spring\",\r\n                    stiffness: 400,\r\n                    damping: 15\r\n                  }}\r\n                >\r\n                  <Icon icon=\"lucide:trash\" className=\"text-danger-500 text-2xl\" />\r\n                </motion.div>\r\n                <div className=\"text-center space-y-3\">\r\n                  <p className=\"text-lg leading-relaxed\">\r\n                    Are you sure you want to delete the trade for{\" \"}\r\n                    <span className=\"font-semibold text-danger-500\">{tradeName}</span>?\r\n                  </p>\r\n                  <p className=\"text-sm text-foreground-500 leading-relaxed\">\r\n                    This action cannot be undone and all associated data will be permanently removed.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </ModalBody>\r\n            <Divider className=\"opacity-50\" />\r\n            <ModalFooter className=\"pt-4\">\r\n              <Button\r\n                variant=\"flat\"\r\n                onPress={onClose}\r\n                className=\"hover:bg-foreground-100 transition-colors duration-200\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <motion.div\r\n                whileHover={{ scale: 1.02 }}\r\n                whileTap={{ scale: 0.98 }}\r\n              >\r\n                <Button\r\n                  color=\"danger\"\r\n                  onPress={onDelete}\r\n                  className=\"bg-gradient-to-r from-danger-500 to-danger-600 shadow-soft-sm hover:shadow-soft-md transition-all duration-200\"\r\n                  startContent={\r\n                    <Icon\r\n                      icon=\"lucide:trash\"\r\n                      className=\"text-lg opacity-90\"\r\n                    />\r\n                  }\r\n                >\r\n                  Delete Trade\r\n                </Button>\r\n              </motion.div>\r\n            </ModalFooter>\r\n          </>\r\n        )}\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};","import React, { useState, useCallback, useMemo } from 'react';\nimport {\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Select,\n  SelectItem,\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Progress,\n  Chip,\n  Divider,\n  ScrollShadow\n} from \"@heroui/react\";\nimport { Icon } from \"@iconify/react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport * as XLSX from 'xlsx';\nimport Papa from 'papaparse';\nimport { Trade } from \"../types/trade\";\nimport { generateId } from \"../utils/helpers\";\nimport {\n  calcAvgEntry,\n  calcPositionSize,\n  calcAllocation,\n  calcSLPercent,\n  calcOpenQty,\n  calcExitedQty,\n  calcAvgExitPrice,\n  calcStockMove,\n  calcRewardRisk,\n  calcHoldingDays,\n  calcRealisedAmount,\n  calcPFImpact,\n  calcRealizedPL_FIFO\n} from \"../utils/tradeCalculations\";\n\ninterface TradeUploadModalProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onImport: (trades: Trade[]) => void;\n  portfolioSize?: number;\n  getPortfolioSize?: (month: string, year: number) => number;\n}\n\ninterface ParsedData {\n  headers: string[];\n  rows: any[][];\n  fileName: string;\n}\n\ninterface ColumnMapping {\n  [key: string]: string; // Our field -> Their column\n}\n\ninterface MappingConfidence {\n  [key: string]: number; // Our field -> confidence score (0-100)\n}\n\n// Fields that should be imported from user data (manual input fields)\nconst USER_INPUT_FIELDS = [\n  { key: 'tradeNo', label: 'Trade No.', required: false },\n  { key: 'date', label: 'Date', required: true },\n  { key: 'name', label: 'Stock Name', required: true },\n  { key: 'setup', label: 'Setup', required: false },\n  { key: 'buySell', label: 'Buy/Sell', required: false },\n  { key: 'entry', label: 'Entry Price', required: false },\n  { key: 'sl', label: 'Stop Loss', required: false },\n  { key: 'tsl', label: 'Trailing SL', required: false },\n  { key: 'initialQty', label: 'Initial Quantity', required: false },\n  { key: 'pyramid1Price', label: 'Pyramid 1 Price', required: false },\n  { key: 'pyramid1Qty', label: 'Pyramid 1 Qty', required: false },\n  { key: 'pyramid1Date', label: 'Pyramid 1 Date', required: false },\n  { key: 'pyramid2Price', label: 'Pyramid 2 Price', required: false },\n  { key: 'pyramid2Qty', label: 'Pyramid 2 Qty', required: false },\n  { key: 'pyramid2Date', label: 'Pyramid 2 Date', required: false },\n  { key: 'exit1Price', label: 'Exit 1 Price', required: false },\n  { key: 'exit1Qty', label: 'Exit 1 Qty', required: false },\n  { key: 'exit1Date', label: 'Exit 1 Date', required: false },\n  { key: 'exit2Price', label: 'Exit 2 Price', required: false },\n  { key: 'exit2Qty', label: 'Exit 2 Qty', required: false },\n  { key: 'exit2Date', label: 'Exit 2 Date', required: false },\n  { key: 'exit3Price', label: 'Exit 3 Price', required: false },\n  { key: 'exit3Qty', label: 'Exit 3 Qty', required: false },\n  { key: 'exit3Date', label: 'Exit 3 Date', required: false },\n  { key: 'planFollowed', label: 'Plan Followed', required: false },\n  { key: 'exitTrigger', label: 'Exit Trigger', required: false },\n  { key: 'proficiencyGrowthAreas', label: 'Growth Areas', required: false },\n  { key: 'notes', label: 'Notes', required: false },\n];\n\n// Fields that are auto-populated and should NOT be imported from user data\nconst AUTO_POPULATED_FIELDS = [\n  'cmp',           // Fetched from API\n  'avgEntry',      // Calculated from entry + pyramids\n  'positionSize',  // Calculated from avgEntry * totalQty\n  'allocation',    // Calculated from positionSize / portfolioSize\n  'slPercent',     // Calculated from SL vs Entry\n  'openQty',       // Calculated from total - exited\n  'exitedQty',     // Calculated from exit quantities\n  'avgExitPrice',  // Calculated from exit prices/quantities\n  'stockMove',     // Calculated from price movement\n  'openHeat',      // Calculated from portfolio context\n  'rewardRisk',    // Calculated from risk/reward ratio\n  'holdingDays',   // Calculated from dates\n  'positionStatus', // Calculated from open/exited quantities\n  'realisedAmount', // Calculated from exits\n  'plRs',          // Calculated using FIFO/accounting method\n  'pfImpact',      // Calculated from P/L vs portfolio\n  'cummPf',        // Calculated cumulatively across trades\n  'unrealizedPL'   // Calculated for open positions\n];\n\n// Our trade fields that can be mapped (only user input fields)\nconst MAPPABLE_FIELDS = USER_INPUT_FIELDS;\n\n// Optimized parsing functions for performance\nconst parseFlexibleNumber = (value: any): number => {\n  if (value === null || value === undefined || value === '') return 0;\n\n  // Fast path for numbers\n  if (typeof value === 'number') return value;\n\n  let stringValue = String(value).trim();\n\n  // Handle Excel errors and special values\n  if (stringValue === '#DIV/0!' || stringValue === '#N/A' || stringValue === '#ERROR!' ||\n      stringValue === '#VALUE!' || stringValue === '#REF!' || stringValue === '#NAME?') {\n    return 0;\n  }\n\n  // Quick check for simple numbers\n  if (/^\\d+\\.?\\d*$/.test(stringValue)) {\n    return parseFloat(stringValue);\n  }\n\n  // Only do complex cleaning if needed\n  stringValue = stringValue\n    .replace(/[₹$€£¥,\\s%]/g, '') // Remove currency symbols, commas, spaces, percentage\n    .replace(/[\"']/g, '') // Remove quotes\n    .replace(/[^\\d.-]/g, ''); // Keep only digits, dots, and minus signs\n\n  // Handle decimal comma (European format)\n  if (/\\d+,\\d{1,2}$/.test(stringValue)) {\n    stringValue = stringValue.replace(',', '.');\n  }\n\n  const parsed = parseFloat(stringValue);\n  return isNaN(parsed) ? 0 : parsed;\n};\n\nconst parseFlexibleDate = (value: any): string | null => {\n  if (!value) return null;\n\n  const stringValue = String(value).trim();\n  if (!stringValue) return null;\n\n  try {\n    // Fast path: try direct Date parsing first\n    let date = new Date(stringValue);\n\n    // If direct parsing worked, validate and return\n    if (!isNaN(date.getTime()) && date.getFullYear() > 1900 && date.getFullYear() < 2100) {\n      return date.toISOString();\n    }\n\n    // Handle common CSV date formats only if direct parsing failed\n    if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(stringValue)) {\n      const [first, second, year] = stringValue.split('/').map(Number);\n      // Assume DD/MM/YYYY if first > 12, otherwise MM/DD/YYYY\n      if (first > 12) {\n        date = new Date(year, second - 1, first);\n      } else {\n        date = new Date(year, first - 1, second);\n      }\n    } else if (/^\\d{5}$/.test(stringValue)) {\n      // Excel serial date\n      const serialDate = parseInt(stringValue);\n      date = new Date(1900, 0, serialDate - 1);\n    }\n\n    // Final validation\n    if (!isNaN(date.getTime()) && date.getFullYear() > 1900 && date.getFullYear() < 2100) {\n      return date.toISOString();\n    }\n  } catch (error) {\n    // Silently fail for performance\n  }\n\n  return null;\n};\n\nexport const TradeUploadModal: React.FC<TradeUploadModalProps> = ({\n  isOpen,\n  onOpenChange,\n  onImport,\n  portfolioSize = 100000,\n  getPortfolioSize\n}) => {\n  // Upload functionality is now enabled\n  const isUploadDisabled = false;\n  const [step, setStep] = useState<'upload' | 'dateFormat' | 'mapping' | 'preview' | 'importing'>('upload');\n  const [parsedData, setParsedData] = useState<ParsedData | null>(null);\n  const [columnMapping, setColumnMapping] = useState<ColumnMapping>({});\n  const [mappingConfidence, setMappingConfidence] = useState<MappingConfidence>({});\n  const [previewTrades, setPreviewTrades] = useState<Trade[]>([]);\n  const [importProgress, setImportProgress] = useState(0);\n  const [dragActive, setDragActive] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedDateFormat, setSelectedDateFormat] = useState<string>('auto');\n\n  // Date format options\n  const dateFormatOptions = [\n    { value: 'auto', label: 'Auto-detect (Recommended)', example: 'Various formats', description: 'Let the system automatically detect your date format' },\n    { value: 'iso', label: 'ISO Format', example: '2024-01-15', description: 'Year-Month-Day with dashes' },\n    { value: 'dmy_slash', label: 'DD/MM/YYYY', example: '15/01/2024', description: 'Day/Month/Year with slashes' },\n    { value: 'mdy_slash', label: 'MM/DD/YYYY', example: '01/15/2024', description: 'Month/Day/Year with slashes (US format)' },\n    { value: 'dmy_dash', label: 'DD-MM-YYYY', example: '15-01-2024', description: 'Day-Month-Year with dashes' },\n    { value: 'dmy_dot', label: 'DD.MM.YYYY', example: '15.01.2024', description: 'Day.Month.Year with dots' },\n    { value: 'dmy_text_full', label: 'DD MMM YYYY', example: '24 Jul 2024', description: 'Day Month Year with text month' },\n    { value: 'dmy_text_short', label: 'DD MMM YY', example: '24 Jul 24', description: 'Day Month Year (2-digit year) with text month' },\n    { value: 'dmy_text_no_year', label: 'DD MMM', example: '24 Jul', description: 'Day Month only (current year assumed)' },\n    { value: 'mdy_text_full', label: 'MMM DD, YYYY', example: 'Jul 24, 2024', description: 'Month Day, Year with text month (US format)' },\n    { value: 'mdy_text_short', label: 'MMM DD YY', example: 'Jul 24 24', description: 'Month Day Year (2-digit year) with text month' },\n  ];\n\n  // Month name mappings for text-based dates\n  const monthNames = {\n    'jan': 0, 'january': 0,\n    'feb': 1, 'february': 1,\n    'mar': 2, 'march': 2,\n    'apr': 3, 'april': 3,\n    'may': 4,\n    'jun': 5, 'june': 5,\n    'jul': 6, 'july': 6,\n    'aug': 7, 'august': 7,\n    'sep': 8, 'september': 8, 'sept': 8,\n    'oct': 9, 'october': 9,\n    'nov': 10, 'november': 10,\n    'dec': 11, 'december': 11\n  };\n\n  // Robust date parsing function to handle various date formats\n  const parseDate = useCallback((dateStr: string, formatHint?: string): string | null => {\n    if (!dateStr || typeof dateStr !== 'string') return null;\n\n    const cleanDateStr = String(dateStr).trim();\n    if (!cleanDateStr) return null;\n\n    const format = formatHint || selectedDateFormat;\n\n    // If user specified a specific format, try that first\n    if (format !== 'auto') {\n      try {\n        let parsedDate: Date;\n\n        switch (format) {\n          case 'iso': {\n            // YYYY-MM-DD\n            const parts = cleanDateStr.split(/[\\/\\-\\.]/);\n            if (parts.length === 3) {\n              const [part1, part2, part3] = parts.map(p => parseInt(p, 10));\n              parsedDate = new Date(part1, part2 - 1, part3);\n            } else {\n              parsedDate = new Date(cleanDateStr);\n            }\n            break;\n          }\n          case 'dmy_slash':\n          case 'dmy_dash':\n          case 'dmy_dot': {\n            // DD/MM/YYYY, DD-MM-YYYY, DD.MM.YYYY\n            const parts = cleanDateStr.split(/[\\/\\-\\.]/);\n            if (parts.length === 3) {\n              const [part1, part2, part3] = parts.map(p => parseInt(p, 10));\n              parsedDate = new Date(part3, part2 - 1, part1);\n            } else {\n              parsedDate = new Date(cleanDateStr);\n            }\n            break;\n          }\n          case 'mdy_slash': {\n            // MM/DD/YYYY\n            const parts = cleanDateStr.split(/[\\/\\-\\.]/);\n            if (parts.length === 3) {\n              const [part1, part2, part3] = parts.map(p => parseInt(p, 10));\n              parsedDate = new Date(part3, part1 - 1, part2);\n            } else {\n              parsedDate = new Date(cleanDateStr);\n            }\n            break;\n          }\n          case 'dmy_text_full': {\n            // DD MMM YYYY (e.g., \"24 Jul 2024\")\n            const parts = cleanDateStr.split(/\\s+/);\n            if (parts.length === 3) {\n              const day = parseInt(parts[0], 10);\n              const monthName = parts[1].toLowerCase();\n              const year = parseInt(parts[2], 10);\n              const month = monthNames[monthName as keyof typeof monthNames];\n              if (month !== undefined) {\n                parsedDate = new Date(year, month, day);\n              } else {\n                parsedDate = new Date(cleanDateStr);\n              }\n            } else {\n              parsedDate = new Date(cleanDateStr);\n            }\n            break;\n          }\n          case 'dmy_text_short': {\n            // DD MMM YY (e.g., \"24 Jul 24\")\n            const parts = cleanDateStr.split(/\\s+/);\n            if (parts.length === 3) {\n              const day = parseInt(parts[0], 10);\n              const monthName = parts[1].toLowerCase();\n              let year = parseInt(parts[2], 10);\n              // Convert 2-digit year to 4-digit (assume 2000s for 00-30, 1900s for 31-99)\n              if (year <= 30) year += 2000;\n              else if (year < 100) year += 1900;\n              const month = monthNames[monthName as keyof typeof monthNames];\n              if (month !== undefined) {\n                parsedDate = new Date(year, month, day);\n              } else {\n                parsedDate = new Date(cleanDateStr);\n              }\n            } else {\n              parsedDate = new Date(cleanDateStr);\n            }\n            break;\n          }\n          case 'dmy_text_no_year': {\n            // DD MMM (e.g., \"24 Jul\") - assume current year\n            const parts = cleanDateStr.split(/\\s+/);\n            if (parts.length === 2) {\n              const day = parseInt(parts[0], 10);\n              const monthName = parts[1].toLowerCase();\n              const year = new Date().getFullYear(); // Use current year\n              const month = monthNames[monthName as keyof typeof monthNames];\n              if (month !== undefined) {\n                parsedDate = new Date(year, month, day);\n              } else {\n                parsedDate = new Date(cleanDateStr);\n              }\n            } else {\n              parsedDate = new Date(cleanDateStr);\n            }\n            break;\n          }\n          case 'mdy_text_full': {\n            // MMM DD, YYYY (e.g., \"Jul 24, 2024\")\n            const parts = cleanDateStr.replace(',', '').split(/\\s+/);\n            if (parts.length === 3) {\n              const monthName = parts[0].toLowerCase();\n              const day = parseInt(parts[1], 10);\n              const year = parseInt(parts[2], 10);\n              const month = monthNames[monthName as keyof typeof monthNames];\n              if (month !== undefined) {\n                parsedDate = new Date(year, month, day);\n              } else {\n                parsedDate = new Date(cleanDateStr);\n              }\n            } else {\n              parsedDate = new Date(cleanDateStr);\n            }\n            break;\n          }\n          case 'mdy_text_short': {\n            // MMM DD YY (e.g., \"Jul 24 24\")\n            const parts = cleanDateStr.split(/\\s+/);\n            if (parts.length === 3) {\n              const monthName = parts[0].toLowerCase();\n              const day = parseInt(parts[1], 10);\n              let year = parseInt(parts[2], 10);\n              // Convert 2-digit year to 4-digit\n              if (year <= 30) year += 2000;\n              else if (year < 100) year += 1900;\n              const month = monthNames[monthName as keyof typeof monthNames];\n              if (month !== undefined) {\n                parsedDate = new Date(year, month, day);\n              } else {\n                parsedDate = new Date(cleanDateStr);\n              }\n            } else {\n              parsedDate = new Date(cleanDateStr);\n            }\n            break;\n          }\n          default:\n            parsedDate = new Date(cleanDateStr);\n        }\n\n        if (!isNaN(parsedDate.getTime())) {\n          return parsedDate.toISOString().split('T')[0];\n        }\n      } catch (error) {\n        }\n    }\n\n    // Fallback to auto-detection if specific format fails or auto is selected\n    // Try parsing as-is first (for ISO dates)\n    let parsedDate = new Date(cleanDateStr);\n    if (!isNaN(parsedDate.getTime())) {\n      return parsedDate.toISOString().split('T')[0];\n    }\n\n    // Try text-based date formats first (more specific)\n    const textParts = cleanDateStr.split(/\\s+/);\n    if (textParts.length >= 2) {\n      const firstPart = textParts[0];\n      const secondPart = textParts[1];\n\n      // Check if second part looks like a month name\n      const monthName = secondPart.toLowerCase();\n      if (monthNames[monthName as keyof typeof monthNames] !== undefined) {\n        const month = monthNames[monthName as keyof typeof monthNames];\n        const day = parseInt(firstPart, 10);\n\n        if (textParts.length === 3) {\n          // DD MMM YYYY or DD MMM YY\n          let year = parseInt(textParts[2], 10);\n          if (year <= 30) year += 2000;\n          else if (year < 100) year += 1900;\n\n          parsedDate = new Date(year, month, day);\n          if (!isNaN(parsedDate.getTime())) {\n            return parsedDate.toISOString().split('T')[0];\n          }\n        } else if (textParts.length === 2) {\n          // DD MMM (assume current year)\n          const year = new Date().getFullYear();\n          parsedDate = new Date(year, month, day);\n          if (!isNaN(parsedDate.getTime())) {\n            return parsedDate.toISOString().split('T')[0];\n          }\n        }\n      }\n\n      // Check if first part looks like a month name (US format)\n      const firstMonthName = firstPart.toLowerCase();\n      if (monthNames[firstMonthName as keyof typeof monthNames] !== undefined) {\n        const month = monthNames[firstMonthName as keyof typeof monthNames];\n        const day = parseInt(secondPart.replace(',', ''), 10);\n\n        if (textParts.length === 3) {\n          // MMM DD, YYYY or MMM DD YY\n          let year = parseInt(textParts[2], 10);\n          if (year <= 30) year += 2000;\n          else if (year < 100) year += 1900;\n\n          parsedDate = new Date(year, month, day);\n          if (!isNaN(parsedDate.getTime())) {\n            return parsedDate.toISOString().split('T')[0];\n          }\n        }\n      }\n    }\n\n    // Try numeric date formats\n    const parts = cleanDateStr.split(/[\\/\\-\\.]/);\n    if (parts.length === 3) {\n      const [part1, part2, part3] = parts.map(p => parseInt(p, 10));\n\n      // If year is clearly identifiable (4 digits)\n      if (part3 > 1900) {\n        // DD/MM/YYYY format (try first - more common internationally)\n        parsedDate = new Date(part3, part2 - 1, part1);\n        if (!isNaN(parsedDate.getTime()) && part1 <= 31 && part2 <= 12) {\n          return parsedDate.toISOString().split('T')[0];\n        }\n\n        // MM/DD/YYYY format (US format)\n        parsedDate = new Date(part3, part1 - 1, part2);\n        if (!isNaN(parsedDate.getTime()) && part2 <= 31 && part1 <= 12) {\n          return parsedDate.toISOString().split('T')[0];\n        }\n      } else if (part1 > 1900) {\n        // YYYY/MM/DD format\n        parsedDate = new Date(part1, part2 - 1, part3);\n        if (!isNaN(parsedDate.getTime()) && part3 <= 31 && part2 <= 12) {\n          return parsedDate.toISOString().split('T')[0];\n        }\n      }\n    }\n\n    return null;\n  }, [selectedDateFormat]);\n\n  // Function to recalculate all auto-populated fields for a trade\n  // NOTE: CMP will be auto-fetched from API when trade name is set, not imported from CSV\n  const recalculateTradeFields = useCallback((trade: Trade): Trade => {\n    // Get portfolio size for the trade date\n    const tradeDate = new Date(trade.date);\n    const month = tradeDate.toLocaleString('default', { month: 'short' });\n    const year = tradeDate.getFullYear();\n    const tradePortfolioSize = getPortfolioSize ? getPortfolioSize(month, year) : portfolioSize;\n\n    // Gather all entry lots (initial + pyramids)\n    const allEntries = [\n      { price: trade.entry, qty: trade.initialQty },\n      ...(trade.pyramid1Price && trade.pyramid1Qty ? [{ price: trade.pyramid1Price, qty: trade.pyramid1Qty }] : []),\n      ...(trade.pyramid2Price && trade.pyramid2Qty ? [{ price: trade.pyramid2Price, qty: trade.pyramid2Qty }] : [])\n    ].filter(e => e.price > 0 && e.qty > 0);\n\n    // Gather all exit lots with dates\n    const allExits = [\n      ...(trade.exit1Price && trade.exit1Qty ? [{\n        price: trade.exit1Price,\n        qty: trade.exit1Qty,\n        date: trade.exit1Date || trade.date\n      }] : []),\n      ...(trade.exit2Price && trade.exit2Qty ? [{\n        price: trade.exit2Price,\n        qty: trade.exit2Qty,\n        date: trade.exit2Date || trade.date\n      }] : []),\n      ...(trade.exit3Price && trade.exit3Qty ? [{\n        price: trade.exit3Price,\n        qty: trade.exit3Qty,\n        date: trade.exit3Date || trade.date\n      }] : [])\n    ].filter(e => e.price > 0 && e.qty > 0);\n\n    // Calculate derived values\n    const totalInitialQty = allEntries.reduce((sum, e) => sum + e.qty, 0);\n    const avgEntry = calcAvgEntry(allEntries);\n    const positionSize = calcPositionSize(avgEntry, totalInitialQty);\n    const allocation = calcAllocation(positionSize, tradePortfolioSize);\n    const slPercent = calcSLPercent(trade.sl, trade.entry);\n\n    const exitedQty = allExits.reduce((sum, e) => sum + e.qty, 0);\n    const openQty = Math.max(0, totalInitialQty - exitedQty);\n    const avgExitPrice = calcAvgExitPrice(allExits);\n\n    // Determine position status\n    let positionStatus: 'Open' | 'Closed' | 'Partial' = trade.positionStatus || 'Open';\n    if (exitedQty === 0) {\n      positionStatus = 'Open';\n    } else if (exitedQty >= totalInitialQty) {\n      positionStatus = 'Closed';\n    } else {\n      positionStatus = 'Partial';\n    }\n\n    const stockMove = calcStockMove(\n      avgEntry,\n      avgExitPrice,\n      trade.cmp,\n      openQty,\n      exitedQty,\n      positionStatus,\n      trade.buySell\n    );\n\n    const rewardRisk = calcRewardRisk(\n      trade.cmp || avgExitPrice || trade.entry,\n      trade.entry,\n      trade.sl,\n      positionStatus,\n      avgExitPrice,\n      openQty,\n      exitedQty,\n      trade.buySell\n    );\n\n    const holdingDays = calcHoldingDays(\n      trade.date,\n      allExits.length > 0 ? allExits[allExits.length - 1].date : trade.date\n    );\n\n    const realisedAmount = calcRealisedAmount(exitedQty, avgExitPrice);\n\n    // Calculate P/L using FIFO method\n    const entryLotsForFifo = allEntries.map(e => ({ price: e.price, qty: e.qty }));\n    const exitLotsForFifo = allExits.map(e => ({ price: e.price, qty: e.qty }));\n    const plRs = exitedQty > 0 ? calcRealizedPL_FIFO(entryLotsForFifo, exitLotsForFifo, trade.buySell as 'Buy' | 'Sell') : 0;\n\n    // Note: PF Impact calculation in upload modal uses entry date portfolio size\n    // This is acceptable for initial calculation as accounting method-specific\n    // recalculation will happen in the main trade processing pipeline\n    const pfImpact = calcPFImpact(plRs, tradePortfolioSize);\n\n    return {\n      ...trade,\n      avgEntry,\n      positionSize,\n      allocation,\n      slPercent,\n      openQty,\n      exitedQty,\n      avgExitPrice,\n      stockMove,\n      rewardRisk,\n      holdingDays,\n      positionStatus,\n      realisedAmount,\n      plRs,\n      pfImpact,\n      cummPf: 0, // This would need to be calculated across all trades\n      openHeat: 0 // This would need portfolio context\n    };\n  }, [portfolioSize, getPortfolioSize]);\n\n  // Smart column mapping based on header similarity AND data content validation\n  const generateSmartMapping = useCallback((headers: string[]): { mapping: ColumnMapping; confidence: MappingConfidence } => {\n    const mapping: ColumnMapping = {};\n    const confidence: MappingConfidence = {};\n\n    // Helper function to check if a column has meaningful data\n    const hasValidData = (columnIndex: number): boolean => {\n      if (!parsedData || columnIndex >= headers.length) return false;\n\n      // Check first 10 rows to see if column has any non-empty, meaningful data\n      const sampleRows = parsedData.rows.slice(0, 10);\n      let nonEmptyCount = 0;\n\n      for (const row of sampleRows) {\n        const value = row[columnIndex];\n        if (value !== null && value !== undefined && String(value).trim() !== '' &&\n            String(value).trim() !== '#DIV/0!' && String(value).trim() !== '#N/A') {\n          nonEmptyCount++;\n        }\n      }\n\n      // Column should have data in at least 30% of sample rows to be considered valid\n      return nonEmptyCount >= Math.max(1, Math.ceil(sampleRows.length * 0.3));\n    };\n\n    // Enhanced similarity mapping - ONLY for user input fields (auto-populated fields excluded)\n    // Special handling for your users' exact CSV format with parentheses and currency symbols\n    const similarityMap: { [key: string]: string[] } = {\n      'tradeNo': ['trade no', 'trade number', 'trade id', 'id', 'sr no', 'serial', 'trade #', '#', 'trade no.'],\n      'date': ['date', 'entry date', 'trade date', 'timestamp', 'entry dt', 'dt'],\n      'name': ['name', 'stock', 'symbol', 'stock name', 'company', 'scrip', 'ticker', 'instrument'],\n      'setup': ['setup', 'strategy', 'pattern', 'setup type', 'trade setup', 'setup name'],\n      'buySell': ['buy/sell', 'buysell', 'side', 'action', 'transaction type', 'buy sell', 'direction', 'buy/ sell'],\n      'entry': ['entry', 'entry price', 'buy price', 'price', 'entry rate', 'buy rate', 'entry (₹)', 'entry (rs)', 'entry(₹)'],\n      'avgEntry': ['avg entry', 'avg. entry', 'average entry', 'avg entry (₹)', 'avg. entry (₹)', 'average entry (₹)'],\n      'sl': ['sl', 'stop loss', 'stoploss', 'stop', 'sl price', 'stop price', 'sl (₹)', 'sl(₹)'],\n      'slPercent': ['sl %', 'sl percent', 'sl percentage', 'stop loss %', 'stop loss percent'],\n      'tsl': ['tsl', 'trailing sl', 'trailing stop', 'trail sl', 'trailing stop loss', 'tsl (₹)', 'tsl(₹)'],\n      'cmp': ['cmp', 'current price', 'market price', 'ltp', 'last traded price', 'cmp (₹)', 'cmp(₹)'],\n      'initialQty': ['qty', 'quantity', 'initial qty', 'shares', 'units', 'volume', 'size', 'initial qty', 'base qty'],\n      'pyramid1Price': ['p1 price', 'p1 price (₹)', 'p1 price(₹)', 'pyramid 1 price', 'p-1 price', 'pyramid1 price', 'pyr1 price'],\n      'pyramid1Qty': ['p1 qty', 'pyramid 1 qty', 'p-1 qty', 'pyramid1 qty', 'pyr1 qty'],\n      'pyramid1Date': ['p1 date', 'pyramid 1 date', 'p-1 date', 'pyramid1 date', 'pyr1 date'],\n      'pyramid2Price': ['p2 price', 'p2 price (₹)', 'p2 price(₹)', 'pyramid 2 price', 'p-2 price', 'pyramid2 price', 'pyr2 price'],\n      'pyramid2Qty': ['p2 qty', 'pyramid 2 qty', 'p-2 qty', 'pyramid2 qty', 'pyr2 qty'],\n      'pyramid2Date': ['p2 date', 'pyramid 2 date', 'p-2 date', 'pyramid2 date', 'pyr2 date'],\n      'positionSize': ['pos. size', 'position size', 'pos size', 'position value', 'pos. value'],\n      'allocation': ['allocation', 'allocation (%)', 'allocation(%)', 'allocation %', 'alloc %', 'alloc (%)'],\n      'exit1Price': ['e1 price', 'e1 price (₹)', 'e1 price(₹)', 'exit 1 price', 'exit1 price', 'sell 1 price', 'exit price'],\n      'exit1Qty': ['e1 qty', 'exit 1 qty', 'exit1 qty', 'sell 1 qty', 'exit qty'],\n      'exit1Date': ['e1 date', 'exit 1 date', 'exit1 date', 'sell 1 date', 'exit date'],\n      'exit2Price': ['e2 price', 'e2 price (₹)', 'e2 price(₹)', 'exit 2 price', 'exit2 price', 'sell 2 price'],\n      'exit2Qty': ['e2 qty', 'exit 2 qty', 'exit2 qty', 'sell 2 qty'],\n      'exit2Date': ['e2 date', 'exit 2 date', 'exit2 date', 'sell 2 date'],\n      'exit3Price': ['e3 price', 'e3 price (₹)', 'e3 price(₹)', 'exit 3 price', 'exit3 price', 'sell 3 price'],\n      'exit3Qty': ['e3 qty', 'exit 3 qty', 'exit3 qty', 'sell 3 qty'],\n      'exit3Date': ['e3 date', 'exit 3 date', 'exit3 date', 'sell 3 date'],\n      'openQty': ['open qty', 'open quantity', 'remaining qty', 'balance qty'],\n      'exitedQty': ['exited qty', 'exited quantity', 'sold qty', 'closed qty'],\n      'avgExitPrice': ['avg exit', 'avg. exit', 'average exit', 'avg exit (₹)', 'avg. exit (₹)', 'average exit (₹)'],\n      'stockMove': ['stock move', 'stock move (%)', 'stock move(%)', 'stock move %', 'price move %'],\n      'openHeat': ['open heat', 'open heat (%)', 'open heat(%)', 'open heat %', 'heat %'],\n      'rewardRisk': ['r:r', 'reward:risk', 'reward risk', 'rr', 'r/r'],\n      'holdingDays': ['holding days', 'days', 'hold days', 'duration'],\n      'positionStatus': ['status', 'position status', 'trade status'],\n      'realisedAmount': ['realized amount', 'realised amount', 'realized amt', 'realised amt'],\n      'plRs': ['realized p/l', 'realised p/l', 'realized p/l (₹)', 'realised p/l (₹)', 'p/l', 'pnl'],\n      'pfImpact': ['pf impact', 'pf impact (%)', 'pf impact(%)', 'pf impact %', 'portfolio impact %'],\n      'cummPf': ['cumm. pf', 'cumm pf', 'cumm. pf (%)', 'cumm pf (%)', 'cumulative pf %'],\n      'planFollowed': ['plan followed', 'plan followed?', 'followed plan'],\n      'exitTrigger': ['exit trigger', 'trigger', 'exit reason'],\n      'proficiencyGrowthAreas': ['growth areas', 'proficiency', 'improvement areas'],\n      'notes': ['notes', 'comments', 'remarks', 'description', 'memo', 'observation', 'note']\n    };\n\n    // Function to calculate similarity score between two strings\n    const calculateSimilarity = (str1: string, str2: string): number => {\n      const s1 = str1.toLowerCase().trim();\n      const s2 = str2.toLowerCase().trim();\n\n      // Exact match\n      if (s1 === s2) return 100;\n\n      // Contains match\n      if (s1.includes(s2) || s2.includes(s1)) return 80;\n\n      // Remove common separators, newlines, currency symbols, and special characters for better matching\n      const clean1 = s1.replace(/[-_\\s\\n\\r\\/\\(\\)\\.\\?:₹%]/g, '');\n      const clean2 = s2.replace(/[-_\\s\\n\\r\\/\\(\\)\\.\\?:₹%]/g, '');\n      if (clean1 === clean2) return 95;\n      if (clean1.includes(clean2) || clean2.includes(clean1)) return 85;\n\n      // Handle multi-line headers by removing newlines and extra spaces\n      const normalized1 = s1.replace(/\\s+/g, ' ').replace(/\\n/g, ' ');\n      const normalized2 = s2.replace(/\\s+/g, ' ').replace(/\\n/g, ' ');\n      if (normalized1 === normalized2) return 90;\n      if (normalized1.includes(normalized2) || normalized2.includes(normalized1)) return 75;\n\n      // Word-based matching with better tokenization including currency symbols\n      const words1 = s1.split(/[-_\\s\\n\\r\\/\\(\\)\\.\\?:₹%]+/).filter(w => w.length > 0);\n      const words2 = s2.split(/[-_\\s\\n\\r\\/\\(\\)\\.\\?:₹%]+/).filter(w => w.length > 0);\n      const commonWords = words1.filter(word => words2.includes(word));\n      if (commonWords.length > 0) {\n        return (commonWords.length / Math.max(words1.length, words2.length)) * 60;\n      }\n\n      return 0;\n    };\n\n    // Special context-aware mapping for ambiguous \"Date\" columns\n    const mapDateColumnsWithContext = () => {\n      const dateColumns: Array<{header: string, index: number}> = [];\n\n      // Find all \"Date\" columns with their positions\n      headers.forEach((header, index) => {\n        if (header.toLowerCase().trim() === 'date') {\n          dateColumns.push({ header, index });\n        }\n      });\n\n      if (dateColumns.length > 1) {\n        // Multiple \"Date\" columns - use context and position to map them\n        dateColumns.forEach((dateCol, arrayIndex) => {\n          const colIndex = dateCol.index;\n\n          // Look at previous 2 columns for better context\n          const prev1Col = colIndex > 0 ? headers[colIndex - 1]?.toLowerCase().trim() : '';\n          const prev2Col = colIndex > 1 ? headers[colIndex - 2]?.toLowerCase().trim() : '';\n\n          // Map based on context and position\n          if (arrayIndex === 0 && colIndex < 10) {\n            // First \"Date\" column early in the CSV is likely the main trade date\n            if (!mapping['date']) {\n              mapping['date'] = dateCol.header;\n              confidence['date'] = 95;\n            }\n          } else {\n            // Subsequent \"Date\" columns - check context\n            if (prev1Col.includes('qty') && (prev2Col.includes('exit-1') || prev2Col.includes('e1') || prev1Col.includes('exit'))) {\n              if (!mapping['exit1Date']) {\n                mapping['exit1Date'] = dateCol.header;\n                confidence['exit1Date'] = 90;\n              }\n            } else if (prev1Col.includes('qty') && (prev2Col.includes('exit-2') || prev2Col.includes('e2'))) {\n              if (!mapping['exit2Date']) {\n                mapping['exit2Date'] = dateCol.header;\n                confidence['exit2Date'] = 90;\n              }\n            } else if (prev1Col.includes('qty') && (prev2Col.includes('exit-3') || prev2Col.includes('e3'))) {\n              if (!mapping['exit3Date']) {\n                mapping['exit3Date'] = dateCol.header;\n                confidence['exit3Date'] = 90;\n              }\n            } else if (prev1Col.includes('qty') && prev2Col.includes('p-1')) {\n              if (!mapping['pyramid1Date']) {\n                mapping['pyramid1Date'] = dateCol.header;\n                confidence['pyramid1Date'] = 90;\n              }\n            } else if (prev1Col.includes('qty') && prev2Col.includes('p-2')) {\n              if (!mapping['pyramid2Date']) {\n                mapping['pyramid2Date'] = dateCol.header;\n                confidence['pyramid2Date'] = 90;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    // Apply context-aware date mapping first\n    mapDateColumnsWithContext();\n\n    // Enhanced sequential pattern detection for exit/pyramid columns\n    // Specifically designed for your users' CSV format\n    const detectSequentialPatterns = () => {\n      // Look for exact patterns from your users' CSV format\n      const exitPatterns = [\n        { prefix: 'e1', fields: ['exit1Price', 'exit1Qty', 'exit1Date'] },\n        { prefix: 'e2', fields: ['exit2Price', 'exit2Qty', 'exit2Date'] },\n        { prefix: 'e3', fields: ['exit3Price', 'exit3Qty', 'exit3Date'] },\n        { prefix: 'p1', fields: ['pyramid1Price', 'pyramid1Qty', 'pyramid1Date'] },\n        { prefix: 'p2', fields: ['pyramid2Price', 'pyramid2Qty', 'pyramid2Date'] }\n      ];\n\n      exitPatterns.forEach(pattern => {\n        const matchingHeaders: Array<{header: string, index: number, type: 'price' | 'qty' | 'date'}> = [];\n\n        headers.forEach((header, index) => {\n          const cleanHeader = header.toLowerCase().trim()\n            .replace(/\\s+/g, ' ')\n            .replace(/\\n/g, ' ')\n            .replace(/[₹()]/g, '') // Remove currency symbols and parentheses\n            .replace(/\\./g, ''); // Remove periods\n\n          if (cleanHeader.includes(pattern.prefix.toLowerCase())) {\n            if (cleanHeader.includes('price') || cleanHeader.includes('rate')) {\n              matchingHeaders.push({header, index, type: 'price'});\n            } else if (cleanHeader.includes('qty') || cleanHeader.includes('quantity')) {\n              matchingHeaders.push({header, index, type: 'qty'});\n            } else if (cleanHeader.includes('date') || cleanHeader.includes('dt')) {\n              matchingHeaders.push({header, index, type: 'date'});\n            }\n          }\n        });\n\n        // Map the detected headers to appropriate fields\n        matchingHeaders.forEach(match => {\n          let targetField = '';\n          if (match.type === 'price') targetField = pattern.fields[0];\n          else if (match.type === 'qty') targetField = pattern.fields[1];\n          else if (match.type === 'date') targetField = pattern.fields[2];\n\n          if (targetField && !mapping[targetField] && hasValidData(match.index)) {\n            mapping[targetField] = match.header;\n            confidence[targetField] = 95;\n            console.log('Sequential pattern mapped:', targetField, 'to', match.header);\n          }\n        });\n      });\n    };\n\n    // Apply sequential pattern detection\n    detectSequentialPatterns();\n\n    // For each field, find the best matching header (skip if already mapped)\n    Object.entries(similarityMap).forEach(([field, keywords]) => {\n      // Skip if already mapped by context-aware function or sequential detection\n      if (mapping[field]) return;\n\n      let bestMatch = '';\n      let bestScore = 0;\n\n      headers.forEach((header, headerIndex) => {\n        keywords.forEach(keyword => {\n          const score = calculateSimilarity(header, keyword);\n          if (score > bestScore && score >= 70) { // Reduced threshold to 70% for better matching\n            // Additional validation: check if this column actually has data\n            if (hasValidData(headerIndex)) {\n              bestScore = score;\n              bestMatch = header;\n            }\n          }\n        });\n      });\n\n      if (bestMatch && !Object.values(mapping).includes(bestMatch)) {\n        mapping[field] = bestMatch;\n        confidence[field] = bestScore;\n        console.log('Mapped field:', field, 'to column:', bestMatch, 'with confidence:', bestScore);\n      }\n    });\n\n    return { mapping, confidence };\n  }, [parsedData]);\n\n  const handleFileUpload = useCallback((file: File) => {\n    setError(null); // Clear any previous errors\n    const fileExtension = file.name.split('.').pop()?.toLowerCase();\n\n    if (fileExtension === 'csv') {\n      Papa.parse(file, {\n        complete: (results) => {\n          try {\n            if (results.errors && results.errors.length > 0) {\n              }\n\n            if (results.data && results.data.length > 0) {\n              const headers = results.data[0] as string[];\n              const rows = results.data.slice(1) as any[][];\n\n              // Filter out completely empty rows and clean headers\n              const cleanHeaders = headers\n                .filter(h => h && String(h).trim() !== '')\n                .map(h => String(h)\n                  .replace(/\\n/g, ' ') // Replace newlines with spaces\n                  .replace(/\\r/g, ' ') // Replace carriage returns with spaces\n                  .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n                  .trim()\n                );\n              const cleanRows = rows.filter(row => {\n                // Keep row if it has at least one non-empty, non-whitespace cell\n                return row.some(cell =>\n                  cell !== null &&\n                  cell !== undefined &&\n                  String(cell).trim() !== '' &&\n                  String(cell).toLowerCase() !== 'stock name'\n                );\n              });\n\n              if (cleanHeaders.length === 0) {\n                setError('No valid columns found in the CSV file. Please check your file format.');\n                return;\n              }\n\n              if (cleanRows.length === 0) {\n                setError('No valid data rows found in the CSV file. Please check your file content.');\n                return;\n              }\n\n              setParsedData({\n                headers: cleanHeaders,\n                rows: cleanRows,\n                fileName: file.name\n              });\n\n              const smartMapping = generateSmartMapping(cleanHeaders);\n              setColumnMapping(smartMapping.mapping);\n              setMappingConfidence(smartMapping.confidence);\n\n              // Check if there are any date columns mapped\n              const hasDateColumns = Object.keys(smartMapping.mapping).some(key => key.includes('Date') || key === 'date');\n\n              if (hasDateColumns) {\n                setStep('dateFormat');\n              } else {\n                setStep('mapping');\n              }\n            } else {\n              setError('The CSV file appears to be empty or invalid. Please check your file.');\n            }\n          } catch (error) {\n            setError('Failed to process the CSV file. Please check the file format and try again.');\n          }\n        },\n        header: false,\n        skipEmptyLines: true,\n        transform: (value) => {\n          // Minimal cleaning for performance\n          if (typeof value === 'string') {\n            return value.trim().replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n          }\n          return value;\n        },\n        dynamicTyping: false, // Disable automatic type conversion for better control\n        fastMode: true, // Enable fast mode for better performance\n        error: (error) => {\n          setError('CSV parsing failed: ' + error.message);\n        }\n      });\n    } else if (fileExtension === 'xlsx' || fileExtension === 'xls') {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const data = new Uint8Array(e.target?.result as ArrayBuffer);\n          const workbook = XLSX.read(data, { type: 'array' });\n          const sheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[sheetName];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }) as any[][];\n\n          if (jsonData.length > 0) {\n            const headers = jsonData[0] as string[];\n            const rows = jsonData.slice(1);\n\n            // Filter out completely empty rows and clean headers\n            const cleanHeaders = headers\n              .filter(h => h && String(h).trim() !== '')\n              .map(h => String(h)\n                .replace(/\\n/g, ' ') // Replace newlines with spaces\n                .replace(/\\r/g, ' ') // Replace carriage returns with spaces\n                .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n                .trim()\n              );\n            const cleanRows = rows.filter(row => {\n              // Keep row if it has at least one non-empty, non-whitespace cell\n              return row.some(cell =>\n                cell !== null &&\n                cell !== undefined &&\n                String(cell).trim() !== '' &&\n                String(cell).toLowerCase() !== 'stock name'\n              );\n            });\n\n            setParsedData({\n              headers: cleanHeaders,\n              rows: cleanRows,\n              fileName: file.name\n            });\n\n            const smartMapping = generateSmartMapping(cleanHeaders);\n            setColumnMapping(smartMapping.mapping);\n            setMappingConfidence(smartMapping.confidence);\n\n            // Check if there are any date columns mapped\n            const hasDateColumns = Object.keys(smartMapping.mapping).some(key => key.includes('Date') || key === 'date');\n\n            if (hasDateColumns) {\n              setStep('dateFormat');\n            } else {\n              setStep('mapping');\n            }\n          }\n        } catch (error) {\n          setError('Excel parsing failed: ' + (error instanceof Error ? error.message : 'Unknown error'));\n        }\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  }, [generateSmartMapping]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setDragActive(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    const file = files[0];\n\n    if (file && (file.name.endsWith('.csv') || file.name.endsWith('.xlsx') || file.name.endsWith('.xls'))) {\n      handleFileUpload(file);\n    }\n  }, [handleFileUpload]);\n\n  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileUpload(file);\n    }\n  }, [handleFileUpload]);\n\n  // Helper function to check if a trade is completely blank\n  const isTradeCompletelyBlank = useCallback((trade: Partial<Trade>) => {\n    // Check essential fields that indicate a valid trade\n    const essentialFields = [\n      'name', 'entry', 'initialQty', 'date'\n    ];\n\n    // A trade is considered blank if all essential fields are empty/zero\n    return essentialFields.every(field => {\n      const value = trade[field as keyof Trade];\n      if (typeof value === 'string') {\n        return !value || value.trim() === '' || value.toLowerCase() === 'stock name';\n      }\n      if (typeof value === 'number') {\n        return value === 0;\n      }\n      return !value;\n    });\n  }, []);\n\n  // Generate preview trades based on mapping - optimized for speed\n  const generatePreview = useCallback(() => {\n    if (!parsedData) return;\n\n    const trades: Trade[] = [];\n    let validTradeCount = 0;\n\n    // Only process first 10 rows for preview to keep it fast\n    const previewRows = parsedData.rows.slice(0, 10);\n\n    for (const row of previewRows) {\n      if (trades.length >= 5) break;\n      const trade: Partial<Trade> = {\n        id: generateId(),\n        tradeNo: '',\n        date: new Date().toISOString(),\n        name: '',\n        setup: '',\n        buySell: 'Buy',\n        entry: 0,\n        avgEntry: 0,\n        sl: 0,\n        tsl: 0,\n        cmp: 0,\n        initialQty: 0,\n        pyramid1Price: 0,\n        pyramid1Qty: 0,\n        pyramid1Date: '',\n        pyramid2Price: 0,\n        pyramid2Qty: 0,\n        pyramid2Date: '',\n        positionSize: 0,\n        allocation: 0,\n        exit1Price: 0,\n        exit1Qty: 0,\n        exit1Date: '',\n        exit2Price: 0,\n        exit2Qty: 0,\n        exit2Date: '',\n        exit3Price: 0,\n        exit3Qty: 0,\n        exit3Date: '',\n        openQty: 0,\n        exitedQty: 0,\n        avgExitPrice: 0,\n        stockMove: 0,\n        openHeat: 0,\n        rewardRisk: 0,\n        holdingDays: 0,\n        positionStatus: 'Open',\n        realisedAmount: 0,\n        plRs: 0,\n        pfImpact: 0,\n        cummPf: 0,\n        planFollowed: true,\n        exitTrigger: '',\n        proficiencyGrowthAreas: '',\n        baseDuration: '',\n        slPercent: 0,\n        notes: '',\n      };\n\n      // Map values based on column mapping\n      Object.entries(columnMapping).forEach(([field, column]) => {\n        const columnIndex = parsedData.headers.indexOf(column);\n        if (columnIndex !== -1 && row[columnIndex] !== undefined) {\n          const value = row[columnIndex];\n\n          // Type conversion based on field - ONLY for user input fields\n          if (['entry', 'sl', 'tsl', 'pyramid1Price', 'pyramid2Price',\n               'exit1Price', 'exit2Price', 'exit3Price'].includes(field)) {\n            // Enhanced number parsing for cross-platform compatibility\n            const parsedNumber = parseFlexibleNumber(value);\n            (trade as any)[field] = parsedNumber;\n          } else if (['initialQty', 'pyramid1Qty', 'pyramid2Qty', 'exit1Qty', 'exit2Qty', 'exit3Qty'].includes(field)) {\n            // Enhanced quantity parsing for cross-platform compatibility\n            const parsedQuantity = parseFlexibleNumber(value);\n            (trade as any)[field] = Math.round(parsedQuantity); // Quantities should be whole numbers\n          } else if (field === 'buySell') {\n            // Handle Buy/Sell field - normalize common variations\n            const buySellValue = String(value || '').toLowerCase().trim();\n            if (buySellValue === 'b' || buySellValue === 'buy' || buySellValue === 'long') {\n              (trade as any)[field] = 'Buy';\n            } else if (buySellValue === 's' || buySellValue === 'sell' || buySellValue === 'short') {\n              (trade as any)[field] = 'Sell';\n            } else {\n              (trade as any)[field] = 'Buy'; // Default to Buy if unclear\n            }\n          } else if (field === 'planFollowed') {\n            // Handle boolean fields\n            const boolValue = String(value || '').toLowerCase();\n            (trade as any)[field] = boolValue === 'true' || boolValue === 'yes' || boolValue === '1';\n          } else if (field.includes('Date') && value) {\n            // Enhanced date parsing with multiple format support\n            const parsedDate = parseDate(value);\n            (trade as any)[field] = parsedDate || new Date().toISOString().split('T')[0];\n          } else if (field === 'setup') {\n            // Special handling for setup field - reject numeric values\n            const setupValue = String(value || '').trim();\n            // If the value looks like a number (price), don't use it for setup\n            if (setupValue && !(/^\\d+\\.?\\d*$/.test(setupValue))) {\n              (trade as any)[field] = setupValue;\n            } else {\n              (trade as any)[field] = ''; // Leave empty if it's a numeric value\n            }\n          } else {\n            (trade as any)[field] = String(value || '');\n          }\n        }\n      });\n\n      // Only include non-blank trades in preview\n      if (!isTradeCompletelyBlank(trade)) {\n        validTradeCount++;\n        trade.tradeNo = String(validTradeCount);\n        trades.push(recalculateTradeFields(trade as Trade));\n      }\n    }\n\n    setPreviewTrades(trades);\n    setStep('preview');\n  }, [parsedData, columnMapping, recalculateTradeFields, isTradeCompletelyBlank]);\n\n  const handleImport = useCallback(async () => {\n    if (!parsedData) return;\n\n    setStep('importing');\n    setImportProgress(0);\n    setError(null);\n\n    const trades: Trade[] = [];\n    const totalRows = parsedData.rows.length;\n    let validTradeCount = 0;\n    let skippedBlankTrades = 0;\n    let dateParsingErrors: string[] = [];\n\n    // Process in larger chunks for better performance\n    const CHUNK_SIZE = 50; // Process 50 trades at a time\n    const chunks = [];\n\n    // Split rows into chunks\n    for (let i = 0; i < totalRows; i += CHUNK_SIZE) {\n      chunks.push(parsedData.rows.slice(i, i + CHUNK_SIZE));\n    }\n\n    // Process chunks with yielding to prevent UI freezing\n    for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\n      const chunk = chunks[chunkIndex];\n\n      // Process each row in the chunk\n      for (const row of chunk) {\n\n      // Create base trade object\n      const trade: Partial<Trade> = {\n        id: generateId(),\n        tradeNo: '', // Will be set after filtering\n        date: new Date().toISOString(),\n        name: '',\n        setup: '',\n        buySell: 'Buy',\n        entry: 0,\n        avgEntry: 0,\n        sl: 0,\n        tsl: 0,\n        cmp: 0,\n        initialQty: 0,\n        pyramid1Price: 0,\n        pyramid1Qty: 0,\n        pyramid1Date: '',\n        pyramid2Price: 0,\n        pyramid2Qty: 0,\n        pyramid2Date: '',\n        positionSize: 0,\n        allocation: 0,\n        exit1Price: 0,\n        exit1Qty: 0,\n        exit1Date: '',\n        exit2Price: 0,\n        exit2Qty: 0,\n        exit2Date: '',\n        exit3Price: 0,\n        exit3Qty: 0,\n        exit3Date: '',\n        openQty: 0,\n        exitedQty: 0,\n        avgExitPrice: 0,\n        stockMove: 0,\n        openHeat: 0,\n        rewardRisk: 0,\n        holdingDays: 0,\n        positionStatus: 'Open',\n        realisedAmount: 0,\n        plRs: 0,\n        pfImpact: 0,\n        cummPf: 0,\n        planFollowed: true,\n        exitTrigger: '',\n        proficiencyGrowthAreas: '',\n        baseDuration: '',\n        slPercent: 0,\n        notes: '',\n      };\n\n      // Map values based on column mapping\n      Object.entries(columnMapping).forEach(([field, column]) => {\n        const columnIndex = parsedData.headers.indexOf(column);\n        if (columnIndex !== -1 && row[columnIndex] !== undefined) {\n          const value = row[columnIndex];\n\n          // Type conversion based on field - ONLY for user input fields\n          if (['entry', 'sl', 'tsl', 'pyramid1Price', 'pyramid2Price',\n               'exit1Price', 'exit2Price', 'exit3Price'].includes(field)) {\n            // Enhanced number parsing for cross-platform compatibility\n            const parsedNumber = parseFlexibleNumber(value);\n            (trade as any)[field] = parsedNumber;\n          } else if (['initialQty', 'pyramid1Qty', 'pyramid2Qty', 'exit1Qty', 'exit2Qty', 'exit3Qty'].includes(field)) {\n            // Enhanced quantity parsing for cross-platform compatibility\n            const parsedQuantity = parseFlexibleNumber(value);\n            (trade as any)[field] = Math.round(parsedQuantity); // Quantities should be whole numbers\n          } else if (field === 'buySell') {\n            // Handle Buy/Sell field - normalize common variations\n            const buySellValue = String(value || '').toLowerCase().trim();\n            if (buySellValue === 'b' || buySellValue === 'buy' || buySellValue === 'long') {\n              (trade as any)[field] = 'Buy';\n            } else if (buySellValue === 's' || buySellValue === 'sell' || buySellValue === 'short') {\n              (trade as any)[field] = 'Sell';\n            } else {\n              (trade as any)[field] = 'Buy'; // Default to Buy if unclear\n            }\n          } else if (field === 'planFollowed') {\n            // Handle boolean fields\n            const boolValue = String(value || '').toLowerCase();\n            (trade as any)[field] = boolValue === 'true' || boolValue === 'yes' || boolValue === '1';\n          } else if (field.includes('Date') && value) {\n            // Enhanced date parsing with multiple format support\n            const parsedDate = parseDate(value);\n            if (!parsedDate && value) {\n              dateParsingErrors.push('Row ' + (validTradeCount + skippedBlankTrades + 1) + ': Invalid date \"' + value + '\" in ' + field);\n            }\n            (trade as any)[field] = parsedDate || new Date().toISOString().split('T')[0];\n          } else if (field === 'setup') {\n            // Special handling for setup field - reject numeric values\n            const setupValue = String(value || '').trim();\n            // If the value looks like a number (price), don't use it for setup\n            if (setupValue && !(/^\\d+\\.?\\d*$/.test(setupValue))) {\n              (trade as any)[field] = setupValue;\n            } else {\n              (trade as any)[field] = ''; // Leave empty if it's a numeric value\n            }\n          } else {\n            (trade as any)[field] = String(value || '');\n          }\n        }\n      });\n\n        // Check if trade is completely blank and skip if so\n        if (isTradeCompletelyBlank(trade)) {\n          skippedBlankTrades++;\n        } else {\n          // Assign sequential trade number only for valid trades\n          validTradeCount++;\n          trade.tradeNo = String(validTradeCount);\n\n          // Recalculate all auto-populated fields\n          const recalculatedTrade = recalculateTradeFields(trade as Trade);\n          trades.push(recalculatedTrade);\n        }\n      }\n\n      // Update progress after each chunk\n      const processedRows = (chunkIndex + 1) * CHUNK_SIZE;\n      const progress = Math.min((processedRows / totalRows) * 100, 100);\n      setImportProgress(progress);\n\n      // Yield control to browser to prevent freezing\n      if (chunkIndex < chunks.length - 1) {\n        await new Promise(resolve => {\n          if (window.requestIdleCallback) {\n            window.requestIdleCallback(resolve);\n          } else {\n            setTimeout(resolve, 0);\n          }\n        });\n      }\n    }\n\n    // Show date parsing warnings if any\n    if (dateParsingErrors.length > 0) {\n      const errorMessage = 'Import completed with ' + dateParsingErrors.length + ' date parsing warnings. Some dates may have been set to today\\'s date. Check the imported trades and update dates as needed.';\n      setError(errorMessage);\n\n      // Still proceed with import but show warning\n      setTimeout(() => setError(null), 5000); // Clear error after 5 seconds\n    }\n\n    // Import trades\n    onImport(trades);\n\n    setImportProgress(100);\n\n    // Small delay to show completion before closing\n    setTimeout(() => {\n      onOpenChange(false);\n\n      // Reset state\n      setStep('upload');\n      setParsedData(null);\n      setColumnMapping({});\n      setMappingConfidence({});\n      setPreviewTrades([]);\n      setImportProgress(0);\n    }, 1000);\n  }, [parsedData, columnMapping, onImport, onOpenChange, recalculateTradeFields, isTradeCompletelyBlank]);\n\n  const resetModal = useCallback(() => {\n    setStep('upload');\n    setParsedData(null);\n    setColumnMapping({});\n    setMappingConfidence({});\n    setPreviewTrades([]);\n    setImportProgress(0);\n    setError(null);\n    setSelectedDateFormat('auto');\n  }, []);\n\n  // Test function to verify mapping with your exact CSV format\n  const testMappingWithUserFormat = useCallback(() => {\n    const userHeaders = [\n      \"Trade\\nNo.\", \"Date\", \"Name\", \"Entry\", \"Avg\\nEntry\", \"SL\", \"TSL\", \"Buy/\\nSell\", \"CMP\", \"Setup\",\n      \"Base\\n Duration\", \"Initial\\nQTY\", \"Pyramid-1\\nPrice\", \"P-1\\nQTY\", \"P-1\\nDate\", \"Pyramid-2\\nPrice\",\n      \"P-2\\nQTY\", \"P-2\\nDate\", \"Position\\nSize\", \"Allocation\", \"SL\", \"Exit-1\\nPrice\", \"Exit-1\\nQty\",\n      \"Date\", \"Exit-2\\nPrice\", \"Exit-2\\nQty\", \"Date\", \"Exit-3\\nPrice\", \"Exit-3\\nQty\", \"Date\",\n      \"Open \\nQTY\", \"Exited\\nQty\", \"Avg.\\nExit\\nPrice\", \"Stock\\nMove\", \"Open Heat\", \"Reward:\\nRisk\",\n      \"Holding\\n Days\", \"Position\\nStatus\", \"Realised\\nAmount\", \"P/L\\nRs\", \"PF\\nImpact\", \"Cumm\\npf \",\n      \"Plan \\nFollowed?\", \"Exit Trigger\", \"Proficiency\", \"Growth Areas\", \"Note\"\n    ];\n\n    const smartMapping = generateSmartMapping(userHeaders);\n    console.log('Total mappings:', Object.keys(smartMapping.mapping).length);\n    console.log('High confidence mappings:', Object.entries(smartMapping.confidence).filter(([_, conf]) => conf > 90).length);\n    console.log('Medium confidence mappings:', Object.entries(smartMapping.confidence).filter(([_, conf]) => conf >= 70 && conf <= 90).length);\n    return smartMapping;\n  }, [generateSmartMapping]);\n\n  // Show under development banner if upload is disabled\n  if (isUploadDisabled) {\n    return (\n      <Modal\n        isOpen={isOpen}\n        onOpenChange={onOpenChange}\n        size=\"2xl\"\n        classNames={{\n          base: \"max-h-[95vh]\",\n          body: \"p-0\",\n          header: \"border-b border-divider/50\",\n          footer: \"border-t border-divider/50\"\n        }}\n      >\n        <ModalContent>\n          {(onClose) => (\n            <>\n              <ModalHeader className=\"flex flex-col gap-1\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-full bg-default-100 dark:bg-default-200/20\">\n                    <Icon icon=\"lucide:construction\" className=\"text-foreground-600 w-5 h-5\" />\n                  </div>\n                  <h2 className=\"text-xl font-semibold text-foreground-800 dark:text-foreground-200\">\n                    Upload Feature Under Development\n                  </h2>\n                </div>\n              </ModalHeader>\n\n              <ModalBody className=\"p-8\">\n                <div className=\"text-center space-y-6\">\n                  {/* Main Icon */}\n                  <div className=\"flex justify-center\">\n                    <div className=\"relative\">\n                      <div className=\"w-20 h-20 rounded-full bg-default-100 dark:bg-default-200/10 flex items-center justify-center\">\n                        <Icon icon=\"lucide:upload-cloud\" className=\"w-10 h-10 text-foreground-500\" />\n                      </div>\n                      <div className=\"absolute -top-1 -right-1 w-6 h-6 rounded-full bg-primary flex items-center justify-center\">\n                        <Icon icon=\"lucide:wrench\" className=\"w-3 h-3 text-white\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Message */}\n                  <div className=\"space-y-3\">\n                    <h3 className=\"text-xl font-semibold text-foreground-800 dark:text-foreground-200\">\n                      We're Working on Something Better\n                    </h3>\n                    <p className=\"text-foreground-600 dark:text-foreground-400 leading-relaxed max-w-md mx-auto\">\n                      Our CSV/Excel upload feature is getting a major upgrade to make your trade importing experience even better.\n                    </p>\n                  </div>\n\n                  {/* Features Coming Soon */}\n                  <div className=\"bg-default-50 dark:bg-default-100/5 rounded-lg p-6 border border-divider/50\">\n                    <h4 className=\"font-medium text-foreground-700 dark:text-foreground-300 mb-4 flex items-center gap-2\">\n                      <Icon icon=\"lucide:sparkles\" className=\"w-4 h-4 text-primary\" />\n                      What's Coming:\n                    </h4>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm text-foreground-600 dark:text-foreground-400\">\n                      <div className=\"flex items-center gap-2\">\n                        <Icon icon=\"lucide:zap\" className=\"w-3 h-3 text-foreground-500\" />\n                        Faster processing\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Icon icon=\"lucide:shield-check\" className=\"w-3 h-3 text-foreground-500\" />\n                        Better error handling\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Icon icon=\"lucide:brain\" className=\"w-3 h-3 text-foreground-500\" />\n                        Smarter column mapping\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Icon icon=\"lucide:smartphone\" className=\"w-3 h-3 text-foreground-500\" />\n                        Mobile optimization\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Timeline */}\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-foreground-500 dark:text-foreground-500\">\n                      Expected to be back soon. Thank you for your patience! 🚀\n                    </p>\n                  </div>\n                </div>\n              </ModalBody>\n\n              <ModalFooter className=\"justify-center\">\n                <Button\n                  variant=\"flat\"\n                  size=\"sm\"\n                  onPress={onClose}\n                  className=\"bg-default-100 hover:bg-default-200 text-foreground-700 dark:bg-default-200/20 dark:hover:bg-default-200/30 dark:text-foreground-300 font-medium px-6 py-2 h-8\"\n                  startContent={<Icon icon=\"lucide:check\" className=\"w-3 h-3\" />}\n                >\n                  Got it\n                </Button>\n              </ModalFooter>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onOpenChange={onOpenChange}\n      size=\"5xl\"\n      scrollBehavior=\"inside\"\n      onClose={resetModal}\n      classNames={{\n        base: \"max-h-[90vh]\",\n        body: \"p-0\",\n        header: \"border-b border-divider\",\n        footer: \"border-t border-divider\"\n      }}\n    >\n      <ModalContent>\n        {(onClose) => (\n          <>\n            <ModalHeader className=\"flex flex-col gap-1\">\n              <div className=\"flex items-center gap-3\">\n                <Icon icon=\"lucide:upload\" className=\"text-xl text-primary\" />\n                <div>\n                  <h2 className=\"text-lg font-semibold\">Import Trade Journal</h2>\n                  <p className=\"text-sm text-foreground-500\">\n                    Upload your Excel/CSV file and map columns to import trades\n                  </p>\n                </div>\n              </div>\n\n              {/* Progress indicator */}\n              <div className=\"flex items-center gap-2 mt-4\">\n                {['upload', 'dateFormat', 'mapping', 'preview', 'importing'].map((stepName, index) => (\n                  <React.Fragment key={stepName}>\n                    <div className={'flex items-center gap-2 ' + (\n                      step === stepName ? 'text-primary' :\n                      ['upload', 'dateFormat', 'mapping', 'preview', 'importing'].indexOf(step) > index ? 'text-success' : 'text-foreground-400'\n                    )}>\n                      <div className={'w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium ' + (\n                        step === stepName ? 'bg-primary text-white' :\n                        ['upload', 'dateFormat', 'mapping', 'preview', 'importing'].indexOf(step) > index ? 'bg-success text-white' : 'bg-default-200'\n                      )}>\n                        {['upload', 'dateFormat', 'mapping', 'preview', 'importing'].indexOf(step) > index ?\n                          <Icon icon=\"lucide:check\" className=\"w-3 h-3\" /> :\n                          index + 1\n                        }\n                      </div>\n                      <span className=\"text-xs font-medium capitalize\">\n                        {stepName === 'dateFormat' ? 'Date Format' : stepName}\n                      </span>\n                    </div>\n                    {index < 4 && (\n                      <div className={'w-8 h-0.5 ' + (\n                        ['upload', 'dateFormat', 'mapping', 'preview', 'importing'].indexOf(step) > index ? 'bg-success' : 'bg-default-200'\n                      )} />\n                    )}\n                  </React.Fragment>\n                ))}\n              </div>\n            </ModalHeader>\n\n            <ModalBody className=\"p-6\">\n              <AnimatePresence mode=\"wait\">\n                {step === 'upload' && (\n                  <motion.div\n                    key=\"upload\"\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                    className=\"space-y-6\"\n                  >\n                    <div\n                      className={'border-2 border-dashed rounded-lg p-8 text-center transition-colors ' + (\n                        dragActive ? 'border-primary bg-primary/5' : 'border-default-300'\n                      )}\n                      onDragEnter={(e) => {\n                        e.preventDefault();\n                        setDragActive(true);\n                      }}\n                      onDragLeave={(e) => {\n                        e.preventDefault();\n                        setDragActive(false);\n                      }}\n                      onDragOver={(e) => e.preventDefault()}\n                      onDrop={handleDrop}\n                    >\n                      <Icon icon=\"lucide:upload-cloud\" className=\"text-4xl text-foreground-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium mb-2\">Upload your trade journal</h3>\n                      <p className=\"text-foreground-500 mb-4\">\n                        Drag and drop your Excel (.xlsx, .xls) or CSV file here, or click to browse\n                      </p>\n                      <input\n                        type=\"file\"\n                        accept=\".csv,.xlsx,.xls\"\n                        onChange={handleFileSelect}\n                        className=\"hidden\"\n                        id=\"file-upload\"\n                      />\n                      <label htmlFor=\"file-upload\">\n                        <Button as=\"span\" color=\"primary\" variant=\"flat\">\n                          <Icon icon=\"lucide:folder-open\" className=\"mr-2\" />\n                          Choose File\n                        </Button>\n                      </label>\n                    </div>\n\n                    {error && (\n                      <Card className=\"border-danger\">\n                        <CardBody>\n                          <div className=\"flex items-center gap-2 text-danger\">\n                            <Icon icon=\"lucide:alert-circle\" />\n                            <span className=\"font-medium\">Upload Error</span>\n                          </div>\n                          <p className=\"text-sm text-danger mt-2\">{error}</p>\n                          <Button\n                            size=\"sm\"\n                            variant=\"flat\"\n                            color=\"danger\"\n                            className=\"mt-3\"\n                            onPress={() => setError(null)}\n                          >\n                            Try Again\n                          </Button>\n                        </CardBody>\n                      </Card>\n                    )}\n\n                    <Card>\n                      <CardHeader>\n                        <Icon icon=\"lucide:info\" className=\"text-primary mr-2\" />\n                        <span className=\"font-medium\">Supported Formats</span>\n                      </CardHeader>\n                      <CardBody className=\"pt-0\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <h4 className=\"font-medium mb-2\">Excel Files (.xlsx, .xls)</h4>\n                            <p className=\"text-sm text-foreground-500\">\n                              Upload your Excel trade journal. We'll read the first sheet automatically.\n                            </p>\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium mb-2\">CSV Files (.csv)</h4>\n                            <p className=\"text-sm text-foreground-500\">\n                              Upload comma-separated values file with trade data. Supports standard CSV format with headers.\n                            </p>\n                          </div>\n                        </div>\n\n                        <Divider className=\"my-4\" />\n\n                        <div>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-medium\">Sample CSV Format</h4>\n                            <Button\n                              size=\"sm\"\n                              variant=\"flat\"\n                              color=\"primary\"\n                              startContent={<Icon icon=\"lucide:download\" />}\n                              onPress={() => {\n                                // Create sample CSV content with multiple date formats\n                                const sampleCSV = 'Name,Date,Entry,Quantity,Buy/Sell,Status,Exit Price,Exit Quantity,Setup,Notes,Pyramid Date\\n' +\n'RELIANCE,2024-01-15,2500,10,Buy,Closed,2650,10,Breakout,Good momentum trade,\\n' +\n'TCS,15/01/2024,3200,5,Buy,Open,,,Support,Waiting for breakout,\\n' +\n'INFY,17-01-2024,1450,15,Buy,Partial,1520,5,Pullback,Partial exit taken,\\n' +\n'HDFC,15.01.2024,1800,8,Buy,Closed,1950,8,Reversal,Target achieved,\\n' +\n'WIPRO,24 Jul 24,1200,12,Buy,Open,,,Breakout,Text date format,25 Jul\\n' +\n'BHARTI,15 Aug 2024,850,20,Buy,Closed,920,20,Support,Full text date,\\n' +\n'MARUTI,12 Sep,2800,3,Buy,Open,,,Pullback,Current year assumed,';\n\n                                // Create and download file\n                                const blob = new Blob([sampleCSV], { type: 'text/csv' });\n                                const url = window.URL.createObjectURL(blob);\n                                const a = document.createElement('a');\n                                a.href = url;\n                                a.download = 'trade_journal_template.csv';\n                                document.body.appendChild(a);\n                                a.click();\n                                document.body.removeChild(a);\n                                window.URL.revokeObjectURL(url);\n                              }}\n                            >\n                              Download Template\n                            </Button>\n                          </div>\n                          <div className=\"bg-default-100 p-3 rounded-lg text-xs font-mono\">\n                            <div>Name,Date,Entry,Quantity,Buy/Sell,Status</div>\n                            <div>RELIANCE,2024-01-15,2500,10,Buy,Closed</div>\n                            <div>TCS,15/01/2024,3200,5,Buy,Open</div>\n                            <div>INFY,17-01-2024,1450,15,Buy,Partial</div>\n                          </div>\n\n                          <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                            <h5 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2 flex items-center gap-2\">\n                              <Icon icon=\"lucide:calendar\" className=\"w-4 h-4\" />\n                              Supported Date Formats\n                            </h5>\n                            <div className=\"text-xs text-blue-700 dark:text-blue-300 space-y-1\">\n                              <div>• <strong>Numeric:</strong> 2024-01-15, 15/01/2024, 15-01-2024, 15.01.2024</div>\n                              <div>• <strong>Text Month:</strong> 24 Jul 2024, 24 Jul 24, 24 Jul</div>\n                              <div>• <strong>US Format:</strong> Jul 24, 2024, Jul 24 24</div>\n                              <div>• <strong>Mixed:</strong> Any combination of the above</div>\n                              <div className=\"text-blue-600 dark:text-blue-400 mt-2\">\n                                <Icon icon=\"lucide:info\" className=\"w-3 h-3 inline mr-1\" />\n                                The system will automatically detect and convert your date format\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardBody>\n                    </Card>\n                  </motion.div>\n                )}\n\n                {step === 'dateFormat' && parsedData && (\n                  <motion.div\n                    key=\"dateFormat\"\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                    className=\"space-y-6\"\n                  >\n                    <Card>\n                      <CardHeader>\n                        <div className=\"flex items-center gap-2\">\n                          <Icon icon=\"lucide:calendar\" className=\"text-primary\" />\n                          <span className=\"font-medium\">Select Date Format</span>\n                        </div>\n                      </CardHeader>\n                      <CardBody>\n                        <div className=\"space-y-4\">\n                          <p className=\"text-sm text-foreground-500\">\n                            We detected date columns in your file. Please select the format your dates are in to ensure accurate parsing.\n                          </p>\n\n                          {/* Show sample dates from the file */}\n                          {parsedData.rows.length > 0 && (\n                            <div className=\"p-3 bg-default-50 rounded-lg\">\n                              <h4 className=\"font-medium text-sm mb-2\">Sample dates from your file:</h4>\n                              <div className=\"text-xs text-foreground-600 space-y-1\">\n                                {parsedData.rows.slice(0, 3).map((row, index) => {\n                                  // Find date columns and show sample values\n                                  const dateColumns = Object.entries(columnMapping).filter(([key]) => key.includes('Date') || key === 'date');\n                                  return dateColumns.map(([field, column]) => {\n                                    const columnIndex = parsedData.headers.indexOf(column);\n                                    const value = columnIndex !== -1 ? row[columnIndex] : '';\n                                    return value ? (\n                                      <div key={index + '-' + field} className=\"font-mono\">\n                                        {field}: <span className=\"text-primary\">{value}</span>\n                                      </div>\n                                    ) : null;\n                                  });\n                                }).flat().filter(Boolean).slice(0, 5)}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Date format selection */}\n                          <div className=\"space-y-3\">\n                            {dateFormatOptions.map((option) => (\n                              <div\n                                key={option.value}\n                                className={'p-4 border-2 rounded-lg cursor-pointer transition-all ' + (\n                                  selectedDateFormat === option.value\n                                    ? 'border-primary bg-primary/5'\n                                    : 'border-default-200 hover:border-default-300'\n                                )}\n                                onClick={() => setSelectedDateFormat(option.value)}\n                              >\n                                <div className=\"flex items-center gap-3\">\n                                  <div className={'w-4 h-4 rounded-full border-2 flex items-center justify-center ' + (\n                                    selectedDateFormat === option.value\n                                      ? 'border-primary bg-primary'\n                                      : 'border-default-300'\n                                  )}>\n                                    {selectedDateFormat === option.value && (\n                                      <div className=\"w-2 h-2 rounded-full bg-white\"></div>\n                                    )}\n                                  </div>\n                                  <div className=\"flex-1\">\n                                    <div className=\"flex items-center gap-2 mb-1\">\n                                      <span className=\"font-medium\">{option.label}</span>\n                                      <code className=\"text-xs bg-default-100 px-2 py-1 rounded\">\n                                        {option.example}\n                                      </code>\n                                    </div>\n                                    <p className=\"text-xs text-foreground-500\">{option.description}</p>\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n\n                          <div className=\"p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                            <div className=\"flex items-start gap-2\">\n                              <Icon icon=\"lucide:lightbulb\" className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                              <div className=\"text-xs text-blue-700 dark:text-blue-300\">\n                                <strong>Tip:</strong> If you're unsure, choose \"Auto-detect\" and we'll try to figure out your date format automatically. You can always re-import if needed.\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardBody>\n                    </Card>\n                  </motion.div>\n                )}\n\n                {step === 'mapping' && parsedData && (\n                  <motion.div\n                    key=\"mapping\"\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                    className=\"space-y-6\"\n                  >\n                    <Card>\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between w-full\">\n                          <div className=\"flex items-center gap-2\">\n                            <Icon icon=\"lucide:file-text\" className=\"text-primary\" />\n                            <span className=\"font-medium\">File: {parsedData.fileName}</span>\n                          </div>\n                          <Chip size=\"sm\" variant=\"flat\" color=\"success\">\n                            {parsedData.rows.length} rows detected\n                          </Chip>\n                        </div>\n                      </CardHeader>\n                      <CardBody className=\"pt-0\">\n                        <div className=\"flex items-center justify-between mb-4\">\n                          <p className=\"text-sm text-foreground-500\">\n                            Map your file columns to our trade journal fields. We've made smart suggestions based on column names.\n                          </p>\n                          <Button\n                            size=\"sm\"\n                            variant=\"flat\"\n                            color=\"primary\"\n                            startContent={<Icon icon=\"lucide:zap\" />}\n                            onPress={() => {\n                              if (parsedData) {\n                                const smartMapping = generateSmartMapping(parsedData.headers);\n                                setColumnMapping(smartMapping.mapping);\n                                setMappingConfidence(smartMapping.confidence);\n                              }\n                            }}\n                          >\n                            Smart Re-map\n                          </Button>\n                        </div>\n\n                        {/* Mapping Summary */}\n                        <div className=\"mb-4 p-3 bg-default-50 rounded-lg\">\n                          <div className=\"flex items-center justify-between text-sm mb-2\">\n                            <span>Mapping Progress:</span>\n                            <div className=\"flex gap-4\">\n                              <span className=\"text-success\">\n                                {Object.keys(columnMapping).length} mapped\n                              </span>\n                              <span className=\"text-warning\">\n                                {MAPPABLE_FIELDS.filter(f => f.required && !columnMapping[f.key]).length} required missing\n                              </span>\n                              <span className=\"text-default-500\">\n                                {MAPPABLE_FIELDS.length - Object.keys(columnMapping).length} unmapped\n                              </span>\n                            </div>\n                          </div>\n\n                          {/* Debug: Show detected columns */}\n                          {parsedData && (\n                            <details className=\"text-xs\">\n                              <summary className=\"cursor-pointer text-default-600 hover:text-default-800\">\n                                Debug: Show detected columns ({parsedData.headers.length} total)\n                              </summary>\n                              <div className=\"mt-2 p-2 bg-default-100 rounded text-xs font-mono max-h-32 overflow-y-auto\">\n                                <div className=\"grid grid-cols-2 gap-1\">\n                                  {parsedData.headers.map((header, index) => (\n                                    <div key={index} className=\"truncate\">\n                                      <span className=\"text-default-500\">{index}:</span> {header}\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                            </details>\n                          )}\n                        </div>\n\n                        <ScrollShadow className=\"max-h-96\">\n                          <div className=\"space-y-3\">\n                            {MAPPABLE_FIELDS.map((field) => (\n                              <div key={field.key} className=\"flex items-center gap-4\">\n                                <div className=\"min-w-[200px]\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <span className=\"text-sm font-medium\">{field.label}</span>\n                                    {field.required && (\n                                      <Chip size=\"sm\" color=\"danger\" variant=\"flat\">Required</Chip>\n                                    )}\n                                    {mappingConfidence[field.key] && (\n                                      <Chip\n                                        size=\"sm\"\n                                        variant=\"flat\"\n                                        color={\n                                          mappingConfidence[field.key] >= 90 ? \"success\" :\n                                          mappingConfidence[field.key] >= 70 ? \"warning\" : \"default\"\n                                        }\n                                      >\n                                        {mappingConfidence[field.key].toFixed(0)}% match\n                                      </Chip>\n                                    )}\n                                  </div>\n                                </div>\n                                <div className=\"flex-1\">\n                                  <Select\n                                    placeholder=\"Select column or skip\"\n                                    size=\"sm\"\n                                    selectedKeys={columnMapping[field.key] ? [columnMapping[field.key]] : []}\n                                    onSelectionChange={(keys) => {\n                                      const selectedKey = Array.from(keys)[0] as string;\n                                      if (selectedKey) {\n                                        setColumnMapping(prev => ({\n                                          ...prev,\n                                          [field.key]: selectedKey\n                                        }));\n                                        // Clear confidence when manually changed\n                                        setMappingConfidence(prev => {\n                                          const newConfidence = { ...prev };\n                                          delete newConfidence[field.key];\n                                          return newConfidence;\n                                        });\n                                      } else {\n                                        setColumnMapping(prev => {\n                                          const newMapping = { ...prev };\n                                          delete newMapping[field.key];\n                                          return newMapping;\n                                        });\n                                        setMappingConfidence(prev => {\n                                          const newConfidence = { ...prev };\n                                          delete newConfidence[field.key];\n                                          return newConfidence;\n                                        });\n                                      }\n                                    }}\n                                  >\n                                    {parsedData.headers.map((header) => (\n                                      <SelectItem key={header}>\n                                        {header}\n                                      </SelectItem>\n                                    ))}\n                                  </Select>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </ScrollShadow>\n                      </CardBody>\n                    </Card>\n                  </motion.div>\n                )}\n\n                {step === 'preview' && previewTrades.length > 0 && (\n                  <motion.div\n                    key=\"preview\"\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                    className=\"space-y-6\"\n                  >\n                    <Card>\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between w-full\">\n                          <div className=\"flex items-center gap-2\">\n                            <Icon icon=\"lucide:eye\" className=\"text-primary\" />\n                            <span className=\"font-medium\">Preview Import</span>\n                          </div>\n                          <Chip size=\"sm\" variant=\"flat\" color=\"primary\">\n                            Showing first 5 rows\n                          </Chip>\n                        </div>\n                      </CardHeader>\n                      <CardBody className=\"pt-0\">\n                        <div className=\"mb-4\">\n                          <p className=\"text-sm text-foreground-500 mb-2\">\n                            Review the mapped data before importing. Check if the values look correct.\n                          </p>\n\n                          {/* Column Mapping Summary */}\n                          <div className=\"mb-3 p-3 bg-default-50 rounded-lg\">\n                            <details className=\"text-sm\">\n                              <summary className=\"cursor-pointer font-medium text-default-700 hover:text-default-900 mb-2\">\n                                📋 Column Mapping Summary ({Object.keys(columnMapping).length} fields mapped)\n                              </summary>\n                              <div className=\"mt-2 grid grid-cols-1 md:grid-cols-2 gap-2 text-xs max-h-32 overflow-y-auto\">\n                                {Object.entries(columnMapping).map(([field, column]) => (\n                                  <div key={field} className=\"flex justify-between p-2 bg-white rounded border\">\n                                    <span className=\"font-medium text-primary\">{field}:</span>\n                                    <span className=\"text-default-600 truncate ml-2\" title={column}>{column}</span>\n                                  </div>\n                                ))}\n                              </div>\n                            </details>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center gap-2 p-2 bg-primary/10 rounded-lg\">\n                              <Icon icon=\"lucide:calculator\" className=\"text-primary\" />\n                              <span className=\"text-sm text-primary font-medium\">\n                                Auto-calculated fields (Avg Entry, Position Size, Allocation %, P/L, etc.) are highlighted in blue\n                              </span>\n                            </div>\n                            <div className=\"flex items-center gap-2 p-2 bg-warning/10 rounded-lg\">\n                              <Icon icon=\"lucide:info\" className=\"text-warning\" />\n                              <span className=\"text-sm text-warning font-medium\">\n                                CMP values from CSV will be imported as-is (no auto-fetching)\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n\n                        <ScrollShadow className=\"max-h-96\">\n                          <Table aria-label=\"Preview table\" className=\"min-w-full\">\n                            <TableHeader>\n                              <TableColumn>Name</TableColumn>\n                              <TableColumn>Date</TableColumn>\n                              <TableColumn>Entry</TableColumn>\n                              <TableColumn>Avg Entry</TableColumn>\n                              <TableColumn>Qty</TableColumn>\n                              <TableColumn>Position Size</TableColumn>\n                              <TableColumn>Allocation %</TableColumn>\n                              <TableColumn>Status</TableColumn>\n                              <TableColumn>P/L</TableColumn>\n                            </TableHeader>\n                            <TableBody>\n                              {previewTrades.map((trade, index) => (\n                                <TableRow key={index}>\n                                  <TableCell>{trade.name || '-'}</TableCell>\n                                  <TableCell>\n                                    {trade.date ? new Date(trade.date).toLocaleDateString() : '-'}\n                                  </TableCell>\n                                  <TableCell>₹{trade.entry?.toFixed(2) || '0.00'}</TableCell>\n                                  <TableCell>\n                                    <span className=\"text-primary font-medium\">\n                                      ₹{trade.avgEntry?.toFixed(2) || '0.00'}\n                                    </span>\n                                  </TableCell>\n                                  <TableCell>{trade.initialQty || 0}</TableCell>\n                                  <TableCell>\n                                    <span className=\"text-primary font-medium\">\n                                      ₹{trade.positionSize?.toLocaleString() || '0'}\n                                    </span>\n                                  </TableCell>\n                                  <TableCell>\n                                    <span className=\"text-primary font-medium\">\n                                      {trade.allocation?.toFixed(2) || '0.00'}%\n                                    </span>\n                                  </TableCell>\n                                  <TableCell>\n                                    <Chip size=\"sm\" variant=\"flat\" color={\n                                      trade.positionStatus === 'Open' ? 'warning' :\n                                      trade.positionStatus === 'Closed' ? 'success' : 'primary'\n                                    }>\n                                      {trade.positionStatus}\n                                    </Chip>\n                                  </TableCell>\n                                  <TableCell>\n                                    <span className={trade.plRs >= 0 ? 'text-success' : 'text-danger'}>\n                                      ₹{trade.plRs?.toFixed(2) || '0.00'}\n                                    </span>\n                                  </TableCell>\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </ScrollShadow>\n                      </CardBody>\n                    </Card>\n                  </motion.div>\n                )}\n\n                {step === 'importing' && (\n                  <motion.div\n                    key=\"importing\"\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                    className=\"space-y-6\"\n                  >\n                    <Card>\n                      <CardBody className=\"text-center py-12\">\n                        <Icon icon=\"lucide:loader-2\" className=\"text-4xl text-primary mx-auto mb-4 animate-spin\" />\n                        <h3 className=\"text-lg font-medium mb-2\">\n                          Importing Trades\n                        </h3>\n                        <p className=\"text-foreground-500 mb-4\">\n                          {importProgress < 100\n                            ? 'Processing trades... ' + Math.round(importProgress) + '%'\n                            : 'Finalizing import...'\n                          }\n                        </p>\n                        <div className=\"space-y-3 mb-6\">\n                          <div className=\"flex items-center justify-center gap-2 p-3 bg-primary/10 rounded-lg\">\n                            <Icon icon=\"lucide:zap\" className=\"text-primary\" />\n                            <span className=\"text-sm text-primary font-medium\">\n                              Using optimized import - calculations will complete in background\n                            </span>\n                          </div>\n                        </div>\n                        <Progress\n                          value={importProgress}\n                          className=\"max-w-md mx-auto\"\n                          color=\"primary\"\n                          showValueLabel\n                        />\n                      </CardBody>\n                    </Card>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </ModalBody>\n\n            <ModalFooter>\n              <div className=\"flex justify-between w-full\">\n                <div>\n                  {step !== 'upload' && step !== 'importing' && (\n                    <Button\n                      variant=\"light\"\n                      onPress={() => {\n                        if (step === 'dateFormat') setStep('upload');\n                        else if (step === 'mapping') setStep('dateFormat');\n                        else if (step === 'preview') setStep('mapping');\n                      }}\n                      startContent={<Icon icon=\"lucide:arrow-left\" />}\n                    >\n                      Back\n                    </Button>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button variant=\"light\" onPress={onClose} isDisabled={step === 'importing'}>\n                    Cancel\n                  </Button>\n\n                  {step === 'dateFormat' && (\n                    <Button\n                      color=\"primary\"\n                      onPress={() => setStep('mapping')}\n                      endContent={<Icon icon=\"lucide:arrow-right\" />}\n                    >\n                      Continue to Mapping\n                    </Button>\n                  )}\n\n                  {step === 'mapping' && (\n                    <Button\n                      color=\"primary\"\n                      onPress={generatePreview}\n                      isDisabled={MAPPABLE_FIELDS.filter(f => f.required).some(field => !columnMapping[field.key])}\n                      endContent={<Icon icon=\"lucide:arrow-right\" />}\n                    >\n                      Preview\n                    </Button>\n                  )}\n\n                  {step === 'preview' && (\n                    <Button\n                      color=\"success\"\n                      onPress={handleImport}\n                      endContent={<Icon icon=\"lucide:upload\" />}\n                    >\n                      Import {parsedData?.rows.length} Trades\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </ModalFooter>\n          </>\n        )}\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableColumn,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  useDisclosure,\r\n  Tooltip,\r\n  Pagination,\r\n  Input,\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Chip,\r\n  Card,\r\n  CardBody,\r\n  User,\r\n  SortDescriptor as HeroSortDescriptor,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  Textarea\r\n} from \"@heroui/react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { TradeModal } from \"./trade-modal\";\r\nimport { DeleteConfirmModal } from \"./delete-confirm-modal\";\r\nimport { TradeUploadModal } from \"./TradeUploadModal\";\r\nimport { useTrades, SortDescriptor } from \"../hooks/use-trades\";\r\nimport { format } from 'date-fns';\r\nimport { useTruePortfolioWithTrades } from \"../hooks/use-true-portfolio-with-trades\";\r\nimport { tableRowVariants, springTransition } from \"../utils/animations\";\r\nimport { calcSLPercent, calcHoldingDays, calcUnrealizedPL, calcRealizedPL_FIFO, calcOpenHeat, calcIndividualMoves, calcTradeOpenHeat } from \"../utils/tradeCalculations\";\r\nimport { fetchPriceTicks, fetchPriceTicksWithFallback, fetchPriceTicksWithHistoricalFallback, fetchPriceTicksSmart } from '../utils/priceTickApi';\r\nimport * as XLSX from 'xlsx';\r\nimport Papa from 'papaparse';\r\nimport { useAccountingMethod } from \"../context/AccountingMethodContext\";\r\nimport { calculateTradePL } from \"../utils/accountingUtils\";\r\nimport { getFromLocalStorage, setToLocalStorage, getFromIndexedDB, setToIndexedDB } from \"../utils/helpers\";\r\nimport { useAccountingCalculations } from \"../hooks/use-accounting-calculations\";\r\nimport { formatCurrency as standardFormatCurrency, formatDate as standardFormatDate } from \"../utils/formatters\";\r\n// Removed Supabase import - using localStorage only\r\n\r\n// Supabase helpers for misc data\r\nimport { SupabaseService } from '../services/supabaseService';\r\n\r\nasync function fetchMiscData(key: string) {\r\n  try {\r\n    return await SupabaseService.getMiscData(`misc_${key}`);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function saveMiscData(key: string, value: any): Promise<boolean> {\r\n  try {\r\n    return await SupabaseService.saveMiscData(`misc_${key}`, value);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nconst csvUrl = '/name_sector_industry.csv';\r\n\r\n// Use standard formatters for consistency\r\nconst formatDate = standardFormatDate;\r\nconst formatCurrency = (value: number) => {\r\n  // Remove the ₹ symbol from standard formatter since we add it separately\r\n  return standardFormatCurrency(value).replace('₹', '');\r\n};\r\n\r\nimport { Trade, ChartImage } from \"../types/trade\";\r\nimport MobileTooltip from \"./ui/MobileTooltip\";\r\nimport { ChartImageViewer } from \"./ChartImageViewer\";\r\nimport { UniversalChartViewer } from \"./UniversalChartViewer\";\r\n\r\nexport interface TradeJournalProps {\r\n  title?: string;\r\n  statsTitle?: {\r\n    totalTrades?: string;\r\n    openPositions?: string;\r\n    winRate?: string;\r\n    totalPL?: string;\r\n  };\r\n  toggleFullscreen?: () => void;\r\n  isFullscreen?: boolean;\r\n}\r\n\r\nexport const TradeJournal = React.memo(function TradeJournal({\r\n  title = \"Trade Journal\",\r\n  statsTitle = {\r\n    totalTrades: \"Total Trades\",\r\n    openPositions: \"Open Positions\",\r\n    winRate: \"Win Rate\",\r\n    totalPL: \"Total P/L\"\r\n  },\r\n  toggleFullscreen,\r\n  isFullscreen\r\n}: TradeJournalProps) {\r\n  const {\r\n    trades,\r\n    originalTrades,\r\n    addTrade,\r\n    updateTrade,\r\n    deleteTrade,\r\n    bulkImportTrades,\r\n    isLoading,\r\n    isRecalculating,\r\n    searchQuery,\r\n    setSearchQuery,\r\n    statusFilter,\r\n    setStatusFilter,\r\n    sortDescriptor,\r\n    setSortDescriptor,\r\n    visibleColumns,\r\n    setVisibleColumns,\r\n    getAccountingAwareValues\r\n  } = useTrades();\r\n\r\n  const { portfolioSize, getPortfolioSize } = useTruePortfolioWithTrades(trades);\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n\r\n  // State for inline editing\r\n  const [editingId, setEditingId] = React.useState<string | null>(null);\r\n\r\n  // Local state for instant UI updates during inline editing\r\n  const [localTradeUpdates, setLocalTradeUpdates] = React.useState<Map<string, Partial<Trade>>>(new Map());\r\n\r\n  // The trades from useTrades hook already include proper filtering, sorting, and cash basis expansion\r\n  // Apply local updates for instant UI feedback with optimized memoization\r\n  const processedTrades = React.useMemo(() => {\r\n    // Early return if no local updates to avoid unnecessary mapping\r\n    if (localTradeUpdates.size === 0) {\r\n      return trades;\r\n    }\r\n\r\n    return trades.map(trade => {\r\n      const localUpdate = localTradeUpdates.get(trade.id);\r\n      return localUpdate ? { ...trade, ...localUpdate } : trade;\r\n    });\r\n  }, [trades, localTradeUpdates]);\r\n\r\n  // Use shared accounting calculations hook to eliminate redundant calculations\r\n  const sharedCalculations = useAccountingCalculations(processedTrades);\r\n\r\n  // Memoize trade statistics calculations - now responsive to actual trade data changes\r\n  const tradeStats = useMemo(() => {\r\n    // For cash basis, we need to count unique trades, not expanded entries\r\n    let uniqueTrades = processedTrades;\r\n    if (useCashBasis) {\r\n      const seenTradeIds = new Set();\r\n      uniqueTrades = processedTrades.filter(t => {\r\n        const originalId = t.id.split('_exit_')[0];\r\n        if (seenTradeIds.has(originalId)) return false;\r\n        seenTradeIds.add(originalId);\r\n        return true;\r\n      });\r\n    }\r\n\r\n    const openPositions = uniqueTrades.filter(t => t.positionStatus === \"Open\" || t.positionStatus === \"Partial\");\r\n    const closedTrades = uniqueTrades.filter(t => t.positionStatus === \"Closed\");\r\n\r\n    // Use shared calculations instead of manual calculation\r\n    const tradesWithAccountingPL = sharedCalculations.tradesWithAccountingPL;\r\n\r\n    const winningTrades = tradesWithAccountingPL.filter(t => t.accountingPL > 0);\r\n\r\n    return {\r\n      totalTrades: uniqueTrades.length,\r\n      openPositionsCount: openPositions.length,\r\n      winRate: tradesWithAccountingPL.length > 0 ? (winningTrades.length / tradesWithAccountingPL.length) * 100 : 0,\r\n      totalPL: tradesWithAccountingPL.reduce((sum, t) => sum + (t.accountingPL || 0), 0)\r\n    };\r\n  }, [processedTrades, useCashBasis, sharedCalculations]); // Now depends on processed trades with local updates\r\n\r\n  // This will be moved after items definition\r\n\r\n  const handleExport = (format: 'csv' | 'xlsx') => {\r\n    // Use the raw, unfiltered trades from the hook for export\r\n    const allTradesForExport = trades;\r\n\r\n    // Define the headers for the export, ensuring they match the allColumns definitions\r\n    const exportHeaders = allColumns\r\n      .filter(col => col.key !== 'actions' && col.key !== 'unrealizedPL') // Exclude non-data columns\r\n      .map(col => ({ label: col.label, key: col.key }));\r\n\r\n    const dataToExport = allTradesForExport.map(trade => {\r\n      const row: { [key: string]: any } = {};\r\n\r\n      // Get accounting-aware values for P/L related fields\r\n      const accountingValues = getAccountingAwareValues(trade);\r\n\r\n      exportHeaders.forEach(header => {\r\n        let value = trade[header.key as keyof Trade];\r\n\r\n        // Use accounting-aware values for P/L fields\r\n        if (header.key === 'plRs') {\r\n          value = accountingValues.plRs;\r\n        } else if (header.key === 'realisedAmount') {\r\n          value = accountingValues.realisedAmount;\r\n        } else if (header.key === 'pfImpact') {\r\n          value = accountingValues.pfImpact;\r\n        }\r\n\r\n        row[header.label] = value;\r\n      });\r\n      return row;\r\n    });\r\n\r\n    // Add accounting method to filename for clarity\r\n    const accountingMethodSuffix = useCashBasis ? '_cash_basis' : '_accrual_basis';\r\n    const dateStr = new Date().toISOString().split('T')[0];\r\n\r\n    if (format === 'csv') {\r\n      const csv = Papa.unparse(dataToExport);\r\n      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement(\"a\");\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute(\"href\", url);\r\n      link.setAttribute(\"download\", `trade_journal_${dateStr}${accountingMethodSuffix}.csv`);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    } else if (format === 'xlsx') {\r\n      const worksheet = XLSX.utils.json_to_sheet(dataToExport);\r\n      const workbook = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(workbook, worksheet, \"Trades\");\r\n      XLSX.writeFile(workbook, `trade_journal_${dateStr}${accountingMethodSuffix}.xlsx`);\r\n    }\r\n  };\r\n\r\n  // Chart image viewer handler\r\n  const handleChartImageView = React.useCallback((chartImage: ChartImage, title: string) => {\r\n    setChartViewerImage(chartImage);\r\n    setChartViewerTitle(title);\r\n    setIsChartViewerOpen(true);\r\n  }, []);\r\n\r\n  const handleAddNewBlankTrade = useCallback(() => {\r\n    // Find the max tradeNo among existing trades (as a number)\r\n    const maxTradeNo = trades.length > 0\r\n      ? Math.max(\r\n          ...trades\r\n            .map(t => Number(t.tradeNo))\r\n            .filter(n => !isNaN(n))\r\n        )\r\n      : 0;\r\n\r\n    const newTrade: Trade = {\r\n      id: `trade_${new Date().getTime()}_${Math.random()}`,\r\n      tradeNo: String(maxTradeNo + 1),\r\n      date: new Date().toISOString(),\r\n      name: '',\r\n      setup: '',\r\n      buySell: 'Buy',\r\n      entry: 0,\r\n      avgEntry: 0,\r\n      sl: 0,\r\n      tsl: 0,\r\n      cmp: 0,\r\n      initialQty: 0,\r\n      pyramid1Price: 0,\r\n      pyramid1Qty: 0,\r\n      pyramid1Date: '',\r\n      pyramid2Price: 0,\r\n      pyramid2Qty: 0,\r\n      pyramid2Date: '',\r\n      positionSize: 0,\r\n      allocation: 0,\r\n      exit1Price: 0,\r\n      exit1Qty: 0,\r\n      exit1Date: '',\r\n      exit2Price: 0,\r\n      exit2Qty: 0,\r\n      exit2Date: '',\r\n      exit3Price: 0,\r\n      exit3Qty: 0,\r\n      exit3Date: '',\r\n      openQty: 0,\r\n      exitedQty: 0,\r\n      avgExitPrice: 0,\r\n      stockMove: 0,\r\n      openHeat: 0,\r\n      rewardRisk: 0,\r\n      holdingDays: 0,\r\n      positionStatus: 'Open',\r\n      realisedAmount: 0,\r\n      plRs: 0,\r\n      pfImpact: 0,\r\n      cummPf: 0,\r\n      planFollowed: true,\r\n      exitTrigger: '',\r\n      proficiencyGrowthAreas: '',\r\n      baseDuration: '',\r\n      slPercent: 0,\r\n      notes: '',\r\n      _cmpAutoFetched: false, // Initialize as manual entry\r\n      chartAttachments: undefined, // Initialize without chart attachments\r\n    };\r\n    addTrade(newTrade);\r\n  }, [addTrade, trades]);\r\n\r\n  const { isOpen: isAddOpen, onOpen: onAddOpen, onOpenChange: onAddOpenChange } = useDisclosure();\r\n  const { isOpen: isEditOpen, onOpen: onEditOpen, onOpenChange: onEditOpenChange } = useDisclosure();\r\n  const { isOpen: isDeleteOpen, onOpen: onDeleteOpen, onOpenChange: onDeleteOpenChange } = useDisclosure();\r\n  const { isOpen: isUploadOpen, onOpen: onUploadOpen, onOpenChange: onUploadOpenChange } = useDisclosure();\r\n\r\n  const [selectedTrade, setSelectedTrade] = React.useState<Trade | null>(null);\r\n  const [page, setPage] = React.useState(1);\r\n  const [optimisticUpdates, setOptimisticUpdates] = React.useState<Map<string, Partial<Trade>>>(new Map());\r\n  const [isActionsEditMode, setIsActionsEditMode] = React.useState(false);\r\n\r\n  // Chart image viewer state\r\n  const [chartViewerImage, setChartViewerImage] = React.useState<ChartImage | null>(null);\r\n  const [isChartViewerOpen, setIsChartViewerOpen] = React.useState(false);\r\n  const [chartViewerTitle, setChartViewerTitle] = React.useState('');\r\n  const [isUniversalViewerOpen, setIsUniversalViewerOpen] = React.useState(false);\r\n  const [chartRefreshTrigger, setChartRefreshTrigger] = React.useState(0);\r\n  const [isUploadOnlyMode, setIsUploadOnlyMode] = React.useState(false);\r\n\r\n  // Dynamic pagination options based on dataset size\r\n  const rowsPerPageOptions = React.useMemo(() => {\r\n    const totalTrades = trades.length;\r\n    if (totalTrades < 500) return [10, 25, 50];\r\n    if (totalTrades < 2000) return [25, 50, 100];\r\n    return [50, 100, 200];\r\n  }, [trades.length]);\r\n\r\n  // Load rows per page from IndexedDB with fallback to 10, ensuring it's a valid option\r\n  // This persists the user's preferred rows per page setting across sessions\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [rowsPerPageLoaded, setRowsPerPageLoaded] = React.useState(false);\r\n\r\n  // Load rows per page from IndexedDB on mount\r\n  React.useEffect(() => {\r\n    const loadRowsPerPage = async () => {\r\n      try {\r\n        const savedValue = await getFromIndexedDB('tradeJournal_rowsPerPage', 10, (value) => parseInt(value, 10));\r\n\r\n        // Get initial options for validation (use default options if trades not loaded yet)\r\n        const initialOptions = trades.length < 500 ? [10, 25, 50] :\r\n                              trades.length < 2000 ? [25, 50, 100] : [50, 100, 200];\r\n\r\n        // Set saved value if it's valid, otherwise use default (10)\r\n        setRowsPerPage(initialOptions.includes(savedValue) ? savedValue : 10);\r\n      } catch (error) {\r\n        setRowsPerPage(10);\r\n      } finally {\r\n        setRowsPerPageLoaded(true);\r\n      }\r\n    };\r\n\r\n    loadRowsPerPage();\r\n  }, [trades.length]);\r\n\r\n  // Save rows per page to IndexedDB whenever it changes\r\n  React.useEffect(() => {\r\n    if (rowsPerPageLoaded) {\r\n      setToIndexedDB('tradeJournal_rowsPerPage', rowsPerPage.toString());\r\n    }\r\n  }, [rowsPerPage, rowsPerPageLoaded]);\r\n\r\n  // Validate and adjust rowsPerPage when options change (e.g., when dataset size changes)\r\n  React.useEffect(() => {\r\n    if (!rowsPerPageOptions.includes(rowsPerPage)) {\r\n      // If current rowsPerPage is not in the new options, set to the closest valid option\r\n      const closestOption = rowsPerPageOptions.reduce((prev, curr) =>\r\n        Math.abs(curr - rowsPerPage) < Math.abs(prev - rowsPerPage) ? curr : prev\r\n      );\r\n      setRowsPerPage(closestOption);\r\n    }\r\n  }, [rowsPerPageOptions, rowsPerPage]);\r\n\r\n  // Progressive loading for large datasets\r\n  const [loadedTradesCount, setLoadedTradesCount] = React.useState(() => {\r\n    // Initial load: show more for smaller datasets, less for larger ones\r\n    const initialLoad = trades.length < 100 ? trades.length : Math.min(100, trades.length);\r\n    return initialLoad;\r\n  });\r\n\r\n  const [isLoadingMore, setIsLoadingMore] = React.useState(false);\r\n\r\n  // Update loaded count when trades change\r\n  React.useEffect(() => {\r\n    if (trades.length <= loadedTradesCount) {\r\n      setLoadedTradesCount(trades.length);\r\n    }\r\n  }, [trades.length, loadedTradesCount]);\r\n\r\n  const loadMoreTrades = useCallback(() => {\r\n    setIsLoadingMore(true);\r\n    // Simulate loading delay for better UX\r\n    setTimeout(() => {\r\n      setLoadedTradesCount(prev => Math.min(prev + 50, trades.length));\r\n      setIsLoadingMore(false);\r\n    }, 300);\r\n  }, [trades.length]);\r\n\r\n  // Use progressive loading for large datasets, pagination for smaller ones\r\n  const shouldUseProgressiveLoading = processedTrades.length > 500;\r\n\r\n  const pages = shouldUseProgressiveLoading ? 1 : Math.ceil(processedTrades.length / rowsPerPage);\r\n\r\n  // Optimized pagination with optimistic updates applied and memoization\r\n  const items = React.useMemo(() => {\r\n    let baseItems;\r\n    if (shouldUseProgressiveLoading) {\r\n      baseItems = processedTrades.slice(0, loadedTradesCount);\r\n    } else {\r\n      const start = (page - 1) * rowsPerPage;\r\n      const end = start + rowsPerPage;\r\n      baseItems = processedTrades.slice(start, end);\r\n    }\r\n\r\n    // Apply optimistic updates for immediate UI feedback\r\n    return baseItems.map(trade => {\r\n      const optimisticUpdate = optimisticUpdates.get(trade.id);\r\n      return optimisticUpdate ? { ...trade, ...optimisticUpdate } : trade;\r\n    });\r\n  }, [page, processedTrades, rowsPerPage, shouldUseProgressiveLoading, loadedTradesCount, optimisticUpdates]);\r\n\r\n  // Memoize table rows to prevent unnecessary re-renders\r\n  const memoizedTableRows = React.useMemo(() => {\r\n    return items.map((item: Trade) => ({\r\n      id: item.id,\r\n      data: item,\r\n      key: `${item.id}-${item.tradeNo}-${item.positionStatus}` // Include status for proper re-rendering\r\n    }));\r\n  }, [items]);\r\n\r\n  // Optimized page change handler with immediate UI update\r\n  const handlePageChange = React.useCallback((newPage: number) => {\r\n    // Use startTransition for non-urgent updates to prevent blocking\r\n    React.startTransition(() => {\r\n      setPage(newPage);\r\n    });\r\n  }, [setPage]);\r\n\r\n  // PERFORMANCE OPTIMIZATION: Lazy load expensive calculations\r\n  const [expensiveCalculationsLoaded, setExpensiveCalculationsLoaded] = React.useState(false);\r\n\r\n  // Load expensive calculations in background after initial render\r\n  React.useEffect(() => {\r\n    if (!isLoading && trades.length > 0 && !expensiveCalculationsLoaded) {\r\n      // Use requestIdleCallback for non-critical calculations\r\n      const scheduleCalculations = () => {\r\n        if ('requestIdleCallback' in window) {\r\n          requestIdleCallback(() => {\r\n            setExpensiveCalculationsLoaded(true);\r\n          }, { timeout: 1000 });\r\n        } else {\r\n          setTimeout(() => {\r\n            setExpensiveCalculationsLoaded(true);\r\n          }, 100);\r\n        }\r\n      };\r\n\r\n      scheduleCalculations();\r\n    }\r\n  }, [isLoading, trades.length, expensiveCalculationsLoaded]);\r\n\r\n  // Single source of truth for column definitions\r\n  const allColumns = React.useMemo(() => [\r\n    { key: \"tradeNo\", label: \"Trade No.\", sortable: true },\r\n    { key: \"date\", label: \"Date\", sortable: true },\r\n    { key: \"name\", label: \"Name\" },\r\n    { key: \"setup\", label: \"Setup\" },\r\n    { key: \"buySell\", label: \"Buy/Sell\", sortable: true },\r\n    { key: \"entry\", label: \"Entry (₹)\", sortable: true },\r\n    { key: \"avgEntry\", label: \"Avg. Entry (₹)\", sortable: true },\r\n    { key: \"sl\", label: \"SL (₹)\", sortable: true },\r\n    { key: \"slPercent\", label: \"SL %\", sortable: true },\r\n    { key: \"tsl\", label: \"TSL (₹)\", sortable: true },\r\n    { key: \"cmp\", label: \"CMP (₹)\", sortable: true },\r\n    { key: \"initialQty\", label: \"Initial Qty\", sortable: true },\r\n    { key: \"pyramid1Price\", label: \"P1 Price (₹)\", sortable: true },\r\n    { key: \"pyramid1Qty\", label: \"P1 Qty\", sortable: true },\r\n    { key: \"pyramid1Date\", label: \"P1 Date\", sortable: true },\r\n    { key: \"pyramid2Price\", label: \"P2 Price (₹)\", sortable: true },\r\n    { key: \"pyramid2Qty\", label: \"P2 Qty\", sortable: true },\r\n    { key: \"pyramid2Date\", label: \"P2 Date\", sortable: true },\r\n    { key: \"positionSize\", label: \"Pos. Size\", sortable: true },\r\n    { key: \"allocation\", label: \"Allocation (%)\", sortable: true },\r\n    { key: \"exit1Price\", label: \"E1 Price (₹)\", sortable: true },\r\n    { key: \"exit1Qty\", label: \"E1 Qty\", sortable: true },\r\n    { key: \"exit1Date\", label: \"E1 Date\", sortable: true },\r\n    { key: \"exit2Price\", label: \"E2 Price (₹)\", sortable: true },\r\n    { key: \"exit2Qty\", label: \"E2 Qty\", sortable: true },\r\n    { key: \"exit2Date\", label: \"E2 Date\", sortable: true },\r\n    { key: \"exit3Price\", label: \"E3 Price (₹)\", sortable: true },\r\n    { key: \"exit3Qty\", label: \"E3 Qty\", sortable: true },\r\n    { key: \"exit3Date\", label: \"E3 Date\", sortable: true },\r\n    { key: \"openQty\", label: \"Open Qty\", sortable: true },\r\n    { key: \"exitedQty\", label: \"Exited Qty\", sortable: true },\r\n    { key: \"avgExitPrice\", label: \"Avg. Exit (₹)\", sortable: true },\r\n    { key: \"stockMove\", label: \"Stock Move (%)\", sortable: true },\r\n    { key: \"openHeat\", label: \"Open Heat (%)\", sortable: true },\r\n    { key: \"rewardRisk\", label: \"R:R\", sortable: true },\r\n    { key: \"holdingDays\", label: \"Holding Days\", sortable: true },\r\n    { key: \"positionStatus\", label: \"Status\", sortable: true },\r\n    { key: \"realisedAmount\", label: \"Realized Amount\", sortable: true },\r\n    { key: \"plRs\", label: \"Realized P/L (₹)\", sortable: true },\r\n    { key: \"pfImpact\", label: \"PF Impact (%)\", sortable: true },\r\n    { key: \"cummPf\", label: \"Cumm. PF (%)\", sortable: true },\r\n    { key: \"planFollowed\", label: \"Plan Followed\", sortable: true },\r\n    { key: \"exitTrigger\", label: \"Exit Trigger\" },\r\n    { key: \"proficiencyGrowthAreas\", label: \"Growth Areas\" },\r\n    { key: \"chartAttachments\", label: \"Charts\", sortable: false },\r\n    { key: \"actions\", label: \"Actions\", sortable: false },\r\n    { key: 'unrealizedPL', label: 'Unrealized P/L', sortable: false },\r\n    { key: 'notes', label: 'Notes', sortable: false },\r\n  ], []);\r\n\r\n  const headerColumns = React.useMemo(() => {\r\n    return allColumns.filter(col => visibleColumns.includes(col.key));\r\n  }, [allColumns, visibleColumns]);\r\n\r\n  const handleEdit = (trade: Trade) => {\r\n    setSelectedTrade(trade);\r\n    setIsActionsEditMode(true); // Set actions edit mode when editing from actions tab\r\n    onEditOpen();\r\n  };\r\n\r\n  const handleUploadOnly = (trade: Trade) => {\r\n    setSelectedTrade(trade);\r\n    setIsUploadOnlyMode(true);\r\n    onEditOpen();\r\n  };\r\n\r\n  const handleEditModalClose = (isOpen: boolean) => {\r\n    if (!isOpen) {\r\n      setIsUploadOnlyMode(false);\r\n      setIsActionsEditMode(false); // Reset actions edit mode when modal closes\r\n    }\r\n    onEditOpenChange();\r\n  };\r\n\r\n  const handleDelete = (trade: Trade) => {\r\n    setSelectedTrade(trade);\r\n    onDeleteOpen();\r\n  };\r\n\r\n  const handleAddTrade = (trade: Trade) => {\r\n    addTrade(trade);\r\n    onAddOpenChange();\r\n  };\r\n\r\n  const handleUpdateTrade = (trade: Trade) => {\r\n    // Check if this update involves chart changes (deletion/modification)\r\n    const existingTrade = trades.find(t => t.id === trade.id);\r\n    const chartChanged = existingTrade && (\r\n      (existingTrade.chartAttachments?.beforeEntry?.id !== trade.chartAttachments?.beforeEntry?.id) ||\r\n      (existingTrade.chartAttachments?.afterExit?.id !== trade.chartAttachments?.afterExit?.id)\r\n    );\r\n\r\n    updateTrade(trade);\r\n\r\n    // Trigger chart refresh if charts were modified\r\n    if (chartChanged) {\r\n      setChartRefreshTrigger(prev => prev + 1);\r\n      }\r\n\r\n    onEditOpenChange();\r\n  };\r\n\r\n  const handleDeleteConfirm = async () => {\r\n    if (selectedTrade) {\r\n      // Check if the trade has charts before deletion\r\n      const hasCharts = selectedTrade.chartAttachments?.beforeEntry || selectedTrade.chartAttachments?.afterExit;\r\n\r\n      await deleteTrade(selectedTrade.id);\r\n\r\n      // Trigger chart refresh if the deleted trade had charts\r\n      if (hasCharts) {\r\n        setChartRefreshTrigger(prev => prev + 1);\r\n        }\r\n\r\n      onDeleteOpenChange();\r\n    }\r\n  };\r\n\r\n  const handleImportTrades = useCallback((importedTrades: Trade[]) => {\r\n    // Use bulk import for better performance\r\n    bulkImportTrades(importedTrades);\r\n\r\n    // Show success message\r\n    }, [bulkImportTrades]);\r\n\r\n  // List of calculated fields that should not be editable\r\n  const nonEditableFields = [\r\n    // Calculated fields\r\n    'avgEntry', 'positionSize', 'allocation', 'openQty', 'exitedQty',\r\n    'avgExitPrice', 'stockMove', 'slPercent', 'openHeat', 'rewardRisk',\r\n    'holdingDays', 'realisedAmount', 'plRs', 'pfImpact', 'cummPf'\r\n    // 'cmp' REMOVED to allow manual editing when auto-fetch fails\r\n    // 'initialQty' REMOVED to allow inline editing\r\n  ];\r\n\r\n  // List of user-controlled fields that should never be auto-updated once user has edited them\r\n  const userControlledFields = [\r\n    'positionStatus', 'buySell', 'setup', 'exitTrigger', 'proficiencyGrowthAreas',\r\n    'planFollowed', 'notes', 'name', 'tradeNo'\r\n  ];\r\n\r\n  // Check if a field is editable\r\n  const isEditable = (field: string) => !nonEditableFields.includes(field);\r\n\r\n  // Check if a field is user-controlled (should not be auto-updated once user has edited it)\r\n  const isUserControlled = (field: string) => userControlledFields.includes(field);\r\n\r\n  // Helper function to get accounting-aware portfolio size\r\n  const getAccountingAwarePortfolioSize = React.useCallback((trade: Trade, exitedQty: number = 0) => {\r\n    if (!getPortfolioSize) return portfolioSize;\r\n\r\n    // For accrual basis: use entry date portfolio size\r\n    // For cash basis: use exit date portfolio size (if exits exist)\r\n    let relevantDate = trade.date; // Default to entry date\r\n\r\n    // For cash basis, use the latest exit date if available\r\n    if (accountingMethod === 'cash' && exitedQty > 0) {\r\n      const exitDates = [\r\n        trade.exit1Date,\r\n        trade.exit2Date,\r\n        trade.exit3Date\r\n      ].filter(date => date && date.trim() !== '').sort();\r\n\r\n      if (exitDates.length > 0) {\r\n        relevantDate = exitDates[exitDates.length - 1]; // Use latest exit date\r\n      }\r\n    }\r\n\r\n    const date = new Date(relevantDate);\r\n    const month = date.toLocaleString('default', { month: 'short' });\r\n    const year = date.getFullYear();\r\n    return getPortfolioSize(month, year);\r\n  }, [getPortfolioSize, portfolioSize, accountingMethod]);\r\n\r\n  // Debounced update to reduce API calls and improve performance\r\n  const updateTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const pendingUpdatesRef = useRef<Map<string, { field: keyof Trade, value: any }>>(new Map());\r\n\r\n  const handleInlineEditSave = React.useCallback(async (tradeId: string, field: keyof Trade, value: any) => {\r\n    try {\r\n      // Prevent editing of non-editable fields\r\n      if (!isEditable(field as string)) {\r\n        return;\r\n      }\r\n\r\n      const tradeToUpdate = trades.find(t => t.id === tradeId);\r\n      if (!tradeToUpdate) {\r\n        return;\r\n      }\r\n\r\n      // Parse value based on field type\r\n      let parsedValue: any = value;\r\n      if (typeof tradeToUpdate[field] === 'number') {\r\n        parsedValue = Number(value) || 0;\r\n        // Round positionSize to nearest whole number\r\n        if (field === 'positionSize') {\r\n          parsedValue = Math.round(parsedValue);\r\n        }\r\n      } else if (field.endsWith('Date') && value) {\r\n        parsedValue = new Date(value).toISOString();\r\n      } else if (field === 'planFollowed') {\r\n        parsedValue = Boolean(value);\r\n      }\r\n\r\n      // Create updated trade with the new value\r\n      const updatedTrade = { ...tradeToUpdate, [field]: parsedValue };\r\n\r\n      // Track that this field has been manually edited by the user\r\n      if (!updatedTrade._userEditedFields) {\r\n        updatedTrade._userEditedFields = [];\r\n      }\r\n      if (!updatedTrade._userEditedFields.includes(field as string)) {\r\n        updatedTrade._userEditedFields.push(field as string);\r\n\r\n      }\r\n\r\n      // If the field is 'name', fetch the latest price and update cmp (only if CMP is currently 0 or not manually set)\r\n      if (field === 'name' && parsedValue) {\r\n        try {\r\n          let priceData;\r\n\r\n          // Use smart fetch that prioritizes historical fallback during night hours (3:55-9:15 AM)\r\n          priceData = await fetchPriceTicksSmart(parsedValue);\r\n\r\n          const ticks = priceData?.data?.ticks?.[parsedValue.toUpperCase()];\r\n          if (ticks && ticks.length > 0) {\r\n            const latestTick = ticks[ticks.length - 1];\r\n            const fetchedPrice = latestTick[4]; // index 4 is close price\r\n\r\n            // Only update CMP if it's currently 0 (not manually set) or if we successfully fetched a price\r\n            if (tradeToUpdate.cmp === 0 || fetchedPrice > 0) {\r\n              updatedTrade.cmp = fetchedPrice;\r\n              // Add a flag to indicate this was auto-fetched (for UI indication)\r\n              updatedTrade._cmpAutoFetched = true;\r\n              }\r\n          } else {\r\n            // No price data available - keep existing CMP if it's manually set, otherwise set to 0\r\n            if (tradeToUpdate.cmp === 0) {\r\n              updatedTrade.cmp = 0;\r\n              updatedTrade._cmpAutoFetched = false;\r\n            }\r\n            }\r\n        } catch (err) {\r\n          // All fetch attempts failed - keep existing CMP if it's manually set, otherwise set to 0\r\n          if (tradeToUpdate.cmp === 0) {\r\n            updatedTrade.cmp = 0;\r\n            updatedTrade._cmpAutoFetched = false;\r\n          }\r\n          }\r\n      }\r\n\r\n      // If the field is 'cmp' and manually edited, mark it as manually set\r\n      if (field === 'cmp') {\r\n        updatedTrade._cmpAutoFetched = false;\r\n      }\r\n\r\n      // CRITICAL FIX: Recalculate ALL dependent fields for any significant change\r\n      if ([\r\n        'entry', 'sl', 'tsl', 'initialQty', 'pyramid1Qty', 'pyramid2Qty',\r\n        'exit1Price', 'exit2Price', 'exit3Price', 'exit1Qty', 'exit2Qty', 'exit3Qty',\r\n        'exit1Date', 'exit2Date', 'exit3Date', 'cmp', 'buySell', 'positionStatus'\r\n      ].includes(field as string)) {\r\n\r\n        // Recalculate all entry-related fields\r\n        const allEntries = [\r\n          { price: updatedTrade.entry, qty: updatedTrade.initialQty },\r\n          { price: updatedTrade.pyramid1Price, qty: updatedTrade.pyramid1Qty },\r\n          { price: updatedTrade.pyramid2Price, qty: updatedTrade.pyramid2Qty }\r\n        ].filter(e => e.price > 0 && e.qty > 0);\r\n\r\n        // Calculate average entry\r\n        const totalQty = allEntries.reduce((sum, e) => sum + e.qty, 0);\r\n        const totalValue = allEntries.reduce((sum, e) => sum + (e.price * e.qty), 0);\r\n        updatedTrade.avgEntry = totalQty > 0 ? totalValue / totalQty : updatedTrade.entry;\r\n\r\n        // Recalculate all exit-related fields\r\n        const allExits = [\r\n          { price: updatedTrade.exit1Price, qty: updatedTrade.exit1Qty, date: updatedTrade.exit1Date },\r\n          { price: updatedTrade.exit2Price, qty: updatedTrade.exit2Qty, date: updatedTrade.exit2Date },\r\n          { price: updatedTrade.exit3Price, qty: updatedTrade.exit3Qty, date: updatedTrade.exit3Date }\r\n        ].filter(e => e.price > 0 && e.qty > 0 && e.date);\r\n\r\n        // Calculate exit quantities and averages\r\n        const exitedQty = allExits.reduce((sum, e) => sum + e.qty, 0);\r\n        const exitValue = allExits.reduce((sum, e) => sum + (e.price * e.qty), 0);\r\n        const avgExitPrice = exitedQty > 0 ? exitValue / exitedQty : 0;\r\n\r\n        updatedTrade.exitedQty = exitedQty;\r\n        updatedTrade.avgExitPrice = avgExitPrice;\r\n        updatedTrade.openQty = totalQty - exitedQty;\r\n\r\n        // Calculate position size and allocation\r\n        updatedTrade.positionSize = totalValue;\r\n        const currentPortfolioSize = getPortfolioSize ?\r\n          (() => {\r\n            const tradeDate = new Date(updatedTrade.date);\r\n            const month = tradeDate.toLocaleString('default', { month: 'short' });\r\n            const year = tradeDate.getFullYear();\r\n            return getPortfolioSize(month, year);\r\n          })() : portfolioSize;\r\n        updatedTrade.allocation = currentPortfolioSize > 0 ? (totalValue / currentPortfolioSize) * 100 : 0;\r\n\r\n        // Calculate realized P/L using FIFO\r\n        if (exitedQty > 0) {\r\n          const entryLotsForFifo = allEntries.map(e => ({ price: e.price, qty: e.qty }));\r\n          const exitLotsForFifo = allExits.map(e => ({ price: e.price, qty: e.qty }));\r\n          updatedTrade.plRs = calcRealizedPL_FIFO(entryLotsForFifo, exitLotsForFifo, updatedTrade.buySell as 'Buy' | 'Sell');\r\n          updatedTrade.realisedAmount = exitValue;\r\n        } else {\r\n          updatedTrade.plRs = 0;\r\n          updatedTrade.realisedAmount = 0;\r\n        }\r\n\r\n        // Calculate accounting-aware portfolio impact\r\n        const accountingAwarePortfolioSize = getAccountingAwarePortfolioSize(updatedTrade, exitedQty);\r\n        updatedTrade.pfImpact = accountingAwarePortfolioSize > 0 ? (updatedTrade.plRs / accountingAwarePortfolioSize) * 100 : 0;\r\n\r\n        // Update position status based on quantities ONLY if user has never manually set it\r\n        const hasUserEditedPositionStatus = tradeToUpdate._userEditedFields?.includes('positionStatus');\r\n        const shouldAutoUpdatePositionStatus = field !== 'positionStatus' && !hasUserEditedPositionStatus;\r\n\r\n        // Debug logging for position status updates\r\n        if (field !== 'positionStatus') {\r\n          }\r\n\r\n        if (shouldAutoUpdatePositionStatus) {\r\n          const newStatus = updatedTrade.openQty <= 0 && exitedQty > 0 ? 'Closed'\r\n                          : exitedQty > 0 && updatedTrade.openQty > 0 ? 'Partial'\r\n                          : 'Open';\r\n\r\n          if (newStatus !== updatedTrade.positionStatus) {\r\n            updatedTrade.positionStatus = newStatus;\r\n          }\r\n        }\r\n\r\n        // Calculate other dependent fields\r\n        updatedTrade.openHeat = calcTradeOpenHeat(updatedTrade, currentPortfolioSize, getPortfolioSize);\r\n\r\n        // Calculate SL percentage\r\n        if (updatedTrade.sl > 0 && updatedTrade.avgEntry > 0) {\r\n          updatedTrade.slPercent = Math.abs(((updatedTrade.sl - updatedTrade.avgEntry) / updatedTrade.avgEntry) * 100);\r\n        }\r\n\r\n        // Calculate stock move\r\n        if (updatedTrade.cmp > 0 && updatedTrade.avgEntry > 0) {\r\n          updatedTrade.stockMove = updatedTrade.buySell === 'Buy'\r\n            ? ((updatedTrade.cmp - updatedTrade.avgEntry) / updatedTrade.avgEntry) * 100\r\n            : ((updatedTrade.avgEntry - updatedTrade.cmp) / updatedTrade.avgEntry) * 100;\r\n        }\r\n      }\r\n\r\n      // Optimistic UI update - apply changes locally first for immediate feedback\r\n      setOptimisticUpdates(prev => {\r\n        const newUpdates = new Map(prev);\r\n        const existingUpdate = newUpdates.get(tradeId) || {};\r\n\r\n        // Create optimistic update with calculated fields\r\n        const optimisticUpdate: Partial<Trade> = {\r\n          ...existingUpdate,\r\n          [field]: parsedValue,\r\n          // Include user edit tracking\r\n          ...(updatedTrade._userEditedFields !== undefined ? { _userEditedFields: updatedTrade._userEditedFields } : {}),\r\n          // Include calculated fields for instant feedback\r\n          ...(updatedTrade.avgEntry !== undefined ? { avgEntry: updatedTrade.avgEntry } : {}),\r\n          ...(updatedTrade.exitedQty !== undefined ? { exitedQty: updatedTrade.exitedQty } : {}),\r\n          ...(updatedTrade.avgExitPrice !== undefined ? { avgExitPrice: updatedTrade.avgExitPrice } : {}),\r\n          ...(updatedTrade.openQty !== undefined ? { openQty: updatedTrade.openQty } : {}),\r\n          ...(updatedTrade.positionSize !== undefined ? { positionSize: updatedTrade.positionSize } : {}),\r\n          ...(updatedTrade.allocation !== undefined ? { allocation: updatedTrade.allocation } : {}),\r\n          ...(updatedTrade.plRs !== undefined ? { plRs: updatedTrade.plRs } : {}),\r\n          ...(updatedTrade.realisedAmount !== undefined ? { realisedAmount: updatedTrade.realisedAmount } : {}),\r\n          ...(updatedTrade.pfImpact !== undefined ? { pfImpact: updatedTrade.pfImpact } : {}),\r\n          ...(updatedTrade.positionStatus !== undefined ? { positionStatus: updatedTrade.positionStatus } : {}),\r\n          ...(updatedTrade.openHeat !== undefined ? { openHeat: updatedTrade.openHeat } : {}),\r\n          ...(updatedTrade.slPercent !== undefined ? { slPercent: updatedTrade.slPercent } : {}),\r\n          ...(updatedTrade.stockMove !== undefined ? { stockMove: updatedTrade.stockMove } : {}),\r\n          ...(updatedTrade._cmpAutoFetched !== undefined ? { _cmpAutoFetched: updatedTrade._cmpAutoFetched } : {})\r\n        };\r\n\r\n        newUpdates.set(tradeId, optimisticUpdate);\r\n        return newUpdates;\r\n      });\r\n\r\n      // Debounced background update with callback to clear optimistic updates\r\n      updateTrade(updatedTrade, () => {\r\n        // Clear optimistic update once real update is complete\r\n        setOptimisticUpdates(prev => {\r\n          const newUpdates = new Map(prev);\r\n          newUpdates.delete(tradeId);\r\n          return newUpdates;\r\n        });\r\n      });\r\n    } catch (error) {\r\n      // Clear any optimistic updates on error\r\n      setOptimisticUpdates(prev => {\r\n        const newUpdates = new Map(prev);\r\n        newUpdates.delete(tradeId);\r\n        return newUpdates;\r\n      });\r\n    }\r\n  }, [trades, isEditable, portfolioSize, getPortfolioSize, updateTrade, getAccountingAwarePortfolioSize]);\r\n  // Keyboard navigation for editable fields\r\n  const getEditableFields = React.useCallback(() => {\r\n    const editableColumns = allColumns.filter(col =>\r\n      col.key !== 'actions' &&\r\n      visibleColumns.includes(col.key) &&\r\n      isEditable(col.key)\r\n    );\r\n    return editableColumns.map(col => col.key);\r\n  }, [visibleColumns, isEditable, allColumns]);\r\n\r\n  // Tab navigation state\r\n  const [currentTabIndex, setCurrentTabIndex] = React.useState<{row: number, col: number} | null>(null);\r\n\r\n  // Get all editable cells in order (row by row, then column by column)\r\n  const getAllEditableCells = React.useCallback(() => {\r\n    const editableFields = getEditableFields();\r\n    const cells: Array<{tradeId: string, field: string, rowIndex: number, colIndex: number}> = [];\r\n\r\n    processedTrades.forEach((trade, rowIndex) => {\r\n      editableFields.forEach((field, colIndex) => {\r\n        cells.push({\r\n          tradeId: trade.id,\r\n          field,\r\n          rowIndex,\r\n          colIndex\r\n        });\r\n      });\r\n    });\r\n\r\n    return cells;\r\n  }, [processedTrades, getEditableFields]);\r\n\r\n  // Handle tab navigation\r\n  const handleTabNavigation = React.useCallback((direction: 'next' | 'prev') => {\r\n    const allCells = getAllEditableCells();\r\n    if (allCells.length === 0) return;\r\n\r\n    let newIndex = 0;\r\n\r\n    if (currentTabIndex) {\r\n      const currentCellIndex = allCells.findIndex(cell =>\r\n        cell.rowIndex === currentTabIndex.row && cell.colIndex === currentTabIndex.col\r\n      );\r\n\r\n      if (direction === 'next') {\r\n        newIndex = (currentCellIndex + 1) % allCells.length;\r\n      } else {\r\n        newIndex = currentCellIndex - 1;\r\n        if (newIndex < 0) newIndex = allCells.length - 1;\r\n      }\r\n    }\r\n\r\n    const targetCell = allCells[newIndex];\r\n    setCurrentTabIndex({ row: targetCell.rowIndex, col: targetCell.colIndex });\r\n\r\n    // Focus the target cell and activate editing\r\n    setTimeout(() => {\r\n      const cellElement = document.querySelector(\r\n        `[data-trade-id=\"${targetCell.tradeId}\"][data-field=\"${targetCell.field}\"]`\r\n      ) as HTMLElement;\r\n\r\n      if (cellElement) {\r\n        cellElement.focus();\r\n        cellElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\r\n\r\n        // Automatically trigger editing/dropdown for the focused cell\r\n        const clickEvent = new MouseEvent('click', {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          view: window\r\n        });\r\n        cellElement.dispatchEvent(clickEvent);\r\n\r\n        // For dropdown cells, also trigger Enter key to open dropdown\r\n        const enterEvent = new KeyboardEvent('keydown', {\r\n          key: 'Enter',\r\n          bubbles: true,\r\n          cancelable: true\r\n        });\r\n        cellElement.dispatchEvent(enterEvent);\r\n      }\r\n    }, 0);\r\n  }, [currentTabIndex, getAllEditableCells]);\r\n\r\n  // Global keyboard event handler for tab navigation\r\n  React.useEffect(() => {\r\n    const handleGlobalKeyDown = (e: KeyboardEvent) => {\r\n      if (e.key === 'Tab') {\r\n        e.preventDefault();\r\n        handleTabNavigation(e.shiftKey ? 'prev' : 'next');\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleGlobalKeyDown);\r\n    return () => document.removeEventListener('keydown', handleGlobalKeyDown);\r\n  }, [handleTabNavigation]);\r\n\r\n  const handleKeyboardNavigation = React.useCallback((e: KeyboardEvent) => {\r\n    // Only handle Tab key navigation\r\n    if (e.key !== 'Tab') return;\r\n\r\n    const activeElement = document.activeElement;\r\n    if (!activeElement) return;\r\n\r\n    // Check if we're in an editable cell\r\n    const editableCell = activeElement.closest('[data-editable-cell]');\r\n    if (!editableCell) return;\r\n\r\n    e.preventDefault();\r\n\r\n    const tradeId = editableCell.getAttribute('data-trade-id');\r\n    const currentField = editableCell.getAttribute('data-field');\r\n\r\n    if (!tradeId || !currentField) return;\r\n\r\n    const editableFields = getEditableFields();\r\n    const currentFieldIndex = editableFields.indexOf(currentField);\r\n\r\n    if (currentFieldIndex === -1) return;\r\n\r\n    let nextFieldIndex: number;\r\n    let nextTradeIndex: number;\r\n\r\n    const currentTradeIndex = items.findIndex(trade => trade.id === tradeId);\r\n\r\n    if (e.shiftKey) {\r\n      // Navigate backwards\r\n      if (currentFieldIndex > 0) {\r\n        // Move to previous field in same row\r\n        nextFieldIndex = currentFieldIndex - 1;\r\n        nextTradeIndex = currentTradeIndex;\r\n      } else if (currentTradeIndex > 0) {\r\n        // Move to last field of previous row\r\n        nextFieldIndex = editableFields.length - 1;\r\n        nextTradeIndex = currentTradeIndex - 1;\r\n      } else {\r\n        return; // Already at first field of first row\r\n      }\r\n    } else {\r\n      // Navigate forwards\r\n      if (currentFieldIndex < editableFields.length - 1) {\r\n        // Move to next field in same row\r\n        nextFieldIndex = currentFieldIndex + 1;\r\n        nextTradeIndex = currentTradeIndex;\r\n      } else if (currentTradeIndex < items.length - 1) {\r\n        // Move to first field of next row\r\n        nextFieldIndex = 0;\r\n        nextTradeIndex = currentTradeIndex + 1;\r\n      } else {\r\n        return; // Already at last field of last row\r\n      }\r\n    }\r\n\r\n    const nextTrade = items[nextTradeIndex];\r\n    const nextField = editableFields[nextFieldIndex];\r\n\r\n    // Focus the next editable cell\r\n    setTimeout(() => {\r\n      const nextCell = document.querySelector(\r\n        `[data-editable-cell][data-trade-id=\"${nextTrade.id}\"][data-field=\"${nextField}\"]`\r\n      ) as HTMLElement;\r\n\r\n      if (nextCell) {\r\n        nextCell.focus();\r\n        // If it's an input field, select all text\r\n        const input = nextCell.querySelector('input');\r\n        if (input) {\r\n          input.select();\r\n        }\r\n      }\r\n    }, 0);\r\n  }, [getEditableFields, items]);\r\n\r\n  // Add keyboard event listener\r\n  React.useEffect(() => {\r\n    document.addEventListener('keydown', handleKeyboardNavigation);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyboardNavigation);\r\n    };\r\n  }, [handleKeyboardNavigation]);\r\n\r\n  // Format cell value based on its type\r\n  const formatCellValue = (value: any, key: string) => {\r\n    if (value === undefined || value === null || value === '') return '-';\r\n\r\n    // Format dates\r\n    if (key.endsWith('Date')) {\r\n      return formatDate(value as string);\r\n    }\r\n\r\n    // Format currency values with single rupee symbol\r\n    if ([\r\n      'entry', 'avgEntry', 'sl', 'tsl', 'cmp', 'pyramid1Price', 'pyramid2Price',\r\n      'exit1Price', 'exit2Price', 'exit3Price', 'avgExitPrice', 'realisedAmount', 'plRs'\r\n    ].includes(key)) {\r\n      return '₹' + formatCurrency(Number(value));\r\n    }\r\n\r\n    // Format percentage values\r\n    if (['slPercent', 'openHeat', 'allocation', 'pfImpact', 'cummPf', 'stockMove'].includes(key)) {\r\n      return `${Number(value).toFixed(2)}%`;\r\n    }\r\n\r\n    // Format position size to whole number\r\n    if (key === 'positionSize') {\r\n      return String(Math.round(Number(value)));\r\n    }\r\n\r\n    // Format reward/risk ratio\r\n    if (key === 'rewardRisk') {\r\n      const rr = Number(value);\r\n      if (rr > 0) {\r\n        const rrStr = rr % 1 === 0 ? rr.toFixed(0) : rr.toFixed(2);\r\n        return `${rrStr}R`;\r\n      } else {\r\n        return '-';\r\n      }\r\n    }\r\n\r\n    // Format boolean values\r\n    if (key === 'planFollowed') {\r\n      return value ? 'Yes' : 'No';\r\n    }\r\n\r\n    return String(value);\r\n  };\r\n\r\n  // Add color to P/L values\r\n  const getValueColor = (value: any, key: string) => {\r\n    if (key !== 'plRs') return '';\r\n    const numValue = Number(value);\r\n    return numValue < 0 ? 'text-danger' : numValue > 0 ? 'text-success' : '';\r\n  };\r\n\r\n  // Pre-compute all tooltip data for better performance\r\n  const precomputedTooltips = React.useMemo(() => {\r\n    const tooltipData = new Map();\r\n\r\n    items.forEach(trade => {\r\n      const tradeTooltips: any = {};\r\n\r\n      // Pre-compute holding days tooltip\r\n      const isOpenPosition = trade.positionStatus === 'Open';\r\n      const isPartialPosition = trade.positionStatus === 'Partial';\r\n      const entryLots = [\r\n        { label: 'Initial Entry', date: trade.date, qty: Number(trade.initialQty) },\r\n        { label: 'Pyramid 1', date: trade.pyramid1Date, qty: Number(trade.pyramid1Qty) },\r\n        { label: 'Pyramid 2', date: trade.pyramid2Date, qty: Number(trade.pyramid2Qty) }\r\n      ].filter(e => e.date && e.qty > 0);\r\n\r\n      const exitLots = [\r\n        { date: trade.exit1Date, qty: Number(trade.exit1Qty) },\r\n        { date: trade.exit2Date, qty: Number(trade.exit2Qty) },\r\n        { date: trade.exit3Date, qty: Number(trade.exit3Qty) }\r\n      ].filter(e => e.date && e.qty > 0);\r\n\r\n      let remainingExits = exitLots.map(e => ({ ...e }));\r\n      const today = new Date();\r\n      today.setHours(0,0,0,0);\r\n      const lotBreakdown: { label: string, qty: number, days: number, exited: boolean, exitDate?: string }[] = [];\r\n\r\n      for (const lot of entryLots) {\r\n        let qtyLeft = lot.qty;\r\n        let entryDate = new Date(lot.date);\r\n        entryDate.setHours(0,0,0,0);\r\n\r\n        while (qtyLeft > 0 && remainingExits.length > 0) {\r\n          const exit = remainingExits[0];\r\n          const exitDate = new Date(exit.date);\r\n          exitDate.setHours(0,0,0,0);\r\n          const usedQty = Math.min(qtyLeft, exit.qty);\r\n          const days = Math.max(1, Math.ceil((exitDate.getTime() - entryDate.getTime()) / (1000 * 60 * 60 * 24)));\r\n          lotBreakdown.push({ label: lot.label, qty: usedQty, days, exited: true, exitDate: exit.date });\r\n          qtyLeft -= usedQty;\r\n          exit.qty -= usedQty;\r\n          if (exit.qty === 0) remainingExits.shift();\r\n        }\r\n\r\n        if (qtyLeft > 0) {\r\n          const days = Math.max(1, Math.ceil((today.getTime() - entryDate.getTime()) / (1000 * 60 * 60 * 24)));\r\n          lotBreakdown.push({ label: lot.label, qty: qtyLeft, days, exited: false });\r\n        }\r\n      }\r\n\r\n      let displayDays = 0;\r\n      if (isOpenPosition) {\r\n        const openLots = lotBreakdown.filter(l => !l.exited);\r\n        const totalQty = openLots.reduce((sum, l) => sum + l.qty, 0);\r\n        displayDays = totalQty > 0 ? Math.round(openLots.reduce((sum, l) => sum + l.days * l.qty, 0) / totalQty) : 0;\r\n      } else if (isPartialPosition) {\r\n        const openLots = lotBreakdown.filter(l => !l.exited);\r\n        const exitedLots = lotBreakdown.filter(l => l.exited);\r\n        const openQty = openLots.reduce((sum, l) => sum + l.qty, 0);\r\n        const exitedQty = exitedLots.reduce((sum, l) => sum + l.qty, 0);\r\n        if (openQty > 0) {\r\n          displayDays = Math.round(openLots.reduce((sum, l) => sum + l.days * l.qty, 0) / openQty);\r\n        } else if (exitedQty > 0) {\r\n          displayDays = Math.round(exitedLots.reduce((sum, l) => sum + l.days * l.qty, 0) / exitedQty);\r\n        }\r\n      } else {\r\n        const exitedLots = lotBreakdown.filter(l => l.exited);\r\n        const exitedQty = exitedLots.reduce((sum, l) => sum + l.qty, 0);\r\n        displayDays = exitedQty > 0 ? Math.round(exitedLots.reduce((sum, l) => sum + l.days * l.qty, 0) / exitedQty) : 0;\r\n      }\r\n\r\n      tradeTooltips.holdingDays = {\r\n        displayDays,\r\n        lotBreakdown,\r\n        isOpenPosition,\r\n        isPartialPosition\r\n      };\r\n\r\n      // Pre-compute R:R tooltip\r\n      const entries = [\r\n        { label: 'Initial Entry', price: Number(trade.entry), qty: Number(trade.initialQty) },\r\n        { label: 'Pyramid 1', price: Number(trade.pyramid1Price), qty: Number(trade.pyramid1Qty) },\r\n        { label: 'Pyramid 2', price: Number(trade.pyramid2Price), qty: Number(trade.pyramid2Qty) }\r\n      ].filter(e => e.price > 0 && e.qty > 0);\r\n\r\n      const totalQtyAll = entries.reduce((sum, e) => sum + (e.qty || 0), 0);\r\n      const tsl = Number(trade.tsl);\r\n      const sl = Number(trade.sl);\r\n      const cmp = Number(trade.cmp);\r\n      const avgExit = Number(trade.avgExitPrice);\r\n      const buySell = trade.buySell;\r\n      const positionStatus = trade.positionStatus;\r\n      const exitedQty = Number(trade.exitedQty);\r\n      const openQty = Number(trade.openQty);\r\n\r\n      // Calculate FIFO exit allocation per entry\r\n      const rrExitLots = [\r\n        { date: trade.exit1Date, qty: Number(trade.exit1Qty), price: Number(trade.exit1Price) },\r\n        { date: trade.exit2Date, qty: Number(trade.exit2Qty), price: Number(trade.exit2Price) },\r\n        { date: trade.exit3Date, qty: Number(trade.exit3Qty), price: Number(trade.exit3Price) }\r\n      ].filter(e => e.date && e.qty > 0 && e.price > 0);\r\n\r\n      // FIFO allocation: determine how much of each entry was exited\r\n      let rrRemainingExits = rrExitLots.map(e => ({ ...e }));\r\n      const entryExitAllocations = entries.map(entry => {\r\n        let entryQtyLeft = entry.qty;\r\n        let totalExitValue = 0;\r\n        let totalExitQty = 0;\r\n\r\n        // Allocate exits to this entry using FIFO\r\n        while (entryQtyLeft > 0 && rrRemainingExits.length > 0) {\r\n          const exit = rrRemainingExits[0];\r\n          const usedQty = Math.min(entryQtyLeft, exit.qty);\r\n\r\n          totalExitValue += usedQty * exit.price;\r\n          totalExitQty += usedQty;\r\n\r\n          entryQtyLeft -= usedQty;\r\n          exit.qty -= usedQty;\r\n\r\n          if (exit.qty === 0) rrRemainingExits.shift();\r\n        }\r\n\r\n        const avgExitPriceForEntry = totalExitQty > 0 ? totalExitValue / totalExitQty : 0;\r\n        const exitedQtyForEntry = totalExitQty;\r\n        const openQtyForEntry = entryQtyLeft;\r\n\r\n        return {\r\n          ...entry,\r\n          exitedQtyForEntry,\r\n          openQtyForEntry,\r\n          avgExitPriceForEntry\r\n        };\r\n      });\r\n\r\n      const entryBreakdown = entryExitAllocations.map(e => {\r\n        let stop;\r\n        if (e.label === 'Initial Entry') {\r\n          stop = sl;\r\n        } else {\r\n          stop = tsl > 0 ? tsl : sl;\r\n        }\r\n        const rawRisk = buySell === 'Buy' ? e.price - stop : stop - e.price;\r\n        const risk = Math.abs(rawRisk);\r\n        let reward = 0;\r\n        let rewardFormula = '';\r\n\r\n        if (positionStatus === 'Open') {\r\n          reward = buySell === 'Buy' ? cmp - e.price : e.price - cmp;\r\n          rewardFormula = buySell === 'Buy'\r\n            ? `CMP - Entry = ${cmp} - ${e.price} = ${(cmp - e.price).toFixed(2)} (Unrealized)`\r\n            : `Entry - CMP = ${e.price} - ${cmp} = ${(e.price - cmp).toFixed(2)} (Unrealized)`;\r\n        } else if (positionStatus === 'Closed') {\r\n          reward = buySell === 'Buy' ? avgExit - e.price : e.price - avgExit;\r\n          rewardFormula = buySell === 'Buy'\r\n            ? `Avg. Exit - Entry = ${avgExit} - ${e.price} = ${(avgExit - e.price).toFixed(2)} (Realized)`\r\n            : `Entry - Avg. Exit = ${e.price} - ${avgExit} = ${(e.price - avgExit).toFixed(2)} (Realized)`;\r\n        } else if (positionStatus === 'Partial') {\r\n          // Use FIFO-allocated quantities for this specific entry\r\n          const exitedQtyForEntry = e.exitedQtyForEntry;\r\n          const openQtyForEntry = e.openQtyForEntry;\r\n          const avgExitPriceForEntry = e.avgExitPriceForEntry;\r\n          const totalQtyForEntry = exitedQtyForEntry + openQtyForEntry;\r\n\r\n          if (exitedQtyForEntry > 0 && openQtyForEntry > 0) {\r\n            // Mixed: part realized, part unrealized for this entry\r\n            const realizedReward = buySell === 'Buy' ? avgExitPriceForEntry - e.price : e.price - avgExitPriceForEntry;\r\n            const unrealizedReward = buySell === 'Buy' ? cmp - e.price : e.price - cmp;\r\n            reward = ((realizedReward * exitedQtyForEntry) + (unrealizedReward * openQtyForEntry)) / totalQtyForEntry;\r\n            rewardFormula = `Weighted: ((Realized: ${realizedReward.toFixed(2)} × ${exitedQtyForEntry}) + (Unrealized: ${unrealizedReward.toFixed(2)} × ${openQtyForEntry})) / ${totalQtyForEntry} = ${reward.toFixed(2)}`;\r\n          } else if (exitedQtyForEntry > 0) {\r\n            // Fully realized for this entry\r\n            reward = buySell === 'Buy' ? avgExitPriceForEntry - e.price : e.price - avgExitPriceForEntry;\r\n            rewardFormula = buySell === 'Buy'\r\n              ? `Avg. Exit - Entry = ${avgExitPriceForEntry.toFixed(2)} - ${e.price} = ${reward.toFixed(2)} (Realized)`\r\n              : `Entry - Avg. Exit = ${e.price} - ${avgExitPriceForEntry.toFixed(2)} = ${reward.toFixed(2)} (Realized)`;\r\n          } else {\r\n            // Fully unrealized for this entry\r\n            reward = buySell === 'Buy' ? cmp - e.price : e.price - cmp;\r\n            rewardFormula = buySell === 'Buy'\r\n              ? `CMP - Entry = ${cmp} - ${e.price} = ${reward.toFixed(2)} (Unrealized)`\r\n              : `Entry - CMP = ${e.price} - ${cmp} = ${reward.toFixed(2)} (Unrealized)`;\r\n          }\r\n        }\r\n\r\n        const rrValue = risk !== 0 ? Math.abs(reward / risk) : Infinity;\r\n        const isRiskFree = risk === 0;\r\n        return {\r\n          label: e.label,\r\n          price: e.price,\r\n          risk,\r\n          rawRisk,\r\n          reward,\r\n          rewardFormula,\r\n          rrValue,\r\n          qty: e.qty,\r\n          stop,\r\n          exitedQtyForEntry: e.exitedQtyForEntry || 0,\r\n          openQtyForEntry: e.openQtyForEntry || 0,\r\n          isRiskFree\r\n        };\r\n      });\r\n\r\n      // Traditional weighted R:R (excluding risk-free positions)\r\n      const riskyEntries = entryBreakdown.filter(e => !e.isRiskFree);\r\n      const riskyQty = riskyEntries.reduce((sum, e) => sum + (e.qty || 0), 0);\r\n      const traditionalWeightedRR = riskyQty > 0\r\n        ? riskyEntries.reduce((sum, e) => sum + (e.rrValue * (e.qty || 0)), 0) / riskyQty\r\n        : 0;\r\n\r\n      // Effective position R:R (total reward vs total risk from risky portions only)\r\n      const totalRiskAmount = riskyEntries.reduce((sum, e) => sum + (e.risk * (e.qty || 0)), 0);\r\n      const totalRewardAmount = entryBreakdown.reduce((sum, e) => sum + (e.reward * (e.qty || 0)), 0);\r\n      const effectiveRR = totalRiskAmount > 0 ? Math.abs(totalRewardAmount / totalRiskAmount) : Infinity;\r\n\r\n      // Check if position contains risk-free components\r\n      const hasRiskFreePositions = entryBreakdown.some(e => e.isRiskFree);\r\n\r\n      const weightedRR = traditionalWeightedRR;\r\n\r\n      tradeTooltips.rewardRisk = {\r\n        entryBreakdown,\r\n        weightedRR,\r\n        totalQtyAll,\r\n        tsl,\r\n        traditionalWeightedRR,\r\n        effectiveRR,\r\n        hasRiskFreePositions,\r\n        totalRiskAmount,\r\n        totalRewardAmount\r\n      };\r\n\r\n      // Precompute trade details tooltip\r\n      const fieldsForTooltip = allColumns.slice(allColumns.findIndex(col => col.key === \"initialQty\")).filter(col => col.key !== 'openHeat');\r\n      const tradeDetailsFields = fieldsForTooltip.map(col => {\r\n        if (col.key === \"actions\") return null;\r\n        let value = trade[col.key as keyof Trade];\r\n        const originalValue = value; // Store original value for filtering\r\n\r\n        // Skip fields with no meaningful values BEFORE formatting\r\n        const shouldSkipField = (key: string, originalVal: any) => {\r\n          if (originalVal === null || originalVal === undefined || originalVal === '' || originalVal === '-') return true;\r\n\r\n          // Only hide EXACT zero values (not small decimals like 0.1, 0.01, 0.05)\r\n          // Check the original numeric value before any formatting\r\n          if (originalVal === 0 && [\r\n            'pyramid1Price', 'pyramid2Price', 'pyramid1Qty', 'pyramid2Qty',\r\n            'exit1Price', 'exit2Price', 'exit3Price', 'exit1Qty', 'exit2Qty', 'exit3Qty',\r\n            'tsl', 'rewardRisk', 'stockMove', 'pfImpact', 'cummPf', 'openHeat',\r\n            'unrealizedPL', 'realisedAmount', 'plRs'\r\n          ].includes(key)) return true;\r\n\r\n          if (key.includes('Date') && (originalVal === '-' || originalVal === '')) return true;\r\n          return false;\r\n        };\r\n\r\n        // Check if we should skip this field BEFORE any processing\r\n        if (shouldSkipField(col.key, originalValue)) return null;\r\n\r\n        // Handle accounting-aware calculations\r\n        if (col.key === 'unrealizedPL') {\r\n          if (trade.positionStatus === 'Open' || trade.positionStatus === 'Partial') {\r\n            value = calcUnrealizedPL(trade.avgEntry, trade.cmp, trade.openQty, trade.buySell);\r\n          } else {\r\n            value = \"-\";\r\n          }\r\n        } else if (col.key === 'plRs') {\r\n          const tooltipValues = getAccountingAwareValues(trade);\r\n          value = tooltipValues.plRs;\r\n        } else if (col.key === 'realisedAmount') {\r\n          const tooltipValues = getAccountingAwareValues(trade);\r\n          value = tooltipValues.realisedAmount;\r\n        } else if (col.key === 'pfImpact') {\r\n          const tooltipValues = getAccountingAwareValues(trade);\r\n          value = tooltipValues.pfImpact;\r\n        } else if (col.key === 'cummPf') {\r\n          // The cummPf value is already calculated correctly based on accounting method in use-trades.ts\r\n          value = `${Number(trade.cummPf ?? 0).toFixed(2)}%`;\r\n        }\r\n\r\n        // Format values appropriately\r\n        if ([\"pyramid1Date\", \"pyramid2Date\", \"exit1Date\", \"exit2Date\", \"exit3Date\"].includes(col.key)) {\r\n          value = value ? formatDate(value as string) : \"-\";\r\n        } else if ([\"entry\", \"avgEntry\", \"sl\", \"tsl\", \"cmp\", \"pyramid1Price\", \"pyramid2Price\", \"exit1Price\", \"exit2Price\", \"exit3Price\", \"avgExitPrice\", \"realisedAmount\", \"plRs\", \"unrealizedPL\"].includes(col.key)) {\r\n          value = typeof value === 'number' ? formatCurrency(value) : value;\r\n        } else if ([\"pfImpact\", \"rewardRisk\", \"stockMove\", \"openHeat\", \"allocation\", \"slPercent\"].includes(col.key)) {\r\n          if (col.key !== 'pfImpact' && col.key !== 'cummPf') {\r\n            let originalValue = Number(value);\r\n            if (col.key === \"rewardRisk\") {\r\n              const rrStr = originalValue % 1 === 0 ? originalValue.toFixed(0) : originalValue.toFixed(2);\r\n              value = originalValue > 0 ? `${rrStr}R` : '-';\r\n            } else {\r\n              value = `${originalValue.toFixed(2)}`;\r\n              if (!(col.key.includes(\"Price\") || col.key.includes(\"Amount\") || col.key.includes(\"Rs\"))) {\r\n                 value += \"%\";\r\n              }\r\n            }\r\n          } else if (col.key === 'pfImpact') {\r\n            value = `${Number(value).toFixed(2)}%`;\r\n          }\r\n        } else if (col.key === \"planFollowed\") {\r\n          value = trade.planFollowed ? \"Yes\" : \"No\";\r\n        } else if (col.key === 'positionSize') {\r\n          value = typeof value === 'number' ? Math.round(value).toString() : value;\r\n        } else if (col.key === 'holdingDays') {\r\n          value = typeof value === 'number' ? `${value} day${value !== 1 ? 's' : ''}` : value;\r\n        } else if (value === undefined || value === null || value === \"\"){\r\n          value = \"-\";\r\n        }\r\n\r\n        return {\r\n          key: col.key,\r\n          label: col.label,\r\n          value: String(value)\r\n        };\r\n      }).filter(Boolean);\r\n\r\n      tradeTooltips.tradeDetails = {\r\n        fields: tradeDetailsFields,\r\n        tradeName: trade.name,\r\n        accountingMethod: useCashBasis ? 'Cash Basis' : 'Accrual Basis'\r\n      };\r\n\r\n      // Pre-compute stock move tooltip\r\n      const stockMoveEntries = [\r\n        { price: trade.entry, qty: trade.initialQty, description: 'Initial Entry' },\r\n        { price: trade.pyramid1Price, qty: trade.pyramid1Qty, description: 'Pyramid 1' },\r\n        { price: trade.pyramid2Price, qty: trade.pyramid2Qty, description: 'Pyramid 2' }\r\n      ].filter(e => e.price > 0 && e.qty > 0);\r\n\r\n      const individualMoves = calcIndividualMoves(\r\n        stockMoveEntries,\r\n        trade.cmp,\r\n        trade.avgExitPrice,\r\n        trade.positionStatus,\r\n        trade.buySell\r\n      );\r\n\r\n      tradeTooltips.stockMove = {\r\n        individualMoves,\r\n        positionStatus: trade.positionStatus\r\n      };\r\n\r\n      tooltipData.set(trade.id, tradeTooltips);\r\n    });\r\n\r\n    return tooltipData;\r\n  }, [items]);\r\n\r\n  // Render holding days with pre-computed data\r\n  const renderHoldingDays = (trade: Trade) => {\r\n    const tooltipData = precomputedTooltips.get(trade.id)?.holdingDays;\r\n    if (!tooltipData) return <div className=\"py-1 px-2\">-</div>;\r\n\r\n    const { displayDays, lotBreakdown, isOpenPosition, isPartialPosition } = tooltipData;\r\n\r\n    let tooltipContent;\r\n    if (isOpenPosition) {\r\n      tooltipContent = (\r\n        <div className=\"flex flex-col gap-1 text-xs max-w-xs min-w-[120px]\">\r\n          <div className=\"font-semibold\">Holding Days</div>\r\n          {lotBreakdown.filter((l: any) => !l.exited).map((l: any, idx: number) => (\r\n            <div key={idx} className=\"flex justify-between\">\r\n              <span>{l.label}</span>\r\n              <span className=\"font-mono\">{l.days} day{l.days !== 1 ? 's' : ''}</span>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-foreground-500 mt-1 text-[10px]\">\r\n            Days since entry for each open lot.\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (isPartialPosition) {\r\n      tooltipContent = (\r\n        <div className=\"flex flex-col gap-1 text-xs max-w-xs min-w-[120px]\">\r\n          <div className=\"font-semibold\">Holding Days</div>\r\n          {lotBreakdown.map((l: any, idx: number) => (\r\n            <div key={idx} className=\"flex justify-between\">\r\n              <span>{l.label} {l.exited ? '(sold)' : '(open)'}</span>\r\n              <span className=\"font-mono\">{l.days} day{l.days !== 1 ? 's' : ''}</span>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-foreground-500 mt-1 text-[10px]\">\r\n            Days since entry for open lots, entry to exit for sold lots (FIFO).\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      tooltipContent = (\r\n        <div className=\"flex flex-col gap-1 text-xs max-w-xs min-w-[120px]\">\r\n          <div className=\"font-semibold\">Holding Days</div>\r\n          {lotBreakdown.map((l: any, idx: number) => (\r\n            <div key={idx} className=\"flex justify-between\">\r\n              <span>{l.label}</span>\r\n              <span className=\"font-mono\">{l.days} day{l.days !== 1 ? 's' : ''}</span>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-foreground-500 mt-1 text-[10px]\">\r\n            Entry to exit for each lot (FIFO).\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Tooltip\r\n        content={tooltipContent}\r\n        placement=\"top\"\r\n        delay={100}\r\n        closeDelay={50}\r\n        radius=\"sm\"\r\n        shadow=\"md\"\r\n        classNames={{ content: \"bg-content1 border border-divider z-50 max-w-xs\" }}\r\n      >\r\n        <div className=\"py-1 px-2 flex items-center gap-0.5 relative\">\r\n          {displayDays}\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-alert-circle text-warning cursor-help\" style={{marginLeft: 2}}>\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n            <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\r\n            <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\r\n          </svg>\r\n        </div>\r\n      </Tooltip>\r\n    );\r\n  };\r\n\r\n  const renderCell = React.useCallback((trade: Trade, columnKey: string) => {\r\n    const cellValue = trade[columnKey as keyof Trade];\r\n\r\n    // Trade details tooltip for stock name (precomputed)\r\n    if (columnKey === 'name') {\r\n      const tooltipData = precomputedTooltips.get(trade.id)?.tradeDetails;\r\n      if (!tooltipData) {\r\n        return (\r\n          <div className=\"cursor-help\" data-trade-id={trade.id} data-field=\"name\" tabIndex={0}>\r\n            <NameCell\r\n              key={`${trade.id}-name`}\r\n              value={trade.name}\r\n              onSave={(value) => handleInlineEditSave(trade.id, 'name', value)}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n\r\n      const { fields, tradeName, accountingMethod } = tooltipData;\r\n      const tooltipContent = (\r\n        <div className=\"p-3 text-xs max-w-2xl break-words\">\r\n          <div className=\"flex justify-between items-center mb-2\">\r\n            <h4 className=\"font-semibold text-sm\">Trade Details: {tradeName}</h4>\r\n            <div className=\"text-xs px-2 py-1 rounded bg-primary/20 text-primary\">\r\n              {accountingMethod}\r\n            </div>\r\n          </div>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2\">\r\n            {fields.map((field: any) => (\r\n              <div key={field.key} className=\"bg-content2/40 dark:bg-content2/30 p-1.5 rounded shadow-sm overflow-hidden text-ellipsis whitespace-nowrap\">\r\n                <span className=\"font-medium text-default-700 dark:text-default-300\">{field.label}: </span>\r\n                <span className=\"text-default-600 dark:text-default-400 whitespace-nowrap\">{field.value}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      return (\r\n        <Tooltip\r\n          content={tooltipContent}\r\n          placement=\"right-start\"\r\n          delay={0}\r\n          closeDelay={0}\r\n          radius=\"sm\"\r\n          shadow=\"md\"\r\n          classNames={{ content: \"bg-content1 border border-divider\" }}\r\n        >\r\n          <div className=\"cursor-help\" data-trade-id={trade.id} data-field=\"name\" tabIndex={0}>\r\n            <NameCell\r\n              key={`${trade.id}-name`}\r\n              value={trade.name}\r\n              onSave={(value) => handleInlineEditSave(trade.id, 'name', value)}\r\n            />\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    }\r\n\r\n    // Format holding days with lazy tooltip calculation\r\n    if (columnKey === 'holdingDays') {\r\n      return renderHoldingDays(trade);\r\n    }\r\n\r\n    // Tooltip for Reward:Risk (R:R) with pre-computed data\r\n    if (columnKey === 'rewardRisk') {\r\n      const tooltipData = precomputedTooltips.get(trade.id)?.rewardRisk;\r\n      if (!tooltipData) {\r\n        return <div className=\"py-1 px-2\">-</div>;\r\n      }\r\n\r\n      const {\r\n        entryBreakdown,\r\n        weightedRR,\r\n        totalQtyAll,\r\n        tsl,\r\n        traditionalWeightedRR,\r\n        effectiveRR,\r\n        hasRiskFreePositions,\r\n        totalRiskAmount,\r\n        totalRewardAmount\r\n      } = tooltipData;\r\n      const weightedRRDisplay = totalQtyAll > 0 ? weightedRR.toFixed(2) : '0.00';\r\n\r\n      const rrTooltipContent = (\r\n        <div className=\"flex flex-col gap-1 text-xs max-w-xs min-w-[180px]\">\r\n          <div className=\"font-semibold\">Reward:Risk Breakdown</div>\r\n          {entryBreakdown.map((e: any, idx: number) => (\r\n            <div key={idx} className=\"flex flex-col gap-0.5 border-b border-divider pb-1 mb-1 last:border-0 last:pb-0 last:mb-0\">\r\n              <div className=\"font-medium\">{e.label} (Entry: {e.price})</div>\r\n              {trade.positionStatus === 'Partial' && (e.exitedQtyForEntry > 0 || e.openQtyForEntry > 0) && (\r\n                <div className=\"text-[10px] text-foreground-600\">\r\n                  {e.exitedQtyForEntry > 0 && `Exited: ${e.exitedQtyForEntry} qty`}\r\n                  {e.exitedQtyForEntry > 0 && e.openQtyForEntry > 0 && ' | '}\r\n                  {e.openQtyForEntry > 0 && `Open: ${e.openQtyForEntry} qty`}\r\n                </div>\r\n              )}\r\n              <div><b>Risk:</b> |{trade.buySell === 'Buy' ? 'Entry - ' : ''}{(e.label === 'Initial Entry' ? 'SL' : (e.stop === tsl && tsl > 0 ? 'TSL' : 'SL'))}{trade.buySell === 'Sell' ? ' - Entry' : ''}| = {trade.buySell === 'Buy' ? `${e.price} - ${e.stop}` : `${e.stop} - ${e.price}`} = {e.rawRisk.toFixed(2)}</div>\r\n              {e.rawRisk < 0 && e.label !== 'Initial Entry' && (\r\n                <div className=\"text-warning-600 text-[10px]\">\r\n                  Negative risk: This pyramid is financed from the cushion of earlier profits.\r\n                </div>\r\n              )}\r\n              <div><b>Reward:</b> {e.rewardFormula}</div>\r\n              <div><b>R:R:</b> |{e.reward.toFixed(2)} / {e.risk.toFixed(2)}| = <span className={`${e.isRiskFree ? 'text-success font-bold' : 'text-primary'}`}>\r\n                {e.isRiskFree ? '∞ (Risk-Free)' : `${e.rrValue % 1 === 0 ? e.rrValue.toFixed(0) : e.rrValue.toFixed(2)}R`}\r\n              </span></div>\r\n            </div>\r\n          ))}\r\n          <div className=\"font-semibold mt-1 border-t border-divider pt-1\">Overall R:R Analysis</div>\r\n\r\n          {hasRiskFreePositions && (\r\n            <div className=\"bg-success-50 dark:bg-success-900/20 p-2 rounded text-[10px] mb-2\">\r\n              <div className=\"font-semibold text-success-700 dark:text-success-300\">🎯 Position Contains Risk-Free Components!</div>\r\n              <div className=\"text-success-600 dark:text-success-400\">Some entries have zero risk (TSL at entry price)</div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"space-y-1\">\r\n            <div>\r\n              <b>Traditional Weighted R:R:</b> <span className='text-primary'>{traditionalWeightedRR % 1 === 0 ? traditionalWeightedRR.toFixed(0) : traditionalWeightedRR.toFixed(2)}R</span>\r\n              <div className=\"text-[10px] text-foreground-500\">\r\n                (Excludes risk-free positions from calculation)\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <b>Effective Position R:R:</b> <span className={`${effectiveRR === Infinity ? 'text-success font-bold' : 'text-primary'}`}>\r\n                {effectiveRR === Infinity ? '∞ (Risk-Free Position)' : `${effectiveRR % 1 === 0 ? effectiveRR.toFixed(0) : effectiveRR.toFixed(2)}R`}\r\n              </span>\r\n              <div className=\"text-[10px] text-foreground-500\">\r\n                Total Reward (₹{Math.abs(totalRewardAmount).toFixed(2)}) ÷ Total Risk (₹{totalRiskAmount.toFixed(2)})\r\n              </div>\r\n            </div>\r\n\r\n            {hasRiskFreePositions && (\r\n              <div className=\"text-[10px] text-warning-600 dark:text-warning-400 mt-1\">\r\n                💡 Risk-free positions provide unlimited upside with zero additional downside risk\r\n              </div>\r\n            )}\r\n          </div>\r\n          {tooltipData && (\r\n            <div className=\"text-foreground-500 mt-1 text-[10px] border-t border-divider pt-1\">\r\n              {trade.positionStatus === 'Open' && '* All rewards are unrealized (based on current CMP)'}\r\n              {trade.positionStatus === 'Closed' && '* All rewards are realized (based on actual exit prices)'}\r\n              {trade.positionStatus === 'Partial' && '* FIFO-based: Realized rewards for exited qty per entry, unrealized for remaining qty'}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n\r\n      return (\r\n        <Tooltip\r\n          content={rrTooltipContent}\r\n          placement=\"top\"\r\n          delay={100}\r\n          closeDelay={50}\r\n          radius=\"sm\"\r\n          shadow=\"md\"\r\n          classNames={{ content: \"bg-content1 border border-divider z-50 max-w-xs\" }}\r\n        >\r\n          <div className=\"py-1 px-2 flex items-center gap-1 relative\">\r\n            {hasRiskFreePositions && effectiveRR === Infinity ? (\r\n              <span className=\"text-success font-bold\">∞ (Risk-Free)</span>\r\n            ) : weightedRR > 0 ? (\r\n              `${weightedRR % 1 === 0 ? weightedRR.toFixed(0) : weightedRR.toFixed(2)}R`\r\n            ) : '-'}\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-alert-circle text-warning cursor-help\" style={{marginLeft: 2}}>\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n              <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\r\n              <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\r\n            </svg>\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    }\r\n\r\n    // Tooltip for Stock Move (%) with pre-computed data\r\n    if (columnKey === 'stockMove') {\r\n      const tooltipData = precomputedTooltips.get(trade.id)?.stockMove;\r\n      if (!tooltipData) {\r\n        return <div className=\"py-1 px-2\">-</div>;\r\n      }\r\n\r\n      const { individualMoves, positionStatus } = tooltipData;\r\n      const formatPercentage = (value: number | null | undefined): string => {\r\n        if (value === null || value === undefined) return \"-\";\r\n        return `${value.toFixed(2)}%`;\r\n      };\r\n\r\n      const tooltipContent = (\r\n        <div className=\"flex flex-col gap-1 text-xs max-w-xs min-w-[180px]\">\r\n          <div className=\"font-semibold\">Individual Stock Moves:</div>\r\n          {individualMoves.map((move: any, index: number) => (\r\n            <div key={index} className=\"flex justify-between\">\r\n              <span>{move.description} <span className=\"text-foreground-400\">({move.qty} qty)</span></span>\r\n              <span className=\"font-mono\">{formatPercentage(move.movePercent)}</span>\r\n            </div>\r\n          ))}\r\n          <div className=\"text-foreground-500 mt-1 text-[10px]\">\r\n            {positionStatus === 'Open'\r\n              ? '* Unrealized moves based on CMP vs. entry prices.'\r\n              : positionStatus === 'Partial'\r\n                ? '* Mixed moves: Realized (Avg. Exit) for exited qty, Unrealized (CMP) for open qty.'\r\n                : '* Realized moves based on Avg. Exit vs. entry prices.'}\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      return (\r\n        <Tooltip\r\n          content={tooltipContent}\r\n          placement=\"top\"\r\n          delay={100}\r\n          closeDelay={50}\r\n          radius=\"sm\"\r\n          shadow=\"md\"\r\n          classNames={{ content: \"bg-content1 border border-divider z-50 max-w-xs\" }}\r\n        >\r\n          <div className=\"py-1 px-2 flex items-center gap-1 relative\">\r\n            {trade.stockMove !== undefined && trade.stockMove !== null ? `${Number(trade.stockMove).toFixed(2)}%` : '-'}\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"lucide lucide-alert-circle text-warning cursor-help\" style={{marginLeft: 2}}>\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n              <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\r\n              <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\r\n            </svg>\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    }\r\n\r\n    // Special handling for accounting-aware fields BEFORE non-editable check\r\n    if (columnKey === \"plRs\" || columnKey === \"realisedAmount\") {\r\n      // CRITICAL FIX: Always calculate P/L properly using getAccountingAwareValues\r\n      const accountingValues = getAccountingAwareValues(trade);\r\n      const displayValue = columnKey === \"realisedAmount\" ? accountingValues.realisedAmount : accountingValues.plRs;\r\n\r\n      return (\r\n        <div className={`py-1 px-2 text-right whitespace-nowrap ${getValueColor(displayValue, columnKey)}`}>\r\n          {formatCellValue(displayValue, columnKey)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Special handling for openHeat BEFORE non-editable check\r\n    if (columnKey === \"openHeat\") {\r\n      // Only show open heat for open/partial positions\r\n      if (trade.positionStatus === 'Open' || trade.positionStatus === 'Partial') {\r\n        const openHeatValue = calcTradeOpenHeat(trade, portfolioSize, getPortfolioSize);\r\n        return (\r\n          <div className=\"py-1 px-2 text-right whitespace-nowrap\">\r\n            {openHeatValue.toFixed(2)}%\r\n          </div>\r\n        );\r\n      } else {\r\n        return <div className=\"py-1 px-2 text-right whitespace-nowrap\">-</div>;\r\n      }\r\n    }\r\n\r\n    // Skip rendering for non-editable fields\r\n    if (!isEditable(columnKey)) {\r\n      return (\r\n        <div className={`py-1 px-2 ${getValueColor(cellValue, columnKey)}`}>\r\n          {formatCellValue(cellValue, columnKey)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Handle special cell types\r\n    if (columnKey === 'buySell') {\r\n      return (\r\n        <div\r\n          data-trade-id={trade.id}\r\n          data-field=\"buySell\"\r\n          tabIndex={0}\r\n          className=\"focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-1 rounded\"\r\n        >\r\n          <BuySellCell\r\n            key={`${trade.id}-buySell`}\r\n            value={trade.buySell}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'buySell', value)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (columnKey === 'positionStatus') {\r\n      return (\r\n        <div\r\n          data-trade-id={trade.id}\r\n          data-field=\"positionStatus\"\r\n          tabIndex={0}\r\n          className=\"focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-1 rounded\"\r\n        >\r\n          <PositionStatusCell\r\n            key={`${trade.id}-positionStatus`}\r\n            value={trade.positionStatus}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'positionStatus', value)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (columnKey === 'setup') {\r\n      return (\r\n        <div\r\n          data-trade-id={trade.id}\r\n          data-field=\"setup\"\r\n          tabIndex={0}\r\n          className=\"focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-1 rounded\"\r\n        >\r\n          <SetupCell\r\n            key={`${trade.id}-setup`}\r\n            value={trade.setup || ''}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'setup', value)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (columnKey === 'exitTrigger') {\r\n      return (\r\n        <div data-trade-id={trade.id} data-field=\"exitTrigger\" tabIndex={0}>\r\n          <ExitTriggerCell\r\n            key={`${trade.id}-exitTrigger`}\r\n            value={trade.exitTrigger || ''}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'exitTrigger', value)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (columnKey === 'proficiencyGrowthAreas') {\r\n      return (\r\n        <div data-trade-id={trade.id} data-field=\"proficiencyGrowthAreas\" tabIndex={0}>\r\n          <ProficiencyGrowthAreasCell\r\n            key={`${trade.id}-proficiencyGrowthAreas`}\r\n            value={trade.proficiencyGrowthAreas || ''}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'proficiencyGrowthAreas', value)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (columnKey === 'planFollowed') {\r\n      return (\r\n        <div data-trade-id={trade.id} data-field=\"planFollowed\" tabIndex={0}>\r\n          <PlanFollowedCell\r\n            key={`${trade.id}-planFollowed`}\r\n            value={trade.planFollowed}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'planFollowed', value)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (columnKey === 'notes') {\r\n      return (\r\n        <div data-trade-id={trade.id} data-field=\"notes\" tabIndex={0}>\r\n          <NotesCell\r\n            key={`${trade.id}-notes`}\r\n            value={trade.notes || ''}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'notes', value)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    switch (columnKey) {\r\n      // Trade number (editable) with mini upload button\r\n      case \"tradeNo\":\r\n        return (\r\n          <div className=\"flex items-center gap-0.5\">\r\n            <EditableCell\r\n              key={`${trade.id}-${columnKey}`}\r\n              value={cellValue as string}\r\n              onSave={(value) => handleInlineEditSave(trade.id, columnKey as keyof Trade, value)}\r\n              tradeId={trade.id}\r\n              field={columnKey}\r\n            />\r\n            <Tooltip content=\"Upload Charts\">\r\n              <Button\r\n                isIconOnly\r\n                size=\"sm\"\r\n                variant=\"light\"\r\n                onPress={() => handleUploadOnly(trade)}\r\n                className=\"w-3 h-3 min-w-3 rounded p-0 hover:bg-primary/10 transition opacity-60 hover:opacity-90\"\r\n              >\r\n                <Icon icon=\"lucide:upload\" className=\"w-2.5 h-2.5\" />\r\n              </Button>\r\n            </Tooltip>\r\n          </div>\r\n        );\r\n\r\n      // Date fields - editable\r\n      case \"date\":\r\n      case \"pyramid1Date\":\r\n      case \"pyramid2Date\":\r\n      case \"exit1Date\":\r\n      case \"exit2Date\":\r\n      case \"exit3Date\":\r\n        return <EditableCell key={`${trade.id}-${columnKey}`} value={cellValue as string} type=\"date\" onSave={(value) => handleInlineEditSave(trade.id, columnKey as keyof Trade, value)} tradeId={trade.id} field={columnKey} />;\r\n\r\n      // Price fields - check if editable\r\n      case \"entry\":\r\n      case \"sl\":\r\n      case \"tsl\":\r\n      case \"pyramid1Price\":\r\n      case \"pyramid2Price\":\r\n      case \"exit1Price\":\r\n      case \"exit2Price\":\r\n      case \"exit3Price\":\r\n        return <EditableCell key={`${trade.id}-${columnKey}`} value={cellValue as number} type=\"price\" onSave={(value) => handleInlineEditSave(trade.id, columnKey as keyof Trade, value)} tradeId={trade.id} field={columnKey} />;\r\n\r\n      // CMP field - special handling for manual vs auto-fetched\r\n      case \"cmp\":\r\n        return (\r\n          <CMPCell\r\n            key={`${trade.id}-cmp`}\r\n            value={trade.cmp}\r\n            isAutoFetched={trade._cmpAutoFetched}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'cmp', value)}\r\n          />\r\n        );\r\n\r\n      // Non-editable calculated price fields\r\n      case \"avgEntry\":\r\n      case \"avgExitPrice\":\r\n        return (\r\n          <div className=\"py-1 px-2 text-right whitespace-nowrap\">\r\n            {formatCellValue(cellValue, columnKey)}\r\n          </div>\r\n        );\r\n      // Non-editable calculated fields (these cases should not be reached due to special handling above)\r\n      case \"realisedAmount\":\r\n      case \"plRs\":\r\n        // This case should not be reached due to special handling before non-editable check\r\n        const accountingValues = getAccountingAwareValues(trade);\r\n        const displayValue = columnKey === \"realisedAmount\" ? accountingValues.realisedAmount : accountingValues.plRs;\r\n        return (\r\n          <div className={`py-1 px-2 text-right whitespace-nowrap ${getValueColor(displayValue, columnKey)}`}>\r\n            {formatCellValue(displayValue, columnKey)}\r\n          </div>\r\n        );\r\n\r\n      // Quantity fields - editable\r\n      case \"initialQty\":\r\n      case \"pyramid1Qty\":\r\n      case \"pyramid2Qty\":\r\n      case \"exit1Qty\":\r\n      case \"exit2Qty\":\r\n      case \"exit3Qty\":\r\n        return <EditableCell key={`${trade.id}-${columnKey}`} value={cellValue as number} type=\"number\" onSave={(value) => handleInlineEditSave(trade.id, columnKey as keyof Trade, value)} tradeId={trade.id} field={columnKey} />;\r\n\r\n      // Non-editable calculated quantity fields\r\n      case \"positionSize\":\r\n      case \"openQty\":\r\n      case \"exitedQty\":\r\n      case \"holdingDays\":\r\n        return (\r\n          <div className=\"py-1 px-2 text-right whitespace-nowrap\">\r\n            {formatCellValue(cellValue, columnKey)}\r\n          </div>\r\n        );\r\n\r\n      // Non-editable calculated percentage fields\r\n      case \"allocation\":\r\n      case \"stockMove\":\r\n        return (\r\n          <div className=\"py-1 px-2 text-right whitespace-nowrap\">\r\n            {formatCellValue(cellValue, columnKey)}\r\n          </div>\r\n        );\r\n      case \"pfImpact\":\r\n        const pfImpactValues = getAccountingAwareValues(trade);\r\n        return (\r\n          <div className=\"py-1 px-2 text-right whitespace-nowrap\">\r\n            {formatCellValue(pfImpactValues.pfImpact, columnKey)}\r\n          </div>\r\n        );\r\n      case \"cummPf\":\r\n        return (\r\n          <div className=\"py-1 px-2 text-right whitespace-nowrap\">\r\n            {formatCellValue(cellValue, columnKey)}\r\n          </div>\r\n        );\r\n      // Non-editable calculated reward:risk field\r\n      case \"rewardRisk\":\r\n        return (\r\n          <div className=\"py-1 px-2 text-right whitespace-nowrap\">\r\n            {formatCellValue(cellValue, columnKey)}\r\n          </div>\r\n        );\r\n      case \"buySell\":\r\n        return <BuySellCell key={`${trade.id}-buySell`} value={trade.buySell} onSave={(value) => handleInlineEditSave(trade.id, \"buySell\", value)} />;\r\n      case \"positionStatus\":\r\n        return <PositionStatusCell key={`${trade.id}-positionStatus`} value={trade.positionStatus} onSave={(value) => handleInlineEditSave(trade.id, \"positionStatus\", value)} />;\r\n      case \"planFollowed\":\r\n        return <PlanFollowedCell key={`${trade.id}-planFollowed`} value={trade.planFollowed} onSave={(value) => handleInlineEditSave(trade.id, \"planFollowed\", value)} />;\r\n      case \"slPercent\":\r\n        const slPercent = calcSLPercent(trade.sl, trade.entry);\r\n        return (\r\n          <div className=\"text-right font-medium text-small whitespace-nowrap\">\r\n            {slPercent > 0 ? `${slPercent.toFixed(2)}%` : \"-\"}\r\n          </div>\r\n        );\r\n      case \"chartAttachments\":\r\n        const hasBeforeEntry = trade.chartAttachments?.beforeEntry;\r\n        const hasAfterExit = trade.chartAttachments?.afterExit;\r\n\r\n        // Force re-render by using a key that includes chart attachment info\r\n        const chartKey = `${trade.id}-${hasBeforeEntry?.id || 'no-before'}-${hasAfterExit?.id || 'no-after'}`;\r\n\r\n        // Debug logging for chart attachments\r\n        if (trade.name === 'ASIANHOTNR' || trade.name === 'RELIANCE') { // Add your test trade names here\r\n          }\r\n\r\n        if (!hasBeforeEntry && !hasAfterExit) {\r\n          return (\r\n            <div key={chartKey} className=\"flex items-center justify-center gap-1 py-1 px-2\">\r\n              <span className=\"text-gray-400 text-xs\">No charts</span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div key={chartKey} className=\"flex items-center justify-center gap-1 py-1 px-2\">\r\n            {hasBeforeEntry && (\r\n              <Tooltip content=\"View Before Entry Chart\">\r\n                <Button\r\n                  isIconOnly\r\n                  size=\"sm\"\r\n                  variant=\"light\"\r\n                  onPress={() => handleChartImageView(\r\n                    hasBeforeEntry,\r\n                    `${trade.name} - Before Entry Chart`\r\n                  )}\r\n                  className=\"text-blue-500 hover:text-blue-600\"\r\n                >\r\n                  <Icon icon=\"lucide:trending-up\" className=\"w-4 h-4\" />\r\n                </Button>\r\n              </Tooltip>\r\n            )}\r\n            {hasAfterExit && (\r\n              <Tooltip content=\"View After Exit Chart\">\r\n                <Button\r\n                  isIconOnly\r\n                  size=\"sm\"\r\n                  variant=\"light\"\r\n                  onPress={() => handleChartImageView(\r\n                    hasAfterExit,\r\n                    `${trade.name} - After Exit Chart`\r\n                  )}\r\n                  className=\"text-green-500 hover:text-green-600\"\r\n                >\r\n                  <Icon icon=\"lucide:trending-down\" className=\"w-4 h-4\" />\r\n                </Button>\r\n              </Tooltip>\r\n            )}\r\n            {(hasBeforeEntry || hasAfterExit) && (\r\n              <div className=\"text-xs text-gray-500 ml-1\">\r\n                {hasBeforeEntry && hasAfterExit ? '2' : '1'}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      case \"actions\":\r\n        return (\r\n          <div className=\"flex items-center justify-end gap-1\">\r\n            <Tooltip content=\"Edit trade (modal)\">\r\n              <Button\r\n                isIconOnly\r\n                variant=\"light\"\r\n                onPress={() => handleEdit(trade)}\r\n                className=\"w-5 h-5 min-w-5 rounded p-0.5 hover:bg-primary/10 transition\"\r\n              >\r\n                <Icon icon=\"lucide:edit-3\" className=\"w-3 h-3\" />\r\n              </Button>\r\n            </Tooltip>\r\n            <Tooltip content=\"Delete trade\">\r\n              <Button\r\n                isIconOnly\r\n                variant=\"light\"\r\n                color=\"danger\"\r\n                onPress={() => handleDelete(trade)}\r\n                className=\"w-5 h-5 min-w-5 rounded p-0.5 hover:bg-danger/10 transition\"\r\n              >\r\n                <Icon icon=\"lucide:trash-2\" className=\"w-3 h-3\" />\r\n              </Button>\r\n            </Tooltip>\r\n          </div>\r\n        );\r\n      case 'unrealizedPL':\r\n        if (trade.positionStatus === 'Open' || trade.positionStatus === 'Partial') {\r\n          return (\r\n            <div className=\"py-1 px-2 text-right whitespace-nowrap\">\r\n              {formatCellValue(calcUnrealizedPL(trade.avgEntry, trade.cmp, trade.openQty, trade.buySell), 'plRs')}\r\n            </div>\r\n          );\r\n        } else {\r\n          return <div className=\"py-1 px-2 text-right whitespace-nowrap\">-</div>;\r\n        }\r\n\r\n      case 'notes':\r\n        return (\r\n          <NotesCell\r\n            key={`${trade.id}-notes`}\r\n            value={trade.notes || ''}\r\n            onSave={(value) => handleInlineEditSave(trade.id, 'notes', value)}\r\n          />\r\n        );\r\n      default:\r\n        const val = trade[columnKey as keyof Trade];\r\n        return val !== undefined && val !== null ? String(val) : \"-\";\r\n    }\r\n  }, [editingId, handleInlineEditSave, isEditable, portfolioSize, getPortfolioSize]);\r\n\r\n  // Stable stats calculation - prevent layout shifts and excessive recalculation\r\n  const [statsLoaded, setStatsLoaded] = React.useState(true); // Start as loaded to prevent layout shift\r\n  const [lazyStats, setLazyStats] = React.useState({\r\n    totalUnrealizedPL: 0,\r\n    openPfImpact: 0,\r\n    totalRealizedPL: 0,\r\n    realizedPfImpact: 0,\r\n    openHeat: 0,\r\n    winRate: 0\r\n  });\r\n\r\n  // Stats calculation that responds to trade data changes\r\n  const stableStatsCalculation = React.useMemo(() => {\r\n    if (originalTrades.length === 0) {\r\n      return {\r\n        totalUnrealizedPL: 0,\r\n        openPfImpact: 0,\r\n        totalRealizedPL: 0,\r\n        realizedPfImpact: 0,\r\n        openHeat: 0,\r\n        winRate: 0\r\n      };\r\n    }\r\n\r\n    // CRITICAL FIX: Use processedTrades for stats calculation to include local updates\r\n    const tradesForStats = processedTrades;\r\n\r\n    // Calculate unrealized P/L for open positions using filtered trades to respond to search\r\n    // For cash basis, we need to be careful not to double count, so we'll use a Set to track original trade IDs\r\n    let unrealizedPL = 0;\r\n    if (useCashBasis) {\r\n      // For cash basis, only count each original trade once for unrealized P/L\r\n      const processedTradeIds = new Set();\r\n      tradesForStats\r\n        .filter(trade => trade.positionStatus === 'Open' || trade.positionStatus === 'Partial')\r\n        .forEach(trade => {\r\n          const originalId = trade.id.split('_exit_')[0]; // Get original trade ID\r\n          if (!processedTradeIds.has(originalId)) {\r\n            processedTradeIds.add(originalId);\r\n            unrealizedPL += calcUnrealizedPL(trade.avgEntry, trade.cmp, trade.openQty, trade.buySell);\r\n          }\r\n        });\r\n    } else {\r\n      // For accrual basis, straightforward calculation\r\n      unrealizedPL = tradesForStats\r\n        .filter(trade => trade.positionStatus === 'Open' || trade.positionStatus === 'Partial')\r\n        .reduce((sum, trade) => sum + calcUnrealizedPL(trade.avgEntry, trade.cmp, trade.openQty, trade.buySell), 0);\r\n    }\r\n\r\n    const openImpact = portfolioSize > 0 ? (unrealizedPL / portfolioSize) * 100 : 0;\r\n\r\n    // Calculate realized P/L based on accounting method using processed trades\r\n    let realizedTrades;\r\n    if (useCashBasis) {\r\n      // For cash basis: flatten all expanded trades from _expandedTrades arrays\r\n      realizedTrades = processedTrades.flatMap(trade =>\r\n        Array.isArray(trade._expandedTrades)\r\n          ? trade._expandedTrades.filter(t => t._cashBasisExit)\r\n          : (trade._cashBasisExit ? [trade] : [])\r\n      );\r\n\r\n    } else {\r\n      // For accrual basis: include all non-open trades\r\n      realizedTrades = processedTrades.filter(trade => trade.positionStatus !== 'Open');\r\n    }\r\n\r\n    let debugSum = 0;\r\n    const realizedPL = realizedTrades.reduce((sum, trade, index) => {\r\n      const tradePL = calculateTradePL(trade, useCashBasis);\r\n      debugSum += tradePL;\r\n\r\n      return sum + tradePL;\r\n    }, 0);\r\n\r\n    // Calculate realized PF Impact using accounting-aware portfolio sizes (same as tooltip)\r\n    const realizedImpact = realizedTrades.reduce((sum, trade) => {\r\n      const pfImpact = useCashBasis\r\n        ? (trade._cashPfImpact ?? 0)\r\n        : (trade._accrualPfImpact ?? trade.pfImpact ?? 0);\r\n      return sum + pfImpact;\r\n    }, 0);\r\n\r\n    // Calculate open heat using filtered trades to respond to search\r\n    // For cash basis, avoid double counting by using original trade IDs\r\n    let filteredTradesForOpenHeat = tradesForStats;\r\n    if (useCashBasis) {\r\n      // For cash basis, only include each original trade once\r\n      const seenTradeIds = new Set();\r\n      filteredTradesForOpenHeat = tradesForStats.filter(trade => {\r\n        const originalId = trade.id.split('_exit_')[0];\r\n        if (seenTradeIds.has(originalId)) {\r\n          return false;\r\n        }\r\n        seenTradeIds.add(originalId);\r\n        return true;\r\n      });\r\n    }\r\n    const openHeat = calcOpenHeat(filteredTradesForOpenHeat, portfolioSize, getPortfolioSize);\r\n\r\n    // Calculate win rate using processed trades for cash basis\r\n    let tradesWithAccountingPL;\r\n\r\n    if (useCashBasis) {\r\n      // For cash basis: Group trades by original ID and calculate total P/L per original trade\r\n      const tradeGroups = new Map<string, Trade[]>();\r\n\r\n      tradesForStats\r\n        .filter(trade => trade._cashBasisExit || trade.positionStatus !== 'Open')\r\n        .forEach(trade => {\r\n          const originalId = trade.id.split('_exit_')[0];\r\n          if (!tradeGroups.has(originalId)) {\r\n            tradeGroups.set(originalId, []);\r\n          }\r\n          tradeGroups.get(originalId)!.push(trade);\r\n        });\r\n\r\n      // Calculate total P/L for each original trade\r\n      tradesWithAccountingPL = Array.from(tradeGroups.entries()).map(([originalId, trades]) => {\r\n        // Sum up P/L from all exits for this trade\r\n        const totalPL = trades.reduce((sum, trade) => {\r\n          return sum + calculateTradePL(trade, useCashBasis);\r\n        }, 0);\r\n\r\n        // Use the first trade as the representative (they all have the same original data)\r\n        const representativeTrade = trades[0];\r\n\r\n        return {\r\n          ...representativeTrade,\r\n          id: originalId, // Use original ID\r\n          accountingPL: totalPL\r\n        };\r\n      });\r\n    } else {\r\n      // For accrual basis: Use trades as-is\r\n      tradesWithAccountingPL = tradesForStats\r\n        .filter(trade => trade.positionStatus !== 'Open')\r\n        .map(trade => ({\r\n          ...trade,\r\n          accountingPL: calculateTradePL(trade, useCashBasis)\r\n        }));\r\n    }\r\n\r\n    const winningTrades = tradesWithAccountingPL.filter(t => t.accountingPL > 0);\r\n    const winRate = tradesWithAccountingPL.length > 0 ? (winningTrades.length / tradesWithAccountingPL.length) * 100 : 0;\r\n\r\n    return {\r\n      totalUnrealizedPL: unrealizedPL,\r\n      openPfImpact: openImpact,\r\n      totalRealizedPL: realizedPL,\r\n      realizedPfImpact: realizedImpact,\r\n      openHeat,\r\n      winRate\r\n    };\r\n  }, [trades, originalTrades, portfolioSize, useCashBasis, getPortfolioSize]); // Now responds to all trade data changes\r\n\r\n  // Update lazy stats when stable calculation changes\r\n  React.useEffect(() => {\r\n    setLazyStats(stableStatsCalculation);\r\n  }, [stableStatsCalculation]);\r\n\r\n  // Memoize open trades to prevent unnecessary price fetching (use processed trades to include local updates)\r\n  const openTrades = React.useMemo(() => {\r\n    let filteredOpenTrades = processedTrades.filter(t => t.positionStatus === 'Open' || t.positionStatus === 'Partial');\r\n\r\n    // For cash basis, avoid double counting by using original trade IDs\r\n    if (useCashBasis) {\r\n      const seenTradeIds = new Set();\r\n      filteredOpenTrades = filteredOpenTrades.filter(t => {\r\n        const originalId = t.id.split('_exit_')[0];\r\n        if (seenTradeIds.has(originalId)) return false;\r\n        seenTradeIds.add(originalId);\r\n        return true;\r\n      });\r\n    }\r\n\r\n    return filteredOpenTrades;\r\n  }, [processedTrades, useCashBasis]);\r\n\r\n  // PERFORMANCE OPTIMIZATION: Batch price fetching with caching\r\n  const priceCache = React.useRef(new Map<string, { price: number, timestamp: number }>());\r\n  const PRICE_CACHE_DURATION = 60000; // 1 minute cache\r\n\r\n  const fetchPricesForOpenTrades = React.useCallback(async () => {\r\n    if (openTrades.length === 0) return;\r\n\r\n    // Batch trades by symbol to reduce API calls\r\n    const tradesBySymbol = new Map<string, Trade[]>();\r\n    const symbolsToFetch: string[] = [];\r\n\r\n    for (const trade of openTrades) {\r\n      if (trade.name) {\r\n        const symbol = trade.name.toUpperCase();\r\n\r\n        // Check cache first\r\n        const cached = priceCache.current.get(symbol);\r\n        if (cached && (Date.now() - cached.timestamp) < PRICE_CACHE_DURATION) {\r\n          // Use cached price\r\n          if (trade.cmp !== cached.price) {\r\n            updateTrade({ ...trade, cmp: cached.price, _cmpAutoFetched: true });\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (!tradesBySymbol.has(symbol)) {\r\n          tradesBySymbol.set(symbol, []);\r\n          symbolsToFetch.push(symbol);\r\n        }\r\n        tradesBySymbol.get(symbol)!.push(trade);\r\n      }\r\n    }\r\n\r\n    // Fetch prices in parallel batches for maximum speed\r\n    const batchSize = 5; // Limit concurrent requests\r\n    for (let i = 0; i < symbolsToFetch.length; i += batchSize) {\r\n      const batch = symbolsToFetch.slice(i, i + batchSize);\r\n\r\n      await Promise.allSettled(\r\n        batch.map(async (symbol) => {\r\n          try {\r\n            const priceData = await fetchPriceTicksSmart(symbol);\r\n            const ticks = priceData?.data?.ticks?.[symbol];\r\n\r\n            if (ticks && ticks.length > 0) {\r\n              const latestTick = ticks[ticks.length - 1];\r\n              const newPrice = latestTick[4];\r\n\r\n              // Cache the price\r\n              priceCache.current.set(symbol, {\r\n                price: newPrice,\r\n                timestamp: Date.now()\r\n              });\r\n\r\n              // Update all trades with this symbol\r\n              const tradesToUpdate = tradesBySymbol.get(symbol) || [];\r\n              for (const trade of tradesToUpdate) {\r\n                if (trade.cmp !== newPrice) {\r\n                  updateTrade({ ...trade, cmp: newPrice, _cmpAutoFetched: true });\r\n                }\r\n              }\r\n            }\r\n          } catch (err) {\r\n            // Continue with next symbol\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }, [openTrades, updateTrade]);\r\n\r\n  useEffect(() => {\r\n    // Immediate fetch on mount or open trades change\r\n    fetchPricesForOpenTrades();\r\n\r\n    // Continue polling every 15 seconds\r\n    const interval = setInterval(fetchPricesForOpenTrades, 15000);\r\n    return () => clearInterval(interval);\r\n  }, [fetchPricesForOpenTrades]);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n\r\n\r\n      {/* Custom CSS for sticky name column */}\r\n      <style>{`\r\n        .sticky-name-header {\r\n          position: sticky !important;\r\n          left: 0 !important;\r\n          z-index: 30 !important;\r\n          background: rgb(244 244 245) !important; /* bg-default-100 */\r\n          min-width: 200px !important;\r\n          max-width: 200px !important;\r\n        }\r\n        .sticky-name-cell {\r\n          position: sticky !important;\r\n          left: 0 !important;\r\n          z-index: 20 !important;\r\n          background: white !important;\r\n          min-width: 200px !important;\r\n          max-width: 200px !important;\r\n        }\r\n        .dark .sticky-name-header {\r\n          background: rgb(17 24 39) !important; /* dark:bg-gray-950 */\r\n        }\r\n        .dark .sticky-name-cell {\r\n          background: rgb(17 24 39) !important; /* dark:bg-gray-900 */\r\n        }\r\n      `}</style>\r\n\r\n      <div className=\"flex flex-col gap-4 mb-6\">\r\n        <AnimatePresence>\r\n          {/* <div>\r\n            <h1 className=\"text-2xl font-bold tracking-tight\">{title}</h1>\r\n          </div> */}\r\n          <div className=\"flex flex-row justify-between items-center gap-4 w-full\">\r\n            <div className=\"flex items-center gap-3 flex-1\">\r\n              <Input\r\n                classNames={{\r\n                  base: \"max-w-[300px]\",\r\n                  inputWrapper: \"h-9 bg-content2 dark:bg-gray-900\",\r\n                  input: \"text-foreground dark:text-white\"\r\n                }}\r\n                placeholder=\"Search trades...\"\r\n                startContent={<Icon icon=\"lucide:search\" className=\"text-default-400 dark:text-default-300\" />}\r\n                value={searchQuery}\r\n                onValueChange={setSearchQuery}\r\n                size=\"sm\"\r\n              />\r\n              <Dropdown>\r\n                <DropdownTrigger>\r\n                  <Button\r\n                    variant=\"flat\"\r\n                    size=\"sm\"\r\n                    className=\"bg-default-100 dark:bg-gray-900 text-foreground dark:text-white min-w-[120px] h-9\"\r\n                    endContent={<Icon icon=\"lucide:chevron-down\" className=\"text-sm dark:text-gray-400\" />}\r\n                  >\r\n                    Status: {statusFilter || \"All\"}\r\n                  </Button>\r\n                </DropdownTrigger>\r\n                <DropdownMenu\r\n                  aria-label=\"Status filter\"\r\n                  className=\"dark:bg-gray-900\"\r\n                  selectionMode=\"single\"\r\n                  selectedKeys={statusFilter ? [statusFilter] : []}\r\n                  onSelectionChange={(keys) => {\r\n                    const selected = Array.from(keys)[0] as string;\r\n                    setStatusFilter(selected === \"All\" ? \"\" : selected);\r\n                  }}\r\n                  classNames={{\r\n                    base: \"dark:bg-gray-900\",\r\n                  }}\r\n                >\r\n                  <DropdownItem key=\"All\" className=\"dark:text-white dark:hover:bg-gray-800\">All</DropdownItem>\r\n                  <DropdownItem key=\"Open\" className=\"dark:text-white dark:hover:bg-gray-800\">Open</DropdownItem>\r\n                  <DropdownItem key=\"Closed\" className=\"dark:text-white dark:hover:bg-gray-800\">Closed</DropdownItem>\r\n                  <DropdownItem key=\"Partial\" className=\"dark:text-white dark:hover:bg-gray-800\">Partial</DropdownItem>\r\n                </DropdownMenu>\r\n              </Dropdown>\r\n\r\n              {/* Temporary debug button to clear filters */}\r\n              {(searchQuery || statusFilter) && (\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"flat\"\r\n                  color=\"warning\"\r\n                  onPress={() => {\r\n                    setSearchQuery('');\r\n                    setStatusFilter('');\r\n\r\n                  }}\r\n                  startContent={<Icon icon=\"lucide:x\" />}\r\n                >\r\n                  Clear Filters\r\n                </Button>\r\n              )}\r\n\r\n              <Dropdown>\r\n                <DropdownTrigger>\r\n                  <Button\r\n                    variant=\"flat\"\r\n                    size=\"sm\"\r\n                    className=\"bg-default-100 dark:bg-gray-900 text-foreground dark:text-white min-w-[120px] h-9\"\r\n                    endContent={<Icon icon=\"lucide:chevron-down\" className=\"text-sm dark:text-gray-400\" />}\r\n                  >\r\n                    Columns\r\n                  </Button>\r\n                </DropdownTrigger>\r\n                <DropdownMenu\r\n                  aria-label=\"Columns selection\"\r\n                  className=\"dark:bg-gray-900 max-h-60 overflow-y-auto\"\r\n                  closeOnSelect={false}\r\n                  selectionMode=\"multiple\"\r\n                  selectedKeys={new Set(visibleColumns)}\r\n                  onSelectionChange={(keys) => setVisibleColumns(Array.from(keys as Set<string>))}\r\n                  classNames={{\r\n                    base: \"dark:bg-gray-900\",\r\n                  }}\r\n                >\r\n                  {/* Select All / Deselect All Controls */}\r\n                  <DropdownItem\r\n                    key=\"select-all\"\r\n                    className=\"dark:text-white transition-all duration-150 hover:scale-[1.02] active:scale-[0.98] hover:bg-primary/10 dark:hover:bg-primary/20\"\r\n                    startContent={\r\n                      <Icon\r\n                        icon={visibleColumns.length === allColumns.length ? \"lucide:check-square-2\" : \"lucide:square\"}\r\n                        className={`text-sm transition-all duration-200 group-hover:scale-110 ${\r\n                          visibleColumns.length === allColumns.length ? \"text-primary\" : \"text-default-400\"\r\n                        }`}\r\n                      />\r\n                    }\r\n                    onPress={() => {\r\n                      // Add haptic feedback\r\n                      if (navigator.vibrate) {\r\n                        navigator.vibrate(15);\r\n                      }\r\n\r\n                      const allColumnKeys = allColumns.map(col => col.key);\r\n                      setVisibleColumns(allColumnKeys);\r\n\r\n                      // Visual feedback\r\n                      const element = document.querySelector('[data-key=\"select-all\"]');\r\n                      if (element) {\r\n                        element.classList.add('animate-pulse');\r\n                        setTimeout(() => element.classList.remove('animate-pulse'), 200);\r\n                      }\r\n                    }}\r\n                  >\r\n                    Select All\r\n                  </DropdownItem>\r\n                  <DropdownItem\r\n                    key=\"deselect-all\"\r\n                    className=\"dark:text-white border-b border-divider mb-1 pb-2 transition-all duration-150 hover:scale-[1.02] active:scale-[0.98] hover:bg-default/10 dark:hover:bg-default/20\"\r\n                    startContent={\r\n                      <Icon\r\n                        icon={visibleColumns.length <= 6 ? \"lucide:square\" : \"lucide:minus-square\"}\r\n                        className={`text-sm transition-all duration-200 group-hover:scale-110 ${\r\n                          visibleColumns.length <= 6 ? \"text-default-400\" : \"text-default-500\"\r\n                        }`}\r\n                      />\r\n                    }\r\n                    onPress={() => {\r\n                      // Add haptic feedback\r\n                      if (navigator.vibrate) {\r\n                        navigator.vibrate(15);\r\n                      }\r\n\r\n                      // Keep essential columns visible including actions\r\n                      const essentialColumns = [\"tradeNo\", \"date\", \"name\", \"buySell\", \"positionStatus\", \"actions\"];\r\n                      setVisibleColumns(essentialColumns);\r\n\r\n                      // Visual feedback\r\n                      const element = document.querySelector('[data-key=\"deselect-all\"]');\r\n                      if (element) {\r\n                        element.classList.add('animate-pulse');\r\n                        setTimeout(() => element.classList.remove('animate-pulse'), 200);\r\n                      }\r\n                    }}\r\n                  >\r\n                    Deselect All\r\n                  </DropdownItem>\r\n\r\n                  {/* Column Selection Items - Include ALL columns including actions */}\r\n                  <React.Fragment>\r\n                    {allColumns.map((column) => (\r\n                      <DropdownItem key={column.key} className=\"capitalize dark:text-white dark:hover:bg-gray-800\">\r\n                        {column.label}\r\n                      </DropdownItem>\r\n                    ))}\r\n                  </React.Fragment>\r\n                </DropdownMenu>\r\n              </Dropdown>\r\n            </div>\r\n\r\n            <motion.div\r\n              className=\"flex items-center gap-0.5\"\r\n            >\r\n              <Tooltip content=\"Browse All Chart Images\">\r\n                <Button\r\n                  isIconOnly\r\n                  variant=\"light\"\r\n                  onPress={() => setIsUniversalViewerOpen(true)}\r\n                  className=\"w-6 h-6 min-w-6 rounded p-0.5 hover:bg-primary/10 transition\"\r\n                >\r\n                  <Icon icon=\"lucide:images\" className=\"w-3 h-3\" />\r\n                </Button>\r\n              </Tooltip>\r\n              <Button\r\n                isIconOnly\r\n                color=\"primary\"\r\n                variant=\"light\"\r\n                onPress={onAddOpen}\r\n                className=\"w-6 h-6 min-w-6 rounded p-0.5 hover:bg-primary/10 transition\"\r\n              >\r\n                <Icon icon=\"lucide:plus\" className=\"w-3 h-3\" />\r\n              </Button>\r\n            </motion.div>\r\n            <MobileTooltip content=\"Import CSV/Excel\" placement=\"top\">\r\n              <Button\r\n                isIconOnly\r\n                variant=\"light\"\r\n                className=\"w-6 h-6 min-w-6 rounded p-0.5 hover:bg-primary/10 transition\"\r\n                onPress={onUploadOpen}\r\n              >\r\n                <Icon icon=\"lucide:upload\" className=\"w-3 h-3\" />\r\n              </Button>\r\n            </MobileTooltip>\r\n            <Dropdown>\r\n              <DropdownTrigger>\r\n                <Button\r\n                  isIconOnly\r\n                  variant=\"light\"\r\n                  className=\"w-6 h-6 min-w-6 rounded p-0.5 hover:bg-primary/10 transition\"\r\n                >\r\n                  <Icon icon=\"lucide:download\" className=\"w-3 h-3\" />\r\n                </Button>\r\n              </DropdownTrigger>\r\n              <DropdownMenu\r\n                aria-label=\"Export options\"\r\n                onAction={(key) => handleExport(key as 'csv' | 'xlsx')}\r\n              >\r\n                <DropdownItem key=\"csv\" textValue=\"Export as CSV\" startContent={<Icon icon=\"lucide:file-text\" />}>\r\n                  Export as CSV\r\n                </DropdownItem>\r\n                <DropdownItem key=\"xlsx\" textValue=\"Export as Excel\" startContent={<Icon icon=\"lucide:file-spreadsheet\" />}>\r\n                  Export as Excel\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n          </div>\r\n        </AnimatePresence>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 items-center\">\r\n        {/* First three stats: Total Trades, Open Positions, Win Rate - Simple calculations */}\r\n        {[{\r\n          title: statsTitle.totalTrades,\r\n          value: trades.length.toString(),\r\n          icon: \"lucide:list\",\r\n          color: \"primary\",\r\n          tooltip: `Total number of trades ${useCashBasis ? '(expanded for individual exits)' : 'you have recorded'} matching current search/filter.`\r\n        }, {\r\n          title: statsTitle.openPositions,\r\n          value: (() => {\r\n            // Count open positions from filtered trades, avoiding double counting for cash basis\r\n            if (useCashBasis) {\r\n              const seenTradeIds = new Set();\r\n              return trades.filter(t => {\r\n                if (t.positionStatus !== \"Open\") return false;\r\n                const originalId = t.id.split('_exit_')[0];\r\n                if (seenTradeIds.has(originalId)) return false;\r\n                seenTradeIds.add(originalId);\r\n                return true;\r\n              }).length.toString();\r\n            } else {\r\n              return trades.filter(t => t.positionStatus === \"Open\").length.toString();\r\n            }\r\n          })(),\r\n          icon: \"lucide:activity\",\r\n          color: \"warning\",\r\n          tooltip: \"Number of trades that are currently open (filtered by search).\"\r\n        }, {\r\n          title: statsTitle.winRate,\r\n          value: `${lazyStats.winRate.toFixed(2)}%`,\r\n          icon: \"lucide:target\",\r\n          color: \"success\",\r\n          tooltip: `Percentage of trades that are profitable (${useCashBasis ? 'Cash Basis' : 'Accrual Basis'}) matching current search/filter.`\r\n        }].map((stat, idx) => (\r\n          <div key={stat.title} className=\"flex items-center gap-2\">\r\n            <StatsCard\r\n              title={stat.title}\r\n              value={stat.value}\r\n              icon={stat.icon}\r\n              color={idx === 0 ? \"primary\" : idx === 1 ? \"warning\" : \"success\"}\r\n            />\r\n            {/* Show info icon only on mobile for first three stats */}\r\n            <div className=\"block sm:hidden\">\r\n              <MobileTooltip\r\n                placement=\"top\"\r\n                className=\"max-w-xs text-xs p-1 bg-content1 border border-divider\"\r\n                content={<div>{stat.tooltip}</div>}\r\n              >\r\n                <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer inline-block align-middle ml-2\" />\r\n              </MobileTooltip>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {/* Last three stats: Realized P/L, Unrealized P/L, Open Heat - No more lazy loading */}\r\n        <div className=\"flex items-center gap-2\">\r\n          <StatsCard\r\n            title=\"Realized P/L\"\r\n            value={formatCurrency(lazyStats.totalRealizedPL)}\r\n            icon=\"lucide:indian-rupee\"\r\n            color={lazyStats.totalRealizedPL >= 0 ? \"success\" : \"danger\"}\r\n          />\r\n          <MobileTooltip\r\n            key={`realized-tooltip-${useCashBasis}-${processedTrades.length}-${lazyStats.totalRealizedPL}`}\r\n            placement=\"top\"\r\n            className=\"max-w-xs text-xs p-1 bg-content1 border border-divider\"\r\n            content={(() => {\r\n\r\n              // Use filtered trades for tooltip breakdown to respond to search\r\n              // CRITICAL FIX: Use the same logic as main stats calculation for consistency\r\n              let closedTrades: Array<Trade & { realizedPL: number; pfImpact: number }>;\r\n              if (useCashBasis) {\r\n                // CRITICAL FIX: Use the same logic as main stats calculation\r\n                // For cash basis: Get all expanded trades that have _cashBasisExit\r\n                const realizedTradesFlat = processedTrades.flatMap(trade =>\r\n                  Array.isArray(trade._expandedTrades)\r\n                    ? trade._expandedTrades.filter(t => t._cashBasisExit)\r\n                    : (trade._cashBasisExit ? [trade] : [])\r\n                );\r\n\r\n                // Group by original ID and calculate total P/L per original trade\r\n                const tradeGroups = new Map<string, Trade[]>();\r\n                realizedTradesFlat.forEach(trade => {\r\n                  const originalId = trade.id.split('_exit_')[0];\r\n                  if (!tradeGroups.has(originalId)) {\r\n                    tradeGroups.set(originalId, []);\r\n                  }\r\n                  tradeGroups.get(originalId)!.push(trade);\r\n                });\r\n\r\n                // Calculate total P/L for each original trade\r\n                closedTrades = Array.from(tradeGroups.entries()).map(([originalId, trades]) => {\r\n                  // Sum up P/L from all exits for this trade\r\n                  const totalPL = trades.reduce((sum, trade) => {\r\n                    return sum + calculateTradePL(trade, useCashBasis);\r\n                  }, 0);\r\n\r\n                  // Use the first trade as the representative (they all have the same original data)\r\n                  const representativeTrade = trades[0];\r\n\r\n                  return {\r\n                    ...representativeTrade,\r\n                    id: originalId, // Use original ID\r\n                    realizedPL: totalPL,\r\n                    // Calculate total PF impact from all exits\r\n                    pfImpact: trades.reduce((sum, trade) => sum + (trade._cashPfImpact ?? 0), 0)\r\n                  };\r\n                });\r\n              } else {\r\n                // For accrual basis: Use trades as-is\r\n                closedTrades = processedTrades\r\n                  .filter(t => t.positionStatus === 'Closed' || t.positionStatus === 'Partial')\r\n                  .map(t => ({\r\n                    ...t,\r\n                    realizedPL: calculateTradePL(t, useCashBasis),\r\n                    pfImpact: t._accrualPfImpact ?? t.pfImpact ?? 0\r\n                  }));\r\n              }\r\n\r\n              const breakdown = closedTrades\r\n                .map(t => ({\r\n                  name: t.name || 'N/A',\r\n                  realizedPL: t.realizedPL,\r\n                  pfImpact: t.pfImpact\r\n                }))\r\n                .filter(t => Math.abs(t.realizedPL) > 0.01) // Filter out negligible amounts\r\n                .sort((a, b) => Math.abs(b.realizedPL) - Math.abs(a.realizedPL)); // Sort by absolute value\r\n\r\n              return (\r\n                <div className=\"max-w-sm\">\r\n                  <div className=\"mb-2\">\r\n                    <div className=\"font-medium text-foreground-700\">\r\n                      <strong>PF Impact:</strong> {lazyStats.realizedPfImpact.toFixed(2)}%\r\n                    </div>\r\n                    <div className=\"text-foreground-400 text-xs\">\r\n                      This is the % of your portfolio that is realized as profit/loss.\r\n                    </div>\r\n\r\n                  </div>\r\n\r\n                  {breakdown.length > 0 ? (\r\n                    <div>\r\n                      <div className=\"text-xs font-medium text-foreground-600 mb-2 border-b border-divider pb-1\">\r\n                        Top Realized Trades:\r\n                      </div>\r\n                      <div className=\"space-y-1 max-h-48 overflow-y-auto\">\r\n                        {breakdown.slice(0, 10).map((t, idx) => ( // Show top 10\r\n                          <div key={`${t.name}-${idx}`} className=\"flex justify-between items-center text-xs\">\r\n                            <span className=\"truncate max-w-[100px]\" title={t.name}>\r\n                              {t.name}\r\n                            </span>\r\n                            <div className=\"flex flex-col items-end ml-2\">\r\n                              <span className={`font-mono font-medium whitespace-nowrap ${\r\n                                t.realizedPL >= 0 ? 'text-success' : 'text-danger'\r\n                              }`}>\r\n                                ₹{formatCurrency(t.realizedPL)}\r\n                              </span>\r\n                              <span className={`font-mono text-xs ${\r\n                                t.pfImpact >= 0 ? 'text-success' : 'text-danger'\r\n                              }`}>\r\n                                ({t.pfImpact >= 0 ? '+' : ''}{t.pfImpact.toFixed(2)}%)\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n\r\n                      {breakdown.length > 10 && (\r\n                        <div className=\"text-xs text-foreground-400 mt-2 pt-1 border-t border-divider\">\r\n                          Showing top 10 of {breakdown.length} realized trades\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"text-foreground-400 text-xs\">No realized trades</div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })()}\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer inline-block align-middle ml-2\" />\r\n          </MobileTooltip>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <StatsCard\r\n            title=\"Unrealized P/L\"\r\n            value={formatCurrency(lazyStats.totalUnrealizedPL)}\r\n            icon=\"lucide:indian-rupee\"\r\n            color={lazyStats.totalUnrealizedPL >= 0 ? \"success\" : \"danger\"}\r\n          />\r\n          <MobileTooltip\r\n            placement=\"top\"\r\n            className=\"max-w-xs text-xs p-1 bg-content1 border border-divider\"\r\n            content={(() => {\r\n\r\n              // Use filtered trades for unrealized P/L tooltip to respond to search\r\n              let openTrades = trades.filter(t => (t.positionStatus === 'Open' || t.positionStatus === 'Partial'));\r\n\r\n              // For cash basis, avoid double counting in tooltip\r\n              if (useCashBasis) {\r\n                const seenTradeIds = new Set();\r\n                openTrades = openTrades.filter(t => {\r\n                  const originalId = t.id.split('_exit_')[0];\r\n                  if (seenTradeIds.has(originalId)) return false;\r\n                  seenTradeIds.add(originalId);\r\n                  return true;\r\n                });\r\n              }\r\n              const breakdown = openTrades\r\n                .map(t => {\r\n                  const unrealizedPL = calcUnrealizedPL(t.avgEntry, t.cmp, t.openQty, t.buySell);\r\n                  const pfImpact = portfolioSize > 0 ? (unrealizedPL / portfolioSize) * 100 : 0;\r\n                  return {\r\n                    name: t.name || 'N/A',\r\n                    unrealizedPL: unrealizedPL,\r\n                    pfImpact: pfImpact\r\n                  };\r\n                })\r\n                .filter(t => Math.abs(t.unrealizedPL) > 0.01) // Filter out negligible amounts\r\n                .sort((a, b) => b.unrealizedPL - a.unrealizedPL); // Sort by P/L value (highest first)\r\n\r\n              return (\r\n                <div>\r\n                  <div className=\"mb-2 font-medium text-foreground-700\">This is the % of your portfolio that is currently (unrealized).</div>\r\n                  {breakdown.length > 0 ? (\r\n                    <ul className=\"space-y-1\">\r\n                      {breakdown.map((t, idx) => (\r\n                        <li key={`${t.name}-unrealized-${idx}`} className=\"flex justify-between items-center\">\r\n                          <span className=\"truncate max-w-[100px]\" title={t.name}>{t.name}</span>\r\n                          <div className=\"flex flex-col items-end ml-2\">\r\n                            <span className={`font-mono font-medium whitespace-nowrap ${t.unrealizedPL >= 0 ? 'text-success' : 'text-danger'}`}>\r\n                              ₹{formatCurrency(t.unrealizedPL)}\r\n                            </span>\r\n                            <span className={`font-mono text-xs ${t.pfImpact >= 0 ? 'text-success' : 'text-danger'}`}>\r\n                              ({t.pfImpact >= 0 ? '+' : ''}{t.pfImpact.toFixed(2)}%)\r\n                            </span>\r\n                          </div>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  ) : (\r\n                    <div className=\"text-foreground-400\">No unrealized positions</div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })()}\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer inline-block align-middle ml-2\" />\r\n          </MobileTooltip>\r\n        </div>\r\n        <div className=\"flex items-center gap-1\">\r\n          <StatsCard\r\n            title=\"Open Heat\"\r\n            value={`${lazyStats.openHeat.toFixed(2)}%`}\r\n            icon=\"lucide:flame\"\r\n            color=\"warning\"\r\n          />\r\n          <MobileTooltip\r\n            placement=\"top\"\r\n            className=\"max-w-xs text-xs p-1 bg-content1 border border-divider\"\r\n            content={(() => {\r\n              // Use filtered trades for open heat tooltip to respond to search\r\n              let openTrades = trades.filter(t => (t.positionStatus === 'Open' || t.positionStatus === 'Partial'));\r\n\r\n              // For cash basis, avoid double counting in tooltip\r\n              if (useCashBasis) {\r\n                const seenTradeIds = new Set();\r\n                openTrades = openTrades.filter(t => {\r\n                  const originalId = t.id.split('_exit_')[0];\r\n                  if (seenTradeIds.has(originalId)) return false;\r\n                  seenTradeIds.add(originalId);\r\n                  return true;\r\n                });\r\n              }\r\n              const breakdown = openTrades\r\n                .map(t => ({\r\n                  name: t.name || 'N/A',\r\n                  risk: calcTradeOpenHeat(t, portfolioSize, getPortfolioSize)\r\n                }))\r\n                .filter(t => t.risk > 0)\r\n                .sort((a, b) => b.risk - a.risk);\r\n              return (\r\n                <div>\r\n                  <div className=\"mb-2 font-medium text-foreground-700\">This is the % of your portfolio you will lose if all initial stops/TSLs are hit on your open/partial positions.</div>\r\n                  {breakdown.length > 0 ? (\r\n                    <ul className=\"space-y-1\">\r\n                      {breakdown.map((t, idx) => (\r\n                        <li key={`${t.name}-risk-${idx}`} className=\"flex justify-between\">\r\n                          <span>{t.name}</span>\r\n                          <span className=\"font-mono\">{t.risk.toFixed(2)}%</span>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  ) : (\r\n                    <div className=\"text-foreground-400\">No open risk</div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })()}\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer inline-block align-middle\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Background recalculation and stats loading indicators */}\r\n      <AnimatePresence>\r\n        {(isRecalculating || !statsLoaded) && (\r\n          <motion.div\r\n            key=\"loading-indicator\"\r\n            initial={{ opacity: 0, y: -10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -10 }}\r\n            className=\"flex items-center justify-center gap-3 p-3 bg-primary/10 border border-primary/20 rounded-lg\"\r\n          >\r\n            <Icon icon=\"lucide:calculator\" className=\"text-primary animate-pulse\" />\r\n            <span className=\"text-sm text-primary font-medium\">\r\n              {isRecalculating\r\n                ? \"Recalculating trade metrics in background...\"\r\n                : \"Loading statistics...\"\r\n              }\r\n            </span>\r\n            <CircularLoader size={16} color=\"text-primary\" />\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      <Card className=\"border border-divider\">\r\n        <CardBody className=\"p-0\">\r\n          {/* Show empty state only when we're sure there are no trades and not loading */}\r\n          {!isLoading && !isRecalculating && items.length === 0 && trades.length === 0 ? (\r\n            <div className=\"flex flex-col items-center justify-center py-16 px-4 text-center min-h-[400px]\">\r\n              <div className=\"text-default-400 mb-2\">\r\n                <Icon\r\n                  icon={trades.length === 0 ? \"lucide:inbox\" : \"lucide:search-x\"}\r\n                  className=\"w-16 h-16 mx-auto mb-4 opacity-50\"\r\n                />\r\n              </div>\r\n              <div className=\"text-default-500 text-xl font-medium mb-2\">\r\n                {originalTrades.length === 0 ? \"No trades found\" : \"No matching trades\"}\r\n              </div>\r\n              <div className=\"text-default-400 text-base mb-6\">\r\n                {originalTrades.length === 0\r\n                  ? \"Add your first trade to get started\"\r\n                  : \"Try adjusting your search or filter criteria\"\r\n                }\r\n              </div>\r\n              {originalTrades.length === 0 && (\r\n                <div className=\"flex flex-col gap-3 items-center\">\r\n                  <Button\r\n                    color=\"primary\"\r\n                    variant=\"shadow\"\r\n                    size=\"sm\"\r\n                    onPress={handleAddNewBlankTrade}\r\n                    startContent={<Icon icon=\"lucide:plus\" className=\"w-4 h-4\" />}\r\n                    className=\"font-medium px-4 py-1.5 bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary/80 transition-all duration-300 shadow-lg shadow-primary/25 border-0 text-white rounded-full\"\r\n                  >\r\n                    Add Your First Trade\r\n                  </Button>\r\n                  <div className=\"text-default-400 text-sm\">or</div>\r\n                  <Button\r\n                    color=\"secondary\"\r\n                    variant=\"bordered\"\r\n                    size=\"sm\"\r\n                    onPress={onUploadOpen}\r\n                    startContent={<Icon icon=\"lucide:upload\" className=\"w-4 h-4\" />}\r\n                    className=\"font-medium px-4 py-1.5 transition-all duration-300 rounded-full\"\r\n                  >\r\n                    Import from CSV/Excel\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <>\r\n\r\n              <div\r\n                className=\"relative overflow-auto max-h-[70vh]\r\n                  [&::-webkit-scrollbar]:w-0 [&::-webkit-scrollbar]:h-2\r\n                  [&::-webkit-scrollbar-track]:bg-gray-100 dark:[&::-webkit-scrollbar-track]:bg-gray-800\r\n                  [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-thumb]:rounded-full\r\n                  [&::-webkit-scrollbar-thumb:hover]:bg-gray-400\r\n                  dark:[&::-webkit-scrollbar-thumb]:bg-gray-600 dark:[&::-webkit-scrollbar-thumb:hover]:bg-gray-500\"\r\n                style={{\r\n                  scrollbarWidth: 'thin', /* Firefox - thin horizontal only */\r\n                  scrollbarColor: 'rgb(156 163 175) transparent' /* Firefox - thumb and track colors */\r\n                }}\r\n              >\r\n            <Table\r\n              aria-label=\"Trade journal table\"\r\n              className=\"trade-table gpu-accelerated\"\r\n            bottomContent={\r\n              shouldUseProgressiveLoading ? (\r\n                // Progressive loading controls for large datasets\r\n                <div className=\"flex w-full justify-center items-center gap-4 py-4\">\r\n                  {loadedTradesCount < trades.length ? (\r\n                    <Button\r\n                      color=\"primary\"\r\n                      variant=\"flat\"\r\n                      size=\"sm\"\r\n                      onPress={loadMoreTrades}\r\n                      isLoading={isLoadingMore}\r\n                      startContent={!isLoadingMore && <Icon icon=\"lucide:chevron-down\" />}\r\n                      className=\"min-w-[120px] optimized-button\"\r\n                    >\r\n                      {isLoadingMore ? 'Loading...' : `Load More (${trades.length - loadedTradesCount} remaining)`}\r\n                    </Button>\r\n                  ) : (\r\n                    <div className=\"text-sm text-default-500\">\r\n                      All {trades.length} trades loaded\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ) : pages > 0 ? (\r\n                // Traditional pagination for smaller datasets\r\n                <div className=\"flex w-full justify-between items-center gap-4 py-2 px-4\">\r\n                  {/* Rows per page selector */}\r\n                  <div className=\"flex items-center gap-2 text-sm text-default-500\">\r\n                    <span>Rows per page:</span>\r\n                    <Dropdown>\r\n                      <DropdownTrigger>\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"bordered\"\r\n                          className=\"min-w-[60px] h-7\"\r\n                          endContent={<Icon icon=\"lucide:chevron-down\" className=\"w-3 h-3\" />}\r\n                        >\r\n                          {rowsPerPage}\r\n                        </Button>\r\n                      </DropdownTrigger>\r\n                      <DropdownMenu\r\n                        aria-label=\"Rows per page\"\r\n                        selectionMode=\"single\"\r\n                        selectedKeys={[String(rowsPerPage)]}\r\n                        onSelectionChange={(keys) => {\r\n                          const selected = Array.from(keys)[0] as string;\r\n                          const newRowsPerPage = Number(selected);\r\n                          setRowsPerPage(newRowsPerPage);\r\n                          setPage(1); // Reset to first page\r\n                          // localStorage persistence is handled by the useEffect hook\r\n                        }}\r\n                      >\r\n                        {rowsPerPageOptions.map(option => (\r\n                          <DropdownItem key={String(option)}>{option}</DropdownItem>\r\n                        ))}\r\n                      </DropdownMenu>\r\n                    </Dropdown>\r\n                  </div>\r\n\r\n                  {/* Pagination */}\r\n                  <div tabIndex={-1}>\r\n                    <Pagination\r\n                      isCompact\r\n                      showControls\r\n                      showShadow={false}\r\n                      color=\"primary\"\r\n                      size=\"sm\"\r\n                      variant=\"light\"\r\n                      page={page}\r\n                      total={pages}\r\n                      onChange={handlePageChange}\r\n                      classNames={{\r\n                        item: \"rounded-full w-5 h-5 text-xs flex items-center justify-center\",\r\n                        cursor: \"rounded-full w-5 h-5 text-xs flex items-center justify-center\",\r\n                        prev: \"rounded-full w-5 h-5 text-xs flex items-center justify-center\",\r\n                        next: \"rounded-full w-5 h-5 text-xs flex items-center justify-center\",\r\n                        ellipsis: \"px-0.5 text-xs\"\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n                  {/* Trade count info */}\r\n                  <div className=\"text-sm text-default-500\">\r\n                    {`${((page - 1) * rowsPerPage) + 1}-${Math.min(page * rowsPerPage, trades.length)} of ${trades.length}`}\r\n                  </div>\r\n                </div>\r\n              ) : null\r\n            }\r\n              classNames={{\r\n                base: \"min-w-full\",\r\n                wrapper: \"shadow-none p-0 rounded-none\",\r\n                table: \"table-auto min-w-max\",\r\n                thead: \"[&>tr]:first:shadow-none\",\r\n                th: \"bg-default-100 dark:bg-gray-950 text-foreground-600 dark:text-white text-xs font-medium uppercase border-b border-default-200 dark:border-gray-800 sticky top-0 z-20 backdrop-blur-sm\",\r\n                td: \"py-2.5 text-sm border-b border-default-200 dark:border-gray-800 text-foreground-800 dark:text-gray-200\"\r\n              }}\r\n              removeWrapper\r\n            sortDescriptor={sortDescriptor as HeroSortDescriptor}\r\n            onSortChange={setSortDescriptor as (descriptor: HeroSortDescriptor) => void}\r\n          >\r\n            <TableHeader columns={headerColumns}>\r\n              {(column) => (\r\n                <TableColumn\r\n                  key={column.key}\r\n                  align={column.key === \"actions\" ? \"end\" : \"start\"}\r\n                  allowsSorting={column.sortable}\r\n                  className={column.key === \"name\" ? \"sticky-name-header\" : \"\"}\r\n                >\r\n                  {column.label}\r\n                </TableColumn>\r\n              )}\r\n            </TableHeader>\r\n            <TableBody\r\n              items={memoizedTableRows}\r\n              isLoading={isLoading}\r\n              emptyContent={isLoading ? \" \" : \"\"}\r\n            >\r\n              {(memoizedRow) => (\r\n                <TableRow\r\n                  key={(memoizedRow as any).key}\r\n                  className=\"trade-table-row hover:bg-default-50 dark:hover:bg-gray-800 dark:bg-gray-900 group gpu-accelerated\"\r\n                >\r\n                  {headerColumns.map((column) => (\r\n                    <TableCell\r\n                      key={`${(memoizedRow as any).id}-${column.key}`}\r\n                      className={`trade-table-cell ${column.key === \"name\" ? \"sticky-name-cell sticky-header\" : \"\"}`}\r\n                    >\r\n                      {renderCell((memoizedRow as any).data, column.key)}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n            </Table>\r\n            {/* Sleek, small add inline trade icon below the table - only show when there are trades */}\r\n            {items.length > 0 && (\r\n              <div className=\"p-2 border-t border-divider bg-white dark:bg-gray-900\">\r\n                <MobileTooltip content=\"Add new trade (inline)\" placement=\"top\">\r\n                  <Button\r\n                    isIconOnly\r\n                    color=\"primary\"\r\n                    variant=\"light\"\r\n                    onPress={handleAddNewBlankTrade}\r\n                    size=\"sm\"\r\n                    className=\"mx-auto block\"\r\n                  >\r\n                    <Icon icon=\"lucide:list-plus\" className=\"text-lg\" />\r\n                  </Button>\r\n                </MobileTooltip>\r\n              </div>\r\n            )}\r\n            </div>\r\n            </>\r\n          )}\r\n        </CardBody>\r\n      </Card>\r\n\r\n      <AnimatePresence>\r\n        {isAddOpen && (\r\n          <TradeModal\r\n            key=\"add-trade-modal\"\r\n            isOpen={isAddOpen}\r\n            onOpenChange={onAddOpenChange}\r\n            onSave={handleAddTrade}\r\n            mode=\"add\"\r\n            symbol={searchQuery} // Pass the search query as the initial symbol\r\n            onChartRefresh={() => setChartRefreshTrigger(prev => prev + 1)}\r\n          />\r\n        )}\r\n\r\n        {selectedTrade && (\r\n          <React.Fragment key={`trade-modals-${selectedTrade.id}`}>\r\n            <TradeModal\r\n              key=\"edit-trade-modal\"\r\n              isOpen={isEditOpen}\r\n              onOpenChange={handleEditModalClose}\r\n              trade={selectedTrade}\r\n              onSave={handleUpdateTrade}\r\n              mode=\"edit\"\r\n              symbol={selectedTrade?.name || ''}\r\n              isUploadOnlyMode={isUploadOnlyMode}\r\n              isActionsEditMode={isActionsEditMode}\r\n              onChartRefresh={() => setChartRefreshTrigger(prev => prev + 1)}\r\n            />\r\n\r\n            <DeleteConfirmModal\r\n              key=\"delete-confirm-modal\"\r\n              isOpen={isDeleteOpen}\r\n              onOpenChange={onDeleteOpenChange}\r\n              onDelete={handleDeleteConfirm}\r\n              tradeName={selectedTrade.name}\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n\r\n        <TradeUploadModal\r\n          key=\"upload-trade-modal\"\r\n          isOpen={isUploadOpen}\r\n          onOpenChange={onUploadOpenChange}\r\n          onImport={handleImportTrades}\r\n          portfolioSize={portfolioSize}\r\n          getPortfolioSize={getPortfolioSize}\r\n        />\r\n      </AnimatePresence>\r\n\r\n      {/* Chart Image Viewer Modal */}\r\n      <ChartImageViewer\r\n        isOpen={isChartViewerOpen}\r\n        onOpenChange={setIsChartViewerOpen}\r\n        chartImage={chartViewerImage}\r\n        title={chartViewerTitle}\r\n      />\r\n\r\n      {/* Universal Chart Viewer Modal */}\r\n      <UniversalChartViewer\r\n        isOpen={isUniversalViewerOpen}\r\n        onOpenChange={setIsUniversalViewerOpen}\r\n        initialChartImage={chartViewerImage}\r\n        refreshTrigger={chartRefreshTrigger}\r\n      />\r\n\r\n    </div>\r\n  );\r\n});\r\n\r\ninterface StatsCardProps {\r\n  title: string;\r\n  value: string;\r\n  icon: string;\r\n  color: \"primary\" | \"success\" | \"warning\" | \"danger\";\r\n  isLoading?: boolean;\r\n}\r\n\r\n// Smooth circular loading animation component\r\nconst CircularLoader: React.FC<{ size?: number; color?: string }> = ({ size = 20, color = \"text-gray-400\" }) => (\r\n  <>\r\n    <style>{`\r\n      @keyframes circular-dash {\r\n        0% {\r\n          stroke-dasharray: 1, 150;\r\n          stroke-dashoffset: 0;\r\n        }\r\n        50% {\r\n          stroke-dasharray: 90, 150;\r\n          stroke-dashoffset: -35;\r\n        }\r\n        100% {\r\n          stroke-dasharray: 90, 150;\r\n          stroke-dashoffset: -124;\r\n        }\r\n      }\r\n      .circular-loader {\r\n        animation: spin 2s linear infinite, circular-dash 1.5s ease-in-out infinite;\r\n      }\r\n    `}</style>\r\n    <div className=\"flex items-center justify-center\">\r\n      <svg\r\n        className={color}\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <circle\r\n          cx=\"12\"\r\n          cy=\"12\"\r\n          r=\"10\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          className=\"opacity-25\"\r\n        />\r\n        <circle\r\n          cx=\"12\"\r\n          cy=\"12\"\r\n          r=\"10\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"2\"\r\n          strokeLinecap=\"round\"\r\n          strokeDasharray=\"31.416\"\r\n          strokeDashoffset=\"23.562\"\r\n          className=\"opacity-75 circular-loader\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  </>\r\n);\r\n\r\n// Lazy loading stats card with smooth circular loading animation\r\nconst LazyStatsCard: React.FC<StatsCardProps & { isLoading?: boolean }> = React.memo(function LazyStatsCard({\r\n  title,\r\n  value,\r\n  icon,\r\n  color,\r\n  isLoading = false\r\n}) {\r\n  const getColors = () => {\r\n    switch (color) {\r\n      case \"primary\":\r\n        return {\r\n          bg: \"bg-blue-50 dark:bg-blue-900/10\",\r\n          text: \"text-blue-700 dark:text-blue-400\",\r\n          icon: \"text-blue-600 dark:text-blue-400\",\r\n          loader: \"text-blue-500\"\r\n        };\r\n      case \"success\":\r\n        return {\r\n          bg: \"bg-emerald-50 dark:bg-emerald-900/10\",\r\n          text: \"text-emerald-700 dark:text-emerald-400\",\r\n          icon: \"text-emerald-600 dark:text-emerald-400\",\r\n          loader: \"text-emerald-500\"\r\n        };\r\n      case \"warning\":\r\n        return {\r\n          bg: \"bg-amber-50 dark:bg-amber-900/10\",\r\n          text: \"text-amber-700 dark:text-amber-400\",\r\n          icon: \"text-amber-600 dark:text-amber-400\",\r\n          loader: \"text-amber-500\"\r\n        };\r\n      case \"danger\":\r\n        return {\r\n          bg: \"bg-red-50 dark:bg-red-900/10\",\r\n          text: \"text-red-700 dark:text-red-400\",\r\n          icon: \"text-red-600 dark:text-red-400\",\r\n          loader: \"text-red-500\"\r\n        };\r\n      default:\r\n        return {\r\n          bg: \"bg-gray-50 dark:bg-gray-900/10\",\r\n          text: \"text-gray-700 dark:text-gray-400\",\r\n          icon: \"text-gray-600 dark:text-gray-400\",\r\n          loader: \"text-gray-500\"\r\n        };\r\n    }\r\n  };\r\n\r\n  const colors = getColors();\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, scale: 0.95 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      transition={{ duration: 0.2 }}\r\n    >\r\n      <Card className=\"border border-gray-100 dark:border-gray-800 shadow-sm bg-white dark:bg-gray-900\">\r\n        <CardBody className=\"p-4\">\r\n          <div className=\"flex justify-between items-start\">\r\n            <div className=\"space-y-2\">\r\n              <p className=\"text-gray-500 dark:text-gray-400 text-sm font-medium\">\r\n                {title}\r\n              </p>\r\n              {isLoading ? (\r\n                <div className=\"flex items-center gap-3\">\r\n                  <div className=\"w-20 h-7 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\r\n                  <CircularLoader size={18} color={colors.loader} />\r\n                </div>\r\n              ) : (\r\n                <motion.p\r\n                  className={`text-2xl font-semibold tracking-tight ${colors.text}`}\r\n                  initial={{ opacity: 0, y: 10 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  transition={{ duration: 0.3, delay: 0.1 }}\r\n                >\r\n                  {value}\r\n                </motion.p>\r\n              )}\r\n            </div>\r\n            <div className={`p-3 rounded-xl ${colors.bg} ${colors.icon}`}>\r\n              <Icon icon={icon} className=\"text-xl\" />\r\n            </div>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\n// Keep the original StatsCard for simple stats that don't need lazy loading\r\nconst StatsCard: React.FC<StatsCardProps> = React.memo(function StatsCard({ title, value, icon, color }) {\r\n  const getColors = () => {\r\n    switch (color) {\r\n      case \"primary\":\r\n        return {\r\n          bg: \"bg-blue-50 dark:bg-blue-900/10\",\r\n          text: \"text-blue-700 dark:text-blue-400\",\r\n          icon: \"text-blue-600 dark:text-blue-400\"\r\n        };\r\n      case \"success\":\r\n        return {\r\n          bg: \"bg-emerald-50 dark:bg-emerald-900/10\",\r\n          text: \"text-emerald-700 dark:text-emerald-400\",\r\n          icon: \"text-emerald-600 dark:text-emerald-400\"\r\n        };\r\n      case \"warning\":\r\n        return {\r\n          bg: \"bg-amber-50 dark:bg-amber-900/10\",\r\n          text: \"text-amber-700 dark:text-amber-400\",\r\n          icon: \"text-amber-600 dark:text-amber-400\"\r\n        };\r\n      case \"danger\":\r\n        return {\r\n          bg: \"bg-red-50 dark:bg-red-900/10\",\r\n          text: \"text-red-700 dark:text-red-400\",\r\n          icon: \"text-red-600 dark:text-red-400\"\r\n        };\r\n      default:\r\n        return {\r\n          bg: \"bg-gray-50 dark:bg-gray-900/10\",\r\n          text: \"text-gray-700 dark:text-gray-400\",\r\n          icon: \"text-gray-600 dark:text-gray-400\"\r\n        };\r\n    }\r\n  };\r\n\r\n  const colors = getColors();\r\n\r\n  return (\r\n    <Card className=\"border border-gray-100 dark:border-gray-800 shadow-sm bg-white dark:bg-gray-900\">\r\n      <CardBody className=\"p-4\">\r\n        <div className=\"flex justify-between items-start\">\r\n          <div className=\"space-y-2\">\r\n            <p className=\"text-gray-500 dark:text-gray-400 text-sm font-medium\">\r\n              {title}\r\n            </p>\r\n            <p className={`text-2xl font-semibold tracking-tight ${colors.text}`}>\r\n              {value}\r\n            </p>\r\n          </div>\r\n          <div className={`p-3 rounded-xl ${colors.bg} ${colors.icon}`}>\r\n            <Icon icon={icon} className=\"text-xl\" />\r\n          </div>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n});\r\n\r\ninterface EditableCellProps {\r\n  value: string | number;\r\n  onSave: (value: string | number) => void;\r\n  type?: \"text\" | \"number\" | \"price\" | \"date\" | \"select\";\r\n  colorValue?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  options?: string[];\r\n  tradeId?: string;\r\n  field?: string;\r\n}\r\n\r\nconst EditableCell: React.FC<EditableCellProps> = React.memo(function EditableCell({\r\n  value,\r\n  onSave,\r\n  type = \"text\",\r\n  colorValue = false,\r\n  min,\r\n  max,\r\n  options,\r\n  tradeId,\r\n  field\r\n}) {\r\n  const [isEditing, setIsEditing] = React.useState(false);\r\n\r\n  // Format date as dd-mm-yyyy for display and editing\r\n  const formatDateForDisplay = (dateStr: string) => {\r\n    try {\r\n      if (!dateStr || dateStr.trim() === '') return '';\r\n      const date = new Date(dateStr);\r\n      if (isNaN(date.getTime())) return '';\r\n      return date.toLocaleDateString('en-GB', {\r\n        day: '2-digit',\r\n        month: '2-digit',\r\n        year: 'numeric'\r\n      }).replace(/\\//g, '-');\r\n    } catch (e) {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  // Convert dd-mm-yyyy to yyyy-mm-dd for the native date input\r\n  const convertToISODate = (displayDate: string) => {\r\n    try {\r\n      if (!displayDate || displayDate.trim() === '') return '';\r\n      const parts = displayDate.split('-');\r\n      if (parts.length !== 3) return '';\r\n      const [day, month, year] = parts;\r\n      if (!day || !month || !year || day === 'undefined' || month === 'undefined' || year === 'undefined') return '';\r\n      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\r\n    } catch (e) {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  // Convert yyyy-mm-dd to ISO string\r\n  const convertToFullISO = (dateStr: string) => {\r\n    try {\r\n      return new Date(dateStr).toISOString();\r\n    } catch (e) {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  const getInitialEditValue = React.useCallback(() => {\r\n    if (type === 'date') {\r\n      if (!value || value === '' || value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      return formatDateForDisplay(value as string);\r\n    }\r\n    return String(value ?? '');\r\n  }, [type, value]);\r\n\r\n  const [editValue, setEditValue] = React.useState(() => getInitialEditValue());\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (isEditing && inputRef.current) {\r\n      inputRef.current.focus();\r\n      inputRef.current.select();\r\n    }\r\n  }, [isEditing]);\r\n\r\n  // Track editing state with ref to prevent unwanted updates during editing\r\n  const isEditingRef = React.useRef(false);\r\n\r\n  // Update the ref when editing state changes\r\n  React.useEffect(() => {\r\n    isEditingRef.current = isEditing;\r\n  }, [isEditing]);\r\n\r\n  // Update editValue when value prop changes, but only when not editing\r\n  React.useEffect(() => {\r\n    // Only update if not currently editing and the value has actually changed\r\n    if (!isEditing && !isEditingRef.current) {\r\n      const newEditValue = getInitialEditValue();\r\n      if (newEditValue !== editValue) {\r\n        setEditValue(newEditValue);\r\n      }\r\n    }\r\n  }, [value, type, isEditing, getInitialEditValue, editValue]);\r\n\r\n  const handleSave = () => {\r\n    // Update refs and state to exit editing mode\r\n    isEditingRef.current = false;\r\n    setIsEditing(false);\r\n\r\n    if (type === \"number\" || type === \"price\") {\r\n      onSave(Number(editValue));\r\n    } else if (type === \"date\") {\r\n      if (editValue) {\r\n        // Convert the dd-mm-yyyy to ISO string\r\n        const isoDate = convertToFullISO(convertToISODate(editValue));\r\n        onSave(isoDate);\r\n      } else {\r\n        onSave(\"\");\r\n      }\r\n    } else {\r\n      onSave(editValue);\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    // Date selection completes editing\r\n    isEditingRef.current = false;\r\n    const isoDate = e.target.value; // yyyy-mm-dd\r\n    if (isoDate) {\r\n      const displayDate = formatDateForDisplay(isoDate);\r\n      setEditValue(displayDate);\r\n      onSave(convertToFullISO(isoDate));\r\n    } else {\r\n      setEditValue('');\r\n      onSave('');\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSave();\r\n    } else if (e.key === \"Escape\") {\r\n      setIsEditing(false);\r\n      setEditValue(String(value));\r\n    }\r\n  };\r\n\r\n  const getValueColor = () => {\r\n    if (!colorValue || type !== \"price\") return \"\";\r\n    const numValue = Number(value);\r\n    return numValue < 0 ? \"text-danger\" : numValue > 0 ? \"text-success\" : \"\";\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    if (!isEditing) {\r\n      // Update ref immediately to prevent race conditions\r\n      isEditingRef.current = true;\r\n      setEditValue(getInitialEditValue());\r\n      setIsEditing(true);\r\n    }\r\n  };\r\n\r\n  const inputTypeForHero = (): \"text\" | \"number\" | \"date\" => {\r\n    if (type === \"price\") return \"number\";\r\n    if (type === \"select\") return \"text\";\r\n    return type as \"text\" | \"number\" | \"date\";\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"relative\"\r\n      initial={false}\r\n      animate={{ height: \"auto\" }}\r\n      transition={{ duration: 0.2 }}\r\n      data-editable-cell={tradeId && field ? \"true\" : undefined}\r\n      data-trade-id={tradeId}\r\n      data-field={field}\r\n      tabIndex={tradeId && field ? 0 : undefined}\r\n    >\r\n      <AnimatePresence mode=\"wait\">\r\n        {type === \"date\" ? (\r\n          <input\r\n            type=\"date\"\r\n            className=\"h-7 px-2 rounded-md border border-divider bg-content1 dark:bg-gray-900 dark:text-white text-sm font-medium focus:outline-none focus:ring-2 focus:ring-primary/20 hover:bg-content2 dark:hover:bg-gray-800 transition-colors cursor-pointer w-[130px]\"\r\n            value={convertToISODate(editValue)}\r\n            onChange={handleDateChange}\r\n          />\r\n        ) : (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n          >\r\n            {isEditing ? (\r\n              <Input\r\n                ref={inputRef}\r\n                type={inputTypeForHero()}\r\n                value={editValue}\r\n                onValueChange={(value) => {\r\n                  // Ensure ref is set during typing to prevent unwanted updates\r\n                  isEditingRef.current = true;\r\n                  setEditValue(value);\r\n                }}\r\n                onBlur={handleSave}\r\n                onKeyDown={handleKeyDown}\r\n                size=\"sm\"\r\n                variant=\"bordered\"\r\n                classNames={{\r\n                  base: \"w-full max-w-[160px]\",\r\n                  input: \"text-right font-medium text-small py-0 dark:text-white\",\r\n                  inputWrapper: \"h-7 min-h-unit-7 bg-content1 dark:bg-gray-900 shadow-sm\"\r\n                }}\r\n\r\n                step={type === \"price\" ? \"0.05\" : undefined}\r\n                min={min !== undefined ? min : (type === \"price\" ? 0 : undefined)}\r\n                max={max !== undefined ? max : undefined}\r\n              />\r\n            ) : (\r\n              <motion.div\r\n                className=\"py-1 px-2 rounded-md cursor-text hover:bg-content2 dark:hover:bg-gray-800 transition-colors w-full max-w-[160px] dark:bg-gray-900 dark:text-white\"\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                exit={{ opacity: 0 }}\r\n                onClick={() => {\r\n                  // Update ref immediately to prevent race conditions\r\n                  isEditingRef.current = true;\r\n                  setEditValue(getInitialEditValue());\r\n                  setIsEditing(true);\r\n                }}\r\n                tabIndex={0}\r\n                data-trade-id={tradeId}\r\n                data-field={field}\r\n                onFocus={handleFocus}\r\n                onKeyDown={(e) => {\r\n                  // Prevent default tab behavior since we handle it globally\r\n                  if (e.key === 'Tab') {\r\n                    e.preventDefault();\r\n                  }\r\n                  // Allow Enter to start editing\r\n                  if (e.key === 'Enter') {\r\n                    e.preventDefault();\r\n                    handleFocus();\r\n                  }\r\n                }}\r\n              >\r\n                <div className=\"flex items-center gap-1\">\r\n                  <span className={`font-medium text-small whitespace-nowrap ${getValueColor()}`}>\r\n                    {type === \"price\" ? `₹${formatCurrency(value as number)}` : String(value)}\r\n                  </span>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\ninterface StockCellProps {\r\n  name: string;\r\n  setup: string;\r\n  onSave: (field: \"name\" | \"setup\", value: string | number) => void;\r\n}\r\n\r\nconst StockCell: React.FC<StockCellProps> = ({ name, setup, onSave }) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-1\">\r\n      <div className=\"max-w-[200px]\">\r\n        <EditableCell\r\n          value={name}\r\n          onSave={(value) => onSave(\"name\", value)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface BuySellCellProps {\r\n  value: \"Buy\" | \"Sell\";\r\n  onSave: (value: \"Buy\" | \"Sell\") => void;\r\n}\r\n\r\nconst BuySellCell: React.FC<BuySellCellProps> = React.memo(function BuySellCell({ value, onSave }) {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  return (\r\n    <Dropdown isOpen={isOpen} onOpenChange={setIsOpen}>\r\n      <DropdownTrigger>\r\n        <Button\r\n          size=\"sm\"\r\n          variant={value === \"Buy\" ? \"flat\" : \"bordered\"}\r\n          color={value === \"Buy\" ? \"success\" : \"danger\"}\r\n          className=\"min-w-[80px] h-7\"\r\n          endContent={<Icon icon=\"lucide:chevron-down\" className=\"w-3.5 h-3.5\" />}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Tab') {\r\n              e.preventDefault(); // Let global handler manage tab navigation\r\n            } else if (e.key === 'Enter' || e.key === 'ArrowDown' || e.key === 'ArrowUp') {\r\n              e.preventDefault();\r\n              setIsOpen(true);\r\n            }\r\n          }}\r\n          onFocus={() => {\r\n            // Auto-open dropdown when focused via tab navigation\r\n            setTimeout(() => setIsOpen(true), 100);\r\n          }}\r\n        >\r\n          {value}\r\n        </Button>\r\n      </DropdownTrigger>\r\n      <DropdownMenu\r\n        aria-label=\"Buy/Sell selection\"\r\n        selectionMode=\"single\"\r\n        selectedKeys={[value]}\r\n        onSelectionChange={(keys) => {\r\n          const selected = Array.from(keys)[0] as \"Buy\" | \"Sell\";\r\n          onSave(selected);\r\n          setIsOpen(false);\r\n        }}\r\n        onKeyDown={(e) => {\r\n          if (e.key === 'Escape') {\r\n            setIsOpen(false);\r\n          }\r\n        }}\r\n        autoFocus\r\n      >\r\n        <DropdownItem key=\"Buy\" textValue=\"Buy\">Buy</DropdownItem>\r\n        <DropdownItem key=\"Sell\" textValue=\"Sell\">Sell</DropdownItem>\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n});\r\n\r\ninterface PositionStatusCellProps {\r\n  value: \"Open\" | \"Closed\" | \"Partial\";\r\n  onSave: (value: \"Open\" | \"Closed\" | \"Partial\") => void;\r\n}\r\n\r\nconst PositionStatusCell: React.FC<PositionStatusCellProps> = React.memo(function PositionStatusCell({ value, onSave }) {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n  return (\r\n    <Dropdown isOpen={isOpen} onOpenChange={setIsOpen}>\r\n      <DropdownTrigger>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"flat\"\r\n          color={\r\n            value === \"Open\" ? \"primary\" :\r\n            value === \"Closed\" ? \"success\" : \"warning\"\r\n          }\r\n          className=\"min-w-[90px] h-7 capitalize\"\r\n          endContent={<Icon icon=\"lucide:chevron-down\" className=\"w-3.5 h-3.5\" />}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Tab') {\r\n              e.preventDefault();\r\n            } else if (e.key === 'Enter' || e.key === 'ArrowDown' || e.key === 'ArrowUp') {\r\n              e.preventDefault();\r\n              setIsOpen(true);\r\n            }\r\n          }}\r\n          onFocus={() => {\r\n            setTimeout(() => setIsOpen(true), 100);\r\n          }}\r\n        >\r\n          {value}\r\n        </Button>\r\n      </DropdownTrigger>\r\n      <DropdownMenu\r\n        aria-label=\"Position status selection\"\r\n        selectionMode=\"single\"\r\n        selectedKeys={[value]}\r\n        onSelectionChange={(keys) => {\r\n          const selected = Array.from(keys)[0] as \"Open\" | \"Closed\" | \"Partial\";\r\n          onSave(selected);\r\n          setIsOpen(false);\r\n        }}\r\n        onKeyDown={(e) => {\r\n          if (e.key === 'Escape') {\r\n            setIsOpen(false);\r\n          }\r\n        }}\r\n        autoFocus\r\n      >\r\n        <DropdownItem key=\"Open\" textValue=\"Open\">Open</DropdownItem>\r\n        <DropdownItem key=\"Closed\" textValue=\"Closed\">Closed</DropdownItem>\r\n        <DropdownItem key=\"Partial\" textValue=\"Partial\">Partial</DropdownItem>\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n});\r\n\r\ninterface ProficiencyGrowthAreasCellProps {\r\n  value: string;\r\n  onSave: (value: string) => void;\r\n}\r\n\r\nconst PROFICIENCY_GROWTH_AREAS = [\r\n  'Booked Early',\r\n  \"Didn't Book Loss\",\r\n  'FOMO',\r\n  'Illiquid Stock',\r\n  'Illogical SL',\r\n  'Lack of Patience',\r\n  'Late Entry',\r\n  'Momentum-less stock',\r\n  'Overconfidence',\r\n  'Overtrading',\r\n  'Poor Exit',\r\n  'Poor Po Size',\r\n  'Poor Sector',\r\n  'Poor Stock',\r\n  'Shifted SL Suickly',\r\n  'Too Early Entry',\r\n  'Too Tight SL'\r\n];\r\nconst GROWTH_AREAS_LOCAL_KEY = 'custom_growth_areas_options';\r\n\r\nconst ProficiencyGrowthAreasCell: React.FC<ProficiencyGrowthAreasCellProps> = React.memo(function ProficiencyGrowthAreasCell({ value, onSave }) {\r\n  const [customOptions, setCustomOptions] = React.useState<string[]>([]);\r\n  const [availableDefaultOptions, setAvailableDefaultOptions] = React.useState<string[]>(PROFICIENCY_GROWTH_AREAS);\r\n  const allOptions = React.useMemo(() => [\r\n    ...availableDefaultOptions,\r\n    ...customOptions\r\n  ], [customOptions, availableDefaultOptions]);\r\n\r\n  React.useEffect(() => {\r\n    const loadOptions = async () => {\r\n      try {\r\n        const stored = await fetchMiscData(GROWTH_AREAS_LOCAL_KEY);\r\n        if (stored && Array.isArray(stored)) {\r\n          setCustomOptions(stored.filter(o => !PROFICIENCY_GROWTH_AREAS.includes(o)));\r\n        }\r\n\r\n        const availableDefaults = await fetchMiscData(`${GROWTH_AREAS_LOCAL_KEY}_defaults`);\r\n        if (availableDefaults && Array.isArray(availableDefaults)) {\r\n          setAvailableDefaultOptions(availableDefaults);\r\n        } else {\r\n          // If no defaults are stored, initialize with all original defaults\r\n          setAvailableDefaultOptions(PROFICIENCY_GROWTH_AREAS);\r\n        }\r\n      } catch (error) {\r\n        setAvailableDefaultOptions(PROFICIENCY_GROWTH_AREAS);\r\n      }\r\n    };\r\n\r\n    loadOptions();\r\n  }, []);\r\n\r\n  const handleAddOption = (newValue: string) => {\r\n    if (newValue && !allOptions.some(o => o.toLowerCase() === newValue.toLowerCase())) {\r\n      const newCustomOptions = [...customOptions, newValue];\r\n      setCustomOptions(newCustomOptions);\r\n      saveMiscData(GROWTH_AREAS_LOCAL_KEY, newCustomOptions);\r\n      onSave(newValue);\r\n    } else if (newValue) { // If it's an existing option, just select it\r\n      onSave(newValue);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCustomOption = (optionToDelete: string) => {\r\n    const isDefaultOption = PROFICIENCY_GROWTH_AREAS.includes(optionToDelete);\r\n    const confirmMessage = isDefaultOption\r\n      ? `Are you sure you want to permanently delete \"${optionToDelete}\" globally? This will remove it from all growth area dropdowns across the entire application.`\r\n      : `Are you sure you want to permanently delete \"${optionToDelete}\"?`;\r\n\r\n    if (window.confirm(confirmMessage)) {\r\n      if (isDefaultOption) {\r\n        // Permanently remove from available default options\r\n        const updatedDefaultOptions = availableDefaultOptions.filter(o => o !== optionToDelete);\r\n        setAvailableDefaultOptions(updatedDefaultOptions);\r\n        saveMiscData(`${GROWTH_AREAS_LOCAL_KEY}_defaults`, updatedDefaultOptions);\r\n      } else {\r\n        // Delete custom option\r\n        const updatedCustomOptions = customOptions.filter(o => o !== optionToDelete);\r\n        setCustomOptions(updatedCustomOptions);\r\n        saveMiscData(GROWTH_AREAS_LOCAL_KEY, updatedCustomOptions);\r\n      }\r\n\r\n      // If the currently selected value is the one being deleted, clear it\r\n      if (value === optionToDelete) {\r\n        onSave(''); // Clear the selected value\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSelect = (selected: string) => {\r\n    if (selected === '__add_new__') {\r\n      const newValue = window.prompt('Enter new growth area:');\r\n      if (newValue) {\r\n        handleAddOption(newValue);\r\n      }\r\n    } else {\r\n      onSave(selected);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dropdown>\r\n      <DropdownTrigger>\r\n        <Button size=\"sm\" variant=\"flat\" color=\"default\" className=\"min-w-[180px] h-7 justify-between\"\r\n          endContent={<Icon icon=\"lucide:chevron-down\" className=\"w-3.5 h-3.5\" />}\r\n        >\r\n          {value || <span className=\"text-default-400\">Select Growth Area</span>}\r\n        </Button>\r\n      </DropdownTrigger>\r\n      <DropdownMenu\r\n        aria-label=\"Growth areas selection\"\r\n        selectionMode=\"single\"\r\n        selectedKeys={value ? [value] : []}\r\n        onSelectionChange={(keys) => {\r\n          const selected = Array.from(keys)[0] as string;\r\n          handleSelect(selected);\r\n        }}\r\n      >\r\n        {allOptions\r\n          .map((area) => (\r\n            <DropdownItem key={area} textValue={area}>\r\n              <div className=\"flex items-center gap-1 w-full\">\r\n                <span>{area}</span>\r\n                <Button\r\n                  isIconOnly\r\n                  size=\"sm\"\r\n                  variant=\"light\"\r\n                  color=\"danger\"\r\n                  className=\"min-w-unit-4 w-4 h-4 p-0\"\r\n                  onPointerDown={(e) => {\r\n                    e.stopPropagation();\r\n                  }}\r\n                  onPress={() => {\r\n                    handleDeleteCustomOption(area);\r\n                  }}\r\n                  aria-label={`Delete ${area}`}\r\n                >\r\n                  <Icon icon=\"lucide:trash-2\" className=\"w-2.5 h-2.5\" />\r\n                </Button>\r\n              </div>\r\n            </DropdownItem>\r\n          ))\r\n          .concat([\r\n            <DropdownItem key=\"__add_new__\" textValue=\"Add new growth area...\" className=\"text-primary\">\r\n              <span className=\"flex items-center gap-1\">\r\n                <Icon icon=\"lucide:plus\" className=\"w-4 h-4\" /> Add new growth area...\r\n              </span>\r\n            </DropdownItem>\r\n          ])}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n});\r\n\r\ninterface NameCellProps {\r\n  value: string;\r\n  onSave: (value: string) => void;\r\n}\r\n\r\nconst NameCell: React.FC<NameCellProps> = React.memo(function NameCell({ value, onSave }) {\r\n  const [isEditing, setIsEditing] = React.useState(false);\r\n  const [editValue, setEditValue] = React.useState(value);\r\n  const [showDropdown, setShowDropdown] = React.useState(false);\r\n  const [filtered, setFiltered] = React.useState<string[]>([]);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(-1);\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const dropdownRef = React.useRef<HTMLDivElement>(null);\r\n\r\n  // Update editValue when value prop changes, but only when not editing\r\n  React.useEffect(() => {\r\n    if (!isEditing) {\r\n      setEditValue(value);\r\n    }\r\n  }, [value, isEditing]);\r\n\r\n  // Move stockNames state and effect here\r\n  const [stockNames, setStockNames] = React.useState<string[]>([]);\r\n  React.useEffect(() => {\r\n    async function loadStockNames() {\r\n      const response = await fetch(csvUrl);\r\n      const csvText = await response.text();\r\n      const Papa = (await import('papaparse')).default;\r\n      Papa.parse(csvText, {\r\n        header: true,\r\n        complete: (results) => {\r\n          const names = (results.data as any[]).map(row => row['Stock Name']).filter(Boolean);\r\n          setStockNames(names);\r\n        }\r\n      });\r\n    }\r\n    loadStockNames();\r\n  }, []);\r\n\r\n  // Function to find closest matching stock name\r\n  const findClosestMatch = (input: string): string | null => {\r\n    if (!input || !stockNames.length) return null;\r\n\r\n    const inputLower = input.toLowerCase();\r\n    let bestMatch = null;\r\n    let bestScore = 0;\r\n\r\n    // First try exact prefix match\r\n    const exactPrefixMatch = stockNames.find(name =>\r\n      name.toLowerCase().startsWith(inputLower)\r\n    );\r\n    if (exactPrefixMatch) return exactPrefixMatch;\r\n\r\n    // Then try contains match\r\n    const containsMatch = stockNames.find(name =>\r\n      name.toLowerCase().includes(inputLower)\r\n    );\r\n    if (containsMatch) return containsMatch;\r\n\r\n    // Finally try fuzzy match\r\n    for (const name of stockNames) {\r\n      const nameLower = name.toLowerCase();\r\n      let score = 0;\r\n      let inputIndex = 0;\r\n\r\n      // Calculate similarity score\r\n      for (let i = 0; i < nameLower.length && inputIndex < inputLower.length; i++) {\r\n        if (nameLower[i] === inputLower[inputIndex]) {\r\n          score++;\r\n          inputIndex++;\r\n        }\r\n      }\r\n\r\n      if (score > bestScore) {\r\n        bestScore = score;\r\n        bestMatch = name;\r\n      }\r\n    }\r\n\r\n    // Only return match if it's reasonably similar\r\n    return bestScore > (inputLower.length / 2) ? bestMatch : null;\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (isEditing && editValue) {\r\n      const matches = stockNames.filter(n =>\r\n        n.toLowerCase().includes(editValue.toLowerCase())\r\n      );\r\n      setFiltered(matches.slice(0, 10));\r\n      setShowDropdown(matches.length > 0);\r\n      setSelectedIndex(-1);\r\n    } else {\r\n      setShowDropdown(false);\r\n    }\r\n  }, [editValue, isEditing, stockNames]);\r\n\r\n  // Ensure input stays focused when dropdown is shown\r\n  React.useEffect(() => {\r\n    if (isEditing && inputRef.current && showDropdown) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isEditing, showDropdown]);\r\n\r\n  // Auto-start editing when focused via tab navigation\r\n  const handleAutoEdit = React.useCallback(() => {\r\n    if (!isEditing) {\r\n      setIsEditing(true);\r\n      setEditValue(value);\r\n      setTimeout(() => {\r\n        if (inputRef.current) {\r\n          inputRef.current.focus();\r\n          inputRef.current.select(); // Select all text for easy replacement\r\n        }\r\n      }, 50);\r\n    }\r\n  }, [isEditing, value]);\r\n\r\n  const handleSave = (val?: string) => {\r\n    const finalValue = val ?? editValue;\r\n\r\n    // Allow empty values to be saved (clearing the field)\r\n    if (!finalValue.trim()) {\r\n      onSave(''); // Save empty string\r\n      setIsEditing(false);\r\n      setShowDropdown(false);\r\n      setSelectedIndex(-1);\r\n      return;\r\n    }\r\n\r\n    // Check if the value exists in stockNames\r\n    const exactMatch = stockNames.find(\r\n      name => name.toLowerCase() === finalValue.toLowerCase()\r\n    );\r\n\r\n    if (exactMatch) {\r\n      onSave(exactMatch); // Use the exact case from database\r\n    } else {\r\n      // Try to find closest match\r\n      const closestMatch = findClosestMatch(finalValue);\r\n      if (closestMatch) {\r\n        const confirmed = window.confirm(\r\n          `\"${finalValue}\" not found. Did you mean \"${closestMatch}\"?`\r\n        );\r\n        if (confirmed) {\r\n          onSave(closestMatch);\r\n        } else {\r\n          // Revert to previous value if user declines suggestion\r\n           setEditValue(value);\r\n        }\r\n      } else {\r\n         const addNew = window.confirm(`\"${finalValue}\" is not a valid stock name. Do you want to add it?`);\r\n         if(addNew){\r\n          onSave(finalValue.toUpperCase());\r\n         } else {\r\n          setEditValue(value); // Revert to previous value\r\n         }\r\n      }\r\n    }\r\n    setIsEditing(false);\r\n    setShowDropdown(false);\r\n    setSelectedIndex(-1);\r\n  };\r\n\r\n  // Scroll selected item into view\r\n  React.useEffect(() => {\r\n    if (selectedIndex >= 0 && dropdownRef.current) {\r\n      const selectedElement = document.getElementById(`stock-suggestion-${selectedIndex}`);\r\n      if (selectedElement) {\r\n        selectedElement.scrollIntoView({\r\n          block: 'nearest',\r\n          behavior: 'smooth'\r\n        });\r\n      }\r\n    }\r\n  }, [selectedIndex]);\r\n\r\n  // Update dropdown position on scroll/resize to prevent clipping\r\n  React.useEffect(() => {\r\n    if (!showDropdown || !inputRef.current || !dropdownRef.current) return;\r\n\r\n    const updatePosition = () => {\r\n      if (inputRef.current && dropdownRef.current) {\r\n        const rect = inputRef.current.getBoundingClientRect();\r\n        const dropdown = dropdownRef.current;\r\n\r\n        dropdown.style.top = `${rect.bottom + 2}px`;\r\n        dropdown.style.left = `${rect.left}px`;\r\n        dropdown.style.width = `${Math.max(220, rect.width)}px`;\r\n      }\r\n    };\r\n\r\n    // Update position immediately\r\n    updatePosition();\r\n\r\n    // Update position on scroll and resize\r\n    window.addEventListener('scroll', updatePosition, true);\r\n    window.addEventListener('resize', updatePosition);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', updatePosition, true);\r\n      window.removeEventListener('resize', updatePosition);\r\n    };\r\n  }, [showDropdown]);\r\n\r\n  // Handle click outside to close dropdown\r\n  React.useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        dropdownRef.current &&\r\n        !dropdownRef.current.contains(event.target as Node) &&\r\n        inputRef.current &&\r\n        !inputRef.current.contains(event.target as Node)\r\n      ) {\r\n        setShowDropdown(false);\r\n        setIsEditing(false);\r\n      }\r\n    };\r\n\r\n    if (showDropdown) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }\r\n  }, [showDropdown]);\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (!showDropdown || filtered.length === 0) {\r\n      // Allow normal typing when dropdown is not shown\r\n      if (e.key === 'Enter') {\r\n        e.preventDefault();\r\n        handleSave();\r\n      } else if (e.key === 'Escape') {\r\n        e.preventDefault();\r\n        setIsEditing(false);\r\n        setShowDropdown(false);\r\n      }\r\n      return;\r\n    }\r\n\r\n    switch (e.key) {\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setSelectedIndex(prev => {\r\n          const next = prev + 1;\r\n          const newIndex = next >= filtered.length ? 0 : next;\r\n          // Scroll to selected item\r\n          setTimeout(() => {\r\n            const selectedElement = dropdownRef.current?.querySelector(`[data-index=\"${newIndex}\"]`);\r\n            selectedElement?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\r\n          }, 0);\r\n          return newIndex;\r\n        });\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setSelectedIndex(prev => {\r\n          const next = prev - 1;\r\n          const newIndex = next < 0 ? filtered.length - 1 : next;\r\n          // Scroll to selected item\r\n          setTimeout(() => {\r\n            const selectedElement = dropdownRef.current?.querySelector(`[data-index=\"${newIndex}\"]`);\r\n            selectedElement?.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\r\n          }, 0);\r\n          return newIndex;\r\n        });\r\n        break;\r\n      case 'Enter':\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (selectedIndex >= 0 && filtered[selectedIndex]) {\r\n          handleSave(filtered[selectedIndex]);\r\n        } else if (filtered.length === 1) {\r\n          handleSave(filtered[0]);\r\n        } else {\r\n          handleSave();\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        setShowDropdown(false);\r\n        setSelectedIndex(-1);\r\n        setIsEditing(false);\r\n        break;\r\n      case 'Tab':\r\n        if (selectedIndex >= 0 && filtered[selectedIndex]) {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          handleSave(filtered[selectedIndex]);\r\n        }\r\n        break;\r\n      case 'Home':\r\n        e.preventDefault();\r\n        setSelectedIndex(0);\r\n        break;\r\n      case 'End':\r\n        e.preventDefault();\r\n        setSelectedIndex(filtered.length - 1);\r\n        break;\r\n      case 'PageDown':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => Math.min(prev + 5, filtered.length - 1));\r\n        break;\r\n      case 'PageUp':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => Math.max(prev - 5, 0));\r\n        break;\r\n    }\r\n  };\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <div className=\"relative min-w-[220px]\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          className=\"w-full min-w-[220px] px-3 py-2 text-sm bg-gray-100 dark:bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-primary\"\r\n          value={editValue}\r\n          onChange={e => setEditValue(e.target.value)}\r\n          onBlur={(e) => {\r\n            // Don't close if focus is moving to the dropdown\r\n            if (!dropdownRef.current?.contains(e.relatedTarget as Node)) {\r\n              setTimeout(() => handleSave(), 150);\r\n            }\r\n          }}\r\n          onKeyDown={handleKeyDown}\r\n          autoFocus\r\n        />\r\n        {showDropdown && createPortal(\r\n          <div\r\n            ref={dropdownRef}\r\n            className=\"fixed z-[99999] min-w-[220px] bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded shadow-lg max-h-48 overflow-y-auto overflow-x-auto\"\r\n            style={{\r\n              top: inputRef.current ? inputRef.current.getBoundingClientRect().bottom + 2 : 0,\r\n              left: inputRef.current ? inputRef.current.getBoundingClientRect().left : 0,\r\n              width: inputRef.current ? Math.max(220, inputRef.current.getBoundingClientRect().width) : 220,\r\n            }}\r\n            role=\"listbox\"\r\n            tabIndex={-1}\r\n            onMouseDown={(e) => {\r\n              // Prevent input from losing focus when clicking dropdown\r\n              e.preventDefault();\r\n            }}\r\n          >\r\n            {filtered.map((name, i) => (\r\n              <div\r\n                key={name}\r\n                data-index={i}\r\n                id={`stock-suggestion-${i}`}\r\n                role=\"option\"\r\n                aria-selected={i === selectedIndex}\r\n                className={`px-3 py-1.5 text-sm cursor-pointer whitespace-nowrap ${\r\n                  i === selectedIndex\r\n                    ? 'bg-blue-100 dark:bg-blue-900'\r\n                    : 'hover:bg-blue-50 dark:hover:bg-blue-800'\r\n                }`}\r\n                onMouseDown={(e) => {\r\n                  e.preventDefault();\r\n                  handleSave(name);\r\n                }}\r\n                onMouseEnter={() => setSelectedIndex(i)}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleSave(name);\r\n                }}\r\n              >\r\n                {name}\r\n              </div>\r\n            ))}\r\n          </div>,\r\n          document.body\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"px-2 py-1 text-sm bg-gray-100 dark:bg-gray-700 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors cursor-text\"\r\n      onClick={() => setIsEditing(true)}\r\n      onFocus={handleAutoEdit}\r\n      tabIndex={0}\r\n    >\r\n      {value || <span className=\"text-gray-400\">Stock name</span>}\r\n    </div>\r\n  );\r\n});\r\n\r\ninterface SetupCellProps {\r\n  value: string;\r\n  onSave: (value: string) => void;\r\n}\r\n\r\nconst SETUP_OPTIONS = [\r\n  'ITB',\r\n  'Chop BO',\r\n  'IPO Base',\r\n  '3/5/8',\r\n  '21/50',\r\n  'Breakout',\r\n  'Pullback',\r\n  'Reversal',\r\n  'Continuation',\r\n  'Gap Fill',\r\n  'OTB',\r\n  'Stage 2',\r\n  'ONP BO',\r\n  'EP',\r\n  'Pivot Bo',\r\n  'Cheat',\r\n  'Flag',\r\n  'Other'\r\n];\r\nconst SETUP_LOCAL_KEY = 'custom_setup_options';\r\n\r\nconst SetupCell: React.FC<SetupCellProps> = React.memo(function SetupCell({ value, onSave }) {\r\n  const [customOptions, setCustomOptions] = React.useState<string[]>([]);\r\n  const [availableDefaultOptions, setAvailableDefaultOptions] = React.useState<string[]>(SETUP_OPTIONS);\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const allOptions = React.useMemo(() => [\r\n    ...availableDefaultOptions,\r\n    ...customOptions\r\n  ], [customOptions, availableDefaultOptions]);\r\n\r\n  React.useEffect(() => {\r\n    const loadOptions = async () => {\r\n      try {\r\n        const stored = await fetchMiscData(SETUP_LOCAL_KEY);\r\n        if (stored && Array.isArray(stored)) {\r\n          setCustomOptions(stored.filter(o => !SETUP_OPTIONS.includes(o)));\r\n        }\r\n\r\n        const availableDefaults = await fetchMiscData(`${SETUP_LOCAL_KEY}_defaults`);\r\n        if (availableDefaults && Array.isArray(availableDefaults)) {\r\n          setAvailableDefaultOptions(availableDefaults);\r\n        } else {\r\n          // If no defaults are stored, initialize with all original defaults\r\n          setAvailableDefaultOptions(SETUP_OPTIONS);\r\n        }\r\n      } catch (error) {\r\n        setAvailableDefaultOptions(SETUP_OPTIONS);\r\n      }\r\n    };\r\n\r\n    loadOptions();\r\n  }, []);\r\n\r\n  const handleAddOption = (newValue: string) => {\r\n    if (newValue && !allOptions.some(o => o.toLowerCase() === newValue.toLowerCase())) {\r\n      const newCustomOptions = [...customOptions, newValue];\r\n      setCustomOptions(newCustomOptions);\r\n      saveMiscData(SETUP_LOCAL_KEY, newCustomOptions);\r\n      onSave(newValue);\r\n    } else if (newValue) { // If it's an existing option, just select it\r\n      onSave(newValue);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCustomOption = (optionToDelete: string) => {\r\n    const isDefaultOption = SETUP_OPTIONS.includes(optionToDelete);\r\n    const confirmMessage = isDefaultOption\r\n      ? `Are you sure you want to permanently delete \"${optionToDelete}\" globally? This will remove it from all setup dropdowns across the entire application.`\r\n      : `Are you sure you want to permanently delete \"${optionToDelete}\"?`;\r\n\r\n    if (window.confirm(confirmMessage)) {\r\n      if (isDefaultOption) {\r\n        // Permanently remove from available default options\r\n        const updatedDefaultOptions = availableDefaultOptions.filter(o => o !== optionToDelete);\r\n        setAvailableDefaultOptions(updatedDefaultOptions);\r\n        saveMiscData(`${SETUP_LOCAL_KEY}_defaults`, updatedDefaultOptions);\r\n      } else {\r\n        // Delete custom option\r\n        const updatedCustomOptions = customOptions.filter(o => o !== optionToDelete);\r\n        setCustomOptions(updatedCustomOptions);\r\n        saveMiscData(SETUP_LOCAL_KEY, updatedCustomOptions);\r\n      }\r\n\r\n      if (value === optionToDelete) {\r\n        onSave('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSelect = (selected: string) => {\r\n    if (selected === '__add_new__') {\r\n      const newValue = window.prompt('Enter new setup:');\r\n      if (newValue) {\r\n        handleAddOption(newValue);\r\n      }\r\n    } else {\r\n      onSave(selected);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dropdown isOpen={isOpen} onOpenChange={setIsOpen}>\r\n      <DropdownTrigger>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"flat\"\r\n          color=\"primary\"\r\n          className=\"min-w-[120px] h-7 justify-between\"\r\n          endContent={<Icon icon=\"lucide:chevron-down\" className=\"w-3.5 h-3.5\" />}\r\n          onFocus={() => setTimeout(() => setIsOpen(true), 100)}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Tab') {\r\n              e.preventDefault();\r\n            } else if (e.key === 'Enter' || e.key === 'ArrowDown' || e.key === 'ArrowUp') {\r\n              e.preventDefault();\r\n              setIsOpen(true);\r\n            }\r\n          }}\r\n        >\r\n          {value || <span className=\"text-default-400\">Setup</span>}\r\n        </Button>\r\n      </DropdownTrigger>\r\n      <DropdownMenu\r\n        aria-label=\"Setup type selection\"\r\n        selectionMode=\"single\"\r\n        selectedKeys={value ? [value] : []}\r\n        onSelectionChange={(keys) => {\r\n          const selected = Array.from(keys)[0] as string;\r\n          handleSelect(selected);\r\n        }}\r\n      >\r\n        {allOptions\r\n          .map((option) => (\r\n            <DropdownItem key={option} textValue={option}>\r\n              <div className=\"flex items-center gap-1 w-full\">\r\n                <span>{option}</span>\r\n                <Button\r\n                  isIconOnly\r\n                  size=\"sm\"\r\n                  variant=\"light\"\r\n                  color=\"danger\"\r\n                  className=\"min-w-unit-4 w-4 h-4 p-0\"\r\n                  onPointerDown={(e) => {\r\n                    e.stopPropagation();\r\n                  }}\r\n                  onPress={() => {\r\n                    handleDeleteCustomOption(option);\r\n                  }}\r\n                  aria-label={`Delete ${option}`}\r\n                >\r\n                  <Icon icon=\"lucide:trash-2\" className=\"w-2.5 h-2.5\" />\r\n                </Button>\r\n              </div>\r\n            </DropdownItem>\r\n          ))\r\n          .concat([\r\n            <DropdownItem key=\"__add_new__\" textValue=\"Add new setup...\" className=\"text-primary\">\r\n              <span className=\"flex items-center gap-1\">\r\n                <Icon icon=\"lucide:plus\" className=\"w-4 h-4\" /> Add new setup...\r\n              </span>\r\n            </DropdownItem>\r\n          ])}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n});\r\n\r\ninterface ExitTriggerCellProps {\r\n  value: string;\r\n  onSave: (value: string) => void;\r\n}\r\n\r\nconst EXIT_TRIGGER_OPTIONS = [\r\n  'Breakeven exit',\r\n  'Market Pressure',\r\n  'R multiples',\r\n  'Random',\r\n  'SL',\r\n  'Target',\r\n  'Trailing SL exit',\r\n  \"Broke key MA's\",\r\n  'Panic sell',\r\n  'Early sell off',\r\n  'Failed BO'\r\n];\r\nconst EXIT_TRIGGER_LOCAL_KEY = 'custom_exit_trigger_options';\r\n\r\nconst ExitTriggerCell: React.FC<ExitTriggerCellProps> = React.memo(function ExitTriggerCell({ value, onSave }) {\r\n  const [customOptions, setCustomOptions] = React.useState<string[]>([]);\r\n  const [availableDefaultOptions, setAvailableDefaultOptions] = React.useState<string[]>(EXIT_TRIGGER_OPTIONS);\r\n  const allOptions = React.useMemo(() => [\r\n    ...availableDefaultOptions,\r\n    ...customOptions\r\n  ], [customOptions, availableDefaultOptions]);\r\n\r\n  React.useEffect(() => {\r\n    const loadOptions = async () => {\r\n      try {\r\n        const stored = await fetchMiscData(EXIT_TRIGGER_LOCAL_KEY);\r\n        if (stored && Array.isArray(stored)) {\r\n          setCustomOptions(stored.filter(o => !EXIT_TRIGGER_OPTIONS.includes(o)));\r\n        }\r\n\r\n        const availableDefaults = await fetchMiscData(`${EXIT_TRIGGER_LOCAL_KEY}_defaults`);\r\n        if (availableDefaults && Array.isArray(availableDefaults)) {\r\n          setAvailableDefaultOptions(availableDefaults);\r\n        } else {\r\n          // If no defaults are stored, initialize with all original defaults\r\n          setAvailableDefaultOptions(EXIT_TRIGGER_OPTIONS);\r\n        }\r\n      } catch (error) {\r\n        setAvailableDefaultOptions(EXIT_TRIGGER_OPTIONS);\r\n      }\r\n    };\r\n\r\n    loadOptions();\r\n  }, []);\r\n\r\n  const handleAddOption = (newValue: string) => {\r\n    if (newValue && !allOptions.some(o => o.toLowerCase() === newValue.toLowerCase())) {\r\n      const newCustomOptions = [...customOptions, newValue];\r\n      setCustomOptions(newCustomOptions);\r\n      saveMiscData(EXIT_TRIGGER_LOCAL_KEY, newCustomOptions);\r\n      onSave(newValue);\r\n    } else if (newValue) { // If it's an existing option, just select it\r\n      onSave(newValue);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCustomOption = (optionToDelete: string) => {\r\n    const isDefaultOption = EXIT_TRIGGER_OPTIONS.includes(optionToDelete);\r\n    const confirmMessage = isDefaultOption\r\n      ? `Are you sure you want to permanently delete \"${optionToDelete}\" globally? This will remove it from all exit trigger dropdowns across the entire application.`\r\n      : `Are you sure you want to permanently delete \"${optionToDelete}\"?`;\r\n\r\n    if (window.confirm(confirmMessage)) {\r\n      if (isDefaultOption) {\r\n        // Permanently remove from available default options\r\n        const updatedDefaultOptions = availableDefaultOptions.filter(o => o !== optionToDelete);\r\n        setAvailableDefaultOptions(updatedDefaultOptions);\r\n        saveMiscData(`${EXIT_TRIGGER_LOCAL_KEY}_defaults`, updatedDefaultOptions);\r\n      } else {\r\n        // Delete custom option\r\n        const updatedCustomOptions = customOptions.filter(o => o !== optionToDelete);\r\n        setCustomOptions(updatedCustomOptions);\r\n        saveMiscData(EXIT_TRIGGER_LOCAL_KEY, updatedCustomOptions);\r\n      }\r\n\r\n      if (value === optionToDelete) {\r\n        onSave('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSelect = (selected: string) => {\r\n    if (selected === '__add_new__') {\r\n      const newValue = window.prompt('Enter new exit trigger:');\r\n      if (newValue) {\r\n        handleAddOption(newValue);\r\n      }\r\n    } else {\r\n      onSave(selected);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dropdown>\r\n      <DropdownTrigger>\r\n        <Button size=\"sm\" variant=\"flat\" color=\"default\" className=\"min-w-[150px] h-7 justify-between\"\r\n          endContent={<Icon icon=\"lucide:chevron-down\" className=\"w-3.5 h-3.5\" />}\r\n        >\r\n          {value || <span className=\"text-default-400\">Select Exit Trigger</span>}\r\n        </Button>\r\n      </DropdownTrigger>\r\n      <DropdownMenu\r\n        aria-label=\"Exit trigger selection\"\r\n        selectionMode=\"single\"\r\n        selectedKeys={value ? [value] : []}\r\n        onSelectionChange={(keys) => {\r\n          const selected = Array.from(keys)[0] as string;\r\n          handleSelect(selected);\r\n        }}\r\n      >\r\n        {allOptions\r\n          .map((option) => (\r\n            <DropdownItem key={option} textValue={option}>\r\n              <div className=\"flex items-center gap-1 w-full\">\r\n                <span>{option}</span>\r\n                <Button\r\n                  isIconOnly\r\n                  size=\"sm\"\r\n                  variant=\"light\"\r\n                  color=\"danger\"\r\n                  className=\"min-w-unit-4 w-4 h-4 p-0\"\r\n                  onPointerDown={(e) => {\r\n                    e.stopPropagation();\r\n                  }}\r\n                  onPress={() => {\r\n                    handleDeleteCustomOption(option);\r\n                  }}\r\n                  aria-label={`Delete ${option}`}\r\n                >\r\n                  <Icon icon=\"lucide:trash-2\" className=\"w-2.5 h-2.5\" />\r\n                </Button>\r\n              </div>\r\n            </DropdownItem>\r\n          ))\r\n          .concat([\r\n            <DropdownItem key=\"__add_new__\" textValue=\"Add new exit trigger...\" className=\"text-primary\">\r\n              <span className=\"flex items-center gap-1\">\r\n                <Icon icon=\"lucide:plus\" className=\"w-4 h-4\" /> Add new exit trigger...\r\n              </span>\r\n            </DropdownItem>\r\n          ])}\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n});\r\n\r\ninterface PlanFollowedCellProps {\r\n  value: boolean;\r\n  onSave: (value: boolean) => void;\r\n}\r\n\r\nconst PlanFollowedCell: React.FC<PlanFollowedCellProps> = ({ value, onSave }) => {\r\n  const displayValue = value ? \"Yes\" : \"No\";\r\n  return (\r\n    <Dropdown>\r\n      <DropdownTrigger>\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"flat\"\r\n          color={value ? \"success\" : \"danger\"}\r\n          className=\"min-w-[70px] h-7\"\r\n          endContent={<Icon icon=\"lucide:chevron-down\" className=\"w-3.5 h-3.5\" />}\r\n        >\r\n          {displayValue}\r\n        </Button>\r\n      </DropdownTrigger>\r\n      <DropdownMenu\r\n        aria-label=\"Plan followed selection\"\r\n        selectionMode=\"single\"\r\n        selectedKeys={[displayValue]}\r\n        onSelectionChange={(keys) => {\r\n          const selectedKey = Array.from(keys)[0] as string;\r\n          onSave(selectedKey === \"Yes\");\r\n        }}\r\n      >\r\n        <DropdownItem key=\"Yes\" textValue=\"Yes\">Yes</DropdownItem>\r\n        <DropdownItem key=\"No\" textValue=\"No\">No</DropdownItem>\r\n      </DropdownMenu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\ninterface NotesCellProps {\r\n  value: string;\r\n  onSave: (value: string) => void;\r\n}\r\n\r\nconst NotesCell: React.FC<NotesCellProps> = React.memo(function NotesCell({ value, onSave }) {\r\n  const {isOpen, onOpenChange, onClose, onOpen} = useDisclosure();\r\n  const [editValue, setEditValue] = React.useState(value);\r\n\r\n  // When opening the popover, ensure the edit value is up-to-date with the cell's value\r\n  React.useEffect(() => {\r\n    if (isOpen) {\r\n      setEditValue(value);\r\n    }\r\n  }, [isOpen, value]);\r\n\r\n  const handleSave = () => {\r\n    onSave(editValue);\r\n    onClose();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setEditValue(value); // Reset any changes\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Popover placement=\"bottom-start\" isOpen={isOpen} onOpenChange={onOpenChange}>\r\n      <PopoverTrigger>\r\n        <div\r\n          onClick={onOpen}\r\n          className=\"p-2 text-sm rounded-md cursor-pointer hover:bg-default-100 dark:hover:bg-default-900/40 transition-colors w-full max-w-[300px]\"\r\n        >\r\n          {value ? (\r\n            <p className=\"whitespace-pre-wrap truncate text-ellipsis\">{value}</p>\r\n          ) : (\r\n            <span className=\"text-default-500\">Add a note...</span>\r\n          )}\r\n        </div>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"p-0\">\r\n        <div className=\"w-[320px] p-4\">\r\n          <h4 className=\"font-bold text-lg mb-3\">Trade Review & Notes</h4>\r\n          <Textarea\r\n            label=\"Notes\"\r\n            placeholder=\"Enter your review, observations, or thoughts...\"\r\n            value={editValue}\r\n            onValueChange={setEditValue}\r\n            minRows={6}\r\n            maxRows={12}\r\n            classNames={{\r\n              input: \"resize-y\"\r\n            }}\r\n          />\r\n          <div className=\"flex justify-end gap-2 mt-4\">\r\n            <Button size=\"sm\" variant=\"flat\" color=\"danger\" onPress={handleCancel}>\r\n              Cancel\r\n            </Button>\r\n            <Button size=\"sm\" color=\"primary\" onPress={handleSave}>\r\n              Save\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n});\r\n\r\ninterface CMPCellProps {\r\n  value: number;\r\n  isAutoFetched?: boolean;\r\n  onSave: (value: number) => void;\r\n}\r\n\r\nconst CMPCell: React.FC<CMPCellProps> = React.memo(function CMPCell({ value, isAutoFetched, onSave }) {\r\n  const [isEditing, setIsEditing] = React.useState(false);\r\n  const [editValue, setEditValue] = React.useState(String(value || ''));\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (isEditing && inputRef.current) {\r\n      inputRef.current.focus();\r\n      inputRef.current.select();\r\n    }\r\n  }, [isEditing]);\r\n\r\n  React.useEffect(() => {\r\n    if (!isEditing) {\r\n      setEditValue(String(value || ''));\r\n    }\r\n  }, [value, isEditing]);\r\n\r\n  const handleSave = () => {\r\n    setIsEditing(false);\r\n    const numValue = Number(editValue) || 0;\r\n    onSave(numValue);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSave();\r\n    } else if (e.key === \"Escape\") {\r\n      setIsEditing(false);\r\n      setEditValue(String(value || ''));\r\n    }\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    // Only allow editing when price fetching failed or value was manually entered\r\n    // Don't allow editing when price was successfully auto-fetched\r\n    if (!isEditing && isAutoFetched !== true) {\r\n      setIsEditing(true);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (val: number) => {\r\n    if (val === 0) return '0';\r\n    return new Intl.NumberFormat('en-IN', {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2\r\n    }).format(val);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      {isEditing ? (\r\n        <Input\r\n          ref={inputRef}\r\n          value={editValue}\r\n          onValueChange={setEditValue}\r\n          onBlur={handleSave}\r\n          onKeyDown={handleKeyDown}\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          min=\"0\"\r\n          size=\"sm\"\r\n          classNames={{\r\n            input: \"text-right\",\r\n            inputWrapper: \"h-7 min-h-7\"\r\n          }}\r\n        />\r\n      ) : (\r\n        <Tooltip\r\n          content={\r\n            <div className=\"text-xs\">\r\n              <div className=\"font-medium\">Current Market Price</div>\r\n              <div className=\"text-default-400\">\r\n                {isAutoFetched === false\r\n                  ? \"Manually entered - click to edit\"\r\n                  : isAutoFetched === true\r\n                    ? \"Auto-fetched from market data - not editable\"\r\n                    : \"Click to enter manually\"\r\n                }\r\n              </div>\r\n            </div>\r\n          }\r\n          placement=\"top\"\r\n          delay={500}\r\n        >\r\n          <div\r\n            onClick={handleFocus}\r\n            className={`\r\n              py-1 px-2 text-right rounded-md transition-colors\r\n              flex items-center justify-end gap-1 whitespace-nowrap\r\n              ${isAutoFetched === false\r\n                ? 'border-l-2 border-warning cursor-pointer hover:bg-default-100 dark:hover:bg-default-800'\r\n                : isAutoFetched === true\r\n                  ? 'border-l-2 border-success cursor-not-allowed opacity-75'\r\n                  : 'cursor-pointer hover:bg-default-100 dark:hover:bg-default-800'\r\n              }\r\n            `}\r\n          >\r\n            <span className=\"font-medium\">\r\n              {value > 0 ? `₹${formatCurrency(value)}` : '-'}\r\n            </span>\r\n            {isAutoFetched === false && (\r\n              <Icon\r\n                icon=\"lucide:edit-3\"\r\n                className=\"w-3 h-3 text-warning opacity-60\"\r\n              />\r\n            )}\r\n            {isAutoFetched === true && (\r\n              <Icon\r\n                icon=\"lucide:refresh-cw\"\r\n                className=\"w-3 h-3 text-success opacity-60\"\r\n              />\r\n            )}\r\n          </div>\r\n        </Tooltip>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default TradeJournal;"],"file":"assets/trade-journal-CCUx7PWA.js"}