{"version":3,"file":"tax-analytics-a1JVCqVB.js","sources":["../../src/components/tax/tax-summary-chart.tsx","../../src/components/tax/tax-table.tsx","../../src/components/tax/tax-edit-modal.tsx","../../src/components/tax-analytics.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  Bar,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ReferenceLine,\r\n  Cell\r\n} from \"recharts\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useTrades } from \"../../hooks/use-trades\";\r\nimport { useTruePortfolioWithTrades } from \"../../hooks/use-true-portfolio-with-trades\";\r\nimport { useAccountingMethod } from \"../../context/AccountingMethodContext\";\r\n\r\nconst formatCurrency = (value: number) => {\r\n  return new Intl.NumberFormat(\"en-IN\", {\r\n    style: \"currency\",\r\n    currency: \"INR\",\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0\r\n  }).format(value);\r\n};\r\n\r\n// Custom animated tooltip component\r\nconst CustomTooltip = ({ active, payload, label }: any) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 10 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        exit={{ opacity: 0, y: -10 }}\r\n        transition={{ duration: 0.2 }}\r\n        className=\"bg-background border border-divider p-4 rounded-lg shadow-lg\"\r\n        style={{\r\n          backgroundColor: \"hsl(var(--heroui-content1))\",\r\n          border: \"1px solid hsl(var(--heroui-divider))\",\r\n          borderRadius: \"8px\",\r\n          padding: \"8px 12px\"\r\n        }}\r\n      >\r\n        <p className=\"text-sm font-medium text-foreground mb-2\">{label}</p>\r\n        {payload.map((entry: any, index: number) => (\r\n          <div key={index} className=\"flex items-center justify-between gap-4 mb-1\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <div\r\n                className=\"w-3 h-3 rounded-sm\"\r\n                style={{ backgroundColor: entry.color }}\r\n              />\r\n              <span className=\"text-sm text-foreground-600\">{entry.name}:</span>\r\n            </div>\r\n            <span className=\"text-sm font-semibold text-foreground\">\r\n              {entry.name === \"P/L %\" ? `${entry.value.toFixed(2)}%` : formatCurrency(entry.value)}\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </motion.div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\ninterface TaxSummaryChartProps {\r\n  taxesByMonth: { [month: string]: number };\r\n}\r\n\r\nexport const TaxSummaryChart: React.FC<TaxSummaryChartProps> = ({ taxesByMonth }) => {\r\n  const { trades } = useTrades();\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n  const { getPortfolioSize, getAllMonthlyTruePortfolios } = useTruePortfolioWithTrades(trades);\r\n\r\n  // Use the EXACT same logic as Monthly Performance table\r\n  const currentYear = new Date().getFullYear();\r\n  const shortMonthOrder = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\r\n\r\n  // Get all monthly portfolio data (same as Monthly Performance table)\r\n  const monthlyPortfolios = getAllMonthlyTruePortfolios();\r\n  const filteredMonthlyPortfolios = monthlyPortfolios.filter(mp => mp.year === currentYear);\r\n\r\n  // Output months in calendar order - use same logic as Monthly Performance table\r\n  const chartData = shortMonthOrder.map(month => {\r\n    const longMonth = {\r\n      Jan: \"January\", Feb: \"February\", Mar: \"March\", Apr: \"April\",\r\n      May: \"May\", Jun: \"June\", Jul: \"July\", Aug: \"August\",\r\n      Sep: \"September\", Oct: \"October\", Nov: \"November\", Dec: \"December\"\r\n    }[month];\r\n\r\n    // Find corresponding monthly portfolio data (EXACT same logic as Monthly Performance table)\r\n    const monthPortfolio = filteredMonthlyPortfolios.find(mp => mp.month === month) || {\r\n      month,\r\n      year: currentYear,\r\n      startingCapital: 0,\r\n      capitalChanges: 0,\r\n      pl: 0,\r\n      finalCapital: 0\r\n    };\r\n    const grossPL = monthPortfolio.pl; // This uses the correct accounting method\r\n    const taxes = taxesByMonth[longMonth || \"\"] || 0;\r\n    const netPL = grossPL - taxes;\r\n    const portfolioSize = getPortfolioSize(month, currentYear);\r\n    const plPercent = portfolioSize > 0 ? (grossPL / portfolioSize) * 100 : 0;\r\n\r\n    return {\r\n      month,\r\n      grossPL,\r\n      netPL,\r\n      taxes,\r\n      plPercent\r\n    };\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"h-[350px]\"\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\r\n    >\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <ComposedChart\r\n          data={chartData}\r\n          margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"hsl(var(--heroui-divider))\" />\r\n          <XAxis\r\n            dataKey=\"month\"\r\n            axisLine={false}\r\n            tickLine={false}\r\n          />\r\n          <YAxis\r\n            yAxisId=\"left\"\r\n            tickFormatter={(value) => formatCurrency(value)}\r\n            axisLine={false}\r\n            tickLine={false}\r\n          />\r\n          <YAxis\r\n            yAxisId=\"right\"\r\n            orientation=\"right\"\r\n            tickFormatter={(value) => `${value}%`}\r\n            axisLine={false}\r\n            tickLine={false}\r\n          />\r\n          <Tooltip\r\n            content={<CustomTooltip />}\r\n            cursor={{ fill: 'transparent' }}\r\n          />\r\n          <Legend />\r\n          <ReferenceLine y={0} yAxisId=\"left\" stroke=\"hsl(var(--heroui-divider))\" />\r\n          <Bar\r\n            yAxisId=\"left\"\r\n            dataKey=\"grossPL\"\r\n            name=\"Gross P/L\"\r\n            fill=\"hsl(var(--heroui-primary-500))\"\r\n            radius={[4, 4, 0, 0]}\r\n            barSize={20}\r\n            animationBegin={0}\r\n            animationDuration={800}\r\n            animationEasing=\"ease-out\"\r\n          />\r\n          <Bar\r\n            yAxisId=\"left\"\r\n            dataKey=\"netPL\"\r\n            name=\"Net P/L\"\r\n            fill=\"hsl(var(--heroui-success-500))\"\r\n            radius={[4, 4, 0, 0]}\r\n            barSize={20}\r\n            animationBegin={200}\r\n            animationDuration={800}\r\n            animationEasing=\"ease-out\"\r\n          />\r\n          <Bar\r\n            yAxisId=\"left\"\r\n            dataKey=\"taxes\"\r\n            name=\"Taxes\"\r\n            fill=\"hsl(var(--heroui-danger-500))\"\r\n            radius={[4, 4, 0, 0]}\r\n            barSize={20}\r\n            animationBegin={400}\r\n            animationDuration={800}\r\n            animationEasing=\"ease-out\"\r\n          />\r\n          <Line\r\n            yAxisId=\"right\"\r\n            type=\"monotone\"\r\n            dataKey=\"plPercent\"\r\n            name=\"P/L %\"\r\n            stroke=\"hsl(var(--heroui-warning-500))\"\r\n            strokeWidth={2}\r\n            dot={{ r: 4 }}\r\n            activeDot={{ r: 6 }}\r\n            animationBegin={600}\r\n            animationDuration={1000}\r\n            animationEasing=\"ease-out\"\r\n          />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>\r\n    </motion.div>\r\n  );\r\n};","import React, { useState, useCallback } from \"react\";\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableColumn,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Tooltip,\r\n  Input\r\n} from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Trade } from \"../../types/trade\";\r\nimport { useTruePortfolioWithTrades } from \"../../hooks/use-true-portfolio-with-trades\";\r\nimport { useTrades } from \"../../hooks/use-trades\";\r\nimport { useAccountingMethod } from \"../../context/AccountingMethodContext\";\r\nimport { getTradesForMonth, calculateTradePL } from \"../../utils/accountingUtils\";\r\n\r\ninterface TaxTableProps {\r\n  trades: Trade[];\r\n  taxesByMonth: { [month: string]: number };\r\n  setTaxesByMonth: React.Dispatch<React.SetStateAction<{ [month: string]: number }>>;\r\n}\r\n\r\ninterface TaxData {\r\n  month: string;\r\n  totalTrades: number;\r\n  winRate: string;\r\n  avgProfit: string;\r\n  avgLoss: string;\r\n  grossPL: number;\r\n  taxes: number;\r\n  netPL: number;\r\n  taxPercent: string;\r\n  grossPFImpact: string;\r\n  netPFImpact: string;\r\n  returnPercent: string;\r\n}\r\n\r\nconst taxData: TaxData[] = [\r\n  {\r\n    month: \"January\",\r\n    totalTrades: 9,\r\n    winRate: \"#N/A\",\r\n    avgProfit: \"#DIV/0!\",\r\n    avgLoss: \"-405.81\",\r\n    grossPL: -3652.27,\r\n    taxes: 355.00,\r\n    netPL: -4007.27,\r\n    taxPercent: \"-9.72%\",\r\n    grossPFImpact: \"-1.25%\",\r\n    netPFImpact: \"-1.37%\",\r\n    returnPercent: \"-1.25%\"\r\n  },\r\n  {\r\n    month: \"February\",\r\n    totalTrades: 0,\r\n    winRate: \"#N/A\",\r\n    avgProfit: \"#DIV/0!\",\r\n    avgLoss: \"-678.72\",\r\n    grossPL: -2714.89,\r\n    taxes: 93.00,\r\n    netPL: -2807.89,\r\n    taxPercent: \"-3.43%\",\r\n    grossPFImpact: \"-0.94%\",\r\n    netPFImpact: \"-0.97%\",\r\n    returnPercent: \"-0.94%\"\r\n  },\r\n  {\r\n    month: \"March\",\r\n    totalTrades: 6,\r\n    winRate: \"16.67%\",\r\n    avgProfit: \"2925\",\r\n    avgLoss: \"-591.68\",\r\n    grossPL: -33.40,\r\n    taxes: 807.00,\r\n    netPL: -840.40,\r\n    taxPercent: \"-2416.17%\",\r\n    grossPFImpact: \"-0.01%\",\r\n    netPFImpact: \"-0.26%\",\r\n    returnPercent: \"-0.01%\"\r\n  },\r\n  {\r\n    month: \"April\",\r\n    totalTrades: 12,\r\n    winRate: \"33.33%\",\r\n    avgProfit: \"3681.2425\",\r\n    avgLoss: \"-508.41\",\r\n    grossPL: 10657.72,\r\n    taxes: 690.35,\r\n    netPL: 9967.37,\r\n    taxPercent: \"6.48%\",\r\n    grossPFImpact: \"3.47%\",\r\n    netPFImpact: \"3.24%\",\r\n    returnPercent: \"3.47%\"\r\n  },\r\n  {\r\n    month: \"May\",\r\n    totalTrades: 10,\r\n    winRate: \"40%\",\r\n    avgProfit: \"4135.65\",\r\n    avgLoss: \"-661.93\",\r\n    grossPL: 12571.03,\r\n    taxes: 972.52,\r\n    netPL: 11598.51,\r\n    taxPercent: \"7.74%\",\r\n    grossPFImpact: \"3.95%\",\r\n    netPFImpact: \"3.65%\",\r\n    returnPercent: \"3.95%\"\r\n  },\r\n  {\r\n    month: \"June\",\r\n    totalTrades: 12,\r\n    winRate: \"41.67%\",\r\n    avgProfit: \"14710.852\",\r\n    avgLoss: \"-993.57\",\r\n    grossPL: 10657.72,\r\n    taxes: 1786.00,\r\n    netPL: 8871.72,\r\n    taxPercent: \"16.76%\",\r\n    grossPFImpact: \"2.88%\",\r\n    netPFImpact: \"2.40%\",\r\n    returnPercent: \"17.99%\"\r\n  },\r\n  {\r\n    month: \"July\",\r\n    totalTrades: 16,\r\n    winRate: \"50%\",\r\n    avgProfit: \"3690.04375\",\r\n    avgLoss: \"-763.42\",\r\n    grossPL: 23413.03,\r\n    taxes: 2127.47,\r\n    netPL: 21285.56,\r\n    taxPercent: \"9.09%\",\r\n    grossPFImpact: \"5.36%\",\r\n    netPFImpact: \"4.87%\",\r\n    returnPercent: \"5.36%\"\r\n  },\r\n  {\r\n    month: \"August\",\r\n    totalTrades: 9,\r\n    winRate: \"44.44%\",\r\n    avgProfit: \"3042.5425\",\r\n    avgLoss: \"-971.99\",\r\n    grossPL: 7310.20,\r\n    taxes: 768.85,\r\n    netPL: 6541.35,\r\n    taxPercent: \"10.52%\",\r\n    grossPFImpact: \"1.59%\",\r\n    netPFImpact: \"1.42%\",\r\n    returnPercent: \"1.59%\"\r\n  },\r\n  {\r\n    month: \"September\",\r\n    totalTrades: 14,\r\n    winRate: \"42.86%\",\r\n    avgProfit: \"15166.51333\",\r\n    avgLoss: \"-759.91\",\r\n    grossPL: 84919.78,\r\n    taxes: 1750.00,\r\n    netPL: 83169.78,\r\n    taxPercent: \"2.06%\",\r\n    grossPFImpact: \"18.16%\",\r\n    netPFImpact: \"17.79%\",\r\n    returnPercent: \"18.16%\"\r\n  },\r\n  {\r\n    month: \"October\",\r\n    totalTrades: 7,\r\n    winRate: \"42.86%\",\r\n    avgProfit: \"248.73\",\r\n    avgLoss: \"-745.72\",\r\n    grossPL: -2236.68,\r\n    taxes: 2956.00,\r\n    netPL: -5192.68,\r\n    taxPercent: \"-132.16%\",\r\n    grossPFImpact: \"-0.23%\",\r\n    netPFImpact: \"-0.54%\",\r\n    returnPercent: \"-0.23%\"\r\n  },\r\n  {\r\n    month: \"November\",\r\n    totalTrades: 7,\r\n    winRate: \"42.86%\",\r\n    avgProfit: \"1272.236667\",\r\n    avgLoss: \"-286.52\",\r\n    grossPL: 2670.62,\r\n    taxes: 173.00,\r\n    netPL: 2497.62,\r\n    taxPercent: \"6.48%\",\r\n    grossPFImpact: \"0.28%\",\r\n    netPFImpact: \"0.26%\",\r\n    returnPercent: \"0.28%\"\r\n  },\r\n  {\r\n    month: \"December\",\r\n    totalTrades: 20,\r\n    winRate: \"50%\",\r\n    avgProfit: \"2818.115\",\r\n    avgLoss: \"-2164.22\",\r\n    grossPL: 6538.92,\r\n    taxes: 4597.00,\r\n    netPL: 1941.92,\r\n    taxPercent: \"70.30%\",\r\n    grossPFImpact: \"0.69%\",\r\n    netPFImpact: \"0.20%\",\r\n    returnPercent: \"0.69%\"\r\n  }\r\n];\r\n\r\n// localStorage helpers\r\nfunction fetchTaxData() {\r\n  try {\r\n    const stored = localStorage.getItem('taxData');\r\n    return stored ? JSON.parse(stored) : {};\r\n  } catch (error) {\r\n    return {};\r\n  }\r\n}\r\n\r\nfunction saveTaxData(taxData: any) {\r\n  try {\r\n    localStorage.setItem('taxData', JSON.stringify(taxData));\r\n  } catch (error) {\r\n    }\r\n}\r\n\r\n// Editable Text Component\r\nconst EditableText: React.FC<{\r\n  value: string | number;\r\n  onSave: (value: string, eventType: 'enter' | 'blur' | 'escape') => void;\r\n  isEditing: boolean;\r\n  type?: \"text\" | \"number\";\r\n  className?: string;\r\n  prefix?: string;\r\n}> = ({ value, onSave, isEditing, type = \"text\", className = \"\", prefix = \"\" }) => {\r\n  const [editValue, setEditValue] = React.useState(value.toString());\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (isEditing && inputRef.current) {\r\n      inputRef.current.focus();\r\n      inputRef.current.select();\r\n    }\r\n  }, [isEditing]);\r\n\r\n  const handleBlur = () => {\r\n    onSave(editValue, 'blur');\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      onSave(editValue, 'enter');\r\n    } else if (e.key === 'Escape') {\r\n      onSave(value.toString(), 'escape');\r\n    }\r\n  };\r\n\r\n  if (!isEditing) {\r\n    return (\r\n      <motion.span\r\n        className={`inline-block ${className}`}\r\n        initial={{ opacity: 0.8 }}\r\n        animate={{ opacity: 1 }}\r\n        whileHover={{ scale: 1.02 }}\r\n      >\r\n        {prefix}{value}\r\n      </motion.span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Input\r\n      ref={inputRef}\r\n      type={type}\r\n      value={editValue}\r\n      onValueChange={setEditValue}\r\n      onBlur={handleBlur}\r\n      onKeyDown={handleKeyDown}\r\n      autoFocus\r\n      size=\"sm\"\r\n      variant=\"bordered\"\r\n      className={`max-w-[120px] ${className}`}\r\n      classNames={{\r\n        input: \"text-right\",\r\n        inputWrapper: \"h-8 min-h-unit-8\"\r\n      }}\r\n      startContent={prefix ? <span className=\"text-default-400\">{prefix}</span> : undefined}\r\n      min={0}\r\n    />\r\n  );\r\n};\r\n\r\nexport const TaxTable: React.FC<TaxTableProps> = ({ trades = [], taxesByMonth, setTaxesByMonth }) => {\r\n  const { portfolioSize, getPortfolioSize } = useTruePortfolioWithTrades(trades);\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n  const [editingCell, setEditingCell] = useState<{ month: string; value: string } | null>(null);\r\n\r\n  React.useEffect(() => {\r\n    // Load taxes from localStorage on component mount\r\n    const allTaxData = fetchTaxData();\r\n    const currentYear = new Date().getFullYear().toString();\r\n    const yearTaxData = allTaxData[currentYear] || {};\r\n    setTaxesByMonth(yearTaxData);\r\n  }, [setTaxesByMonth]);\r\n\r\n  // Helper function to convert full month name to short month name\r\n  const getShortMonthName = (fullMonth: string): string => {\r\n    return fullMonth.substring(0, 3);\r\n  };\r\n\r\n  // Group trades by month based on accounting method\r\n  const monthOrder = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  // Create monthly map using accounting method\r\n  const monthlyMap: Record<string, Trade[]> = {};\r\n  monthOrder.forEach(month => {\r\n    // Convert full month name to short month name for getTradesForMonth\r\n    const shortMonth = getShortMonthName(month);\r\n    const monthTrades = getTradesForMonth(trades, shortMonth, currentYear, useCashBasis);\r\n    if (monthTrades.length > 0) {\r\n      monthlyMap[month] = monthTrades;\r\n    }\r\n  });\r\n\r\n  const formatCurrency = (value: number) => {\r\n    return new Intl.NumberFormat(\"en-IN\", {\r\n      style: \"currency\",\r\n      currency: \"INR\",\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2\r\n    }).format(value);\r\n  };\r\n\r\n  const handleEditStart = (month: string, value: number) => {\r\n    setEditingCell({ month, value: value.toString() });\r\n  };\r\n\r\n  const handleEditComplete = useCallback((newValueString: string, eventType: 'enter' | 'blur' | 'escape') => {\r\n    if (editingCell) {\r\n      let newValue = parseFloat(newValueString);\r\n\r\n      // If the input is empty or results in NaN, treat it as 0\r\n      if (isNaN(newValue) || newValueString.trim() === '') {\r\n        newValue = 0;\r\n      }\r\n\r\n      // If a negative number is entered, set it to 0\r\n      if (newValue < 0) {\r\n        newValue = 0;\r\n      }\r\n\r\n      // No longer need the `if (newValue >= 0)` check here, as newValue is already sanitized to be non-negative\r\n      setTaxesByMonth(prev => {\r\n        const updatedTaxes = {\r\n          ...prev,\r\n          [editingCell.month]: newValue\r\n        };\r\n        // Save updated taxes to localStorage\r\n        const allTaxData = fetchTaxData();\r\n        const currentYear = new Date().getFullYear().toString();\r\n        const newAllTaxData = {\r\n          ...allTaxData,\r\n          [currentYear]: {\r\n            ...(allTaxData[currentYear] || {}),\r\n            [editingCell.month]: newValue\r\n          }\r\n        };\r\n        saveTaxData(newAllTaxData);\r\n        return updatedTaxes;\r\n      });\r\n\r\n      // Set editingCell to null on any save event (Enter, Blur, or Escape)\r\n      setEditingCell(null);\r\n    }\r\n  }, [editingCell, setTaxesByMonth]);\r\n\r\n  const columns = React.useMemo(() => [\r\n    {\r\n      key: \"month\",\r\n      label: \"Month\",\r\n    },\r\n    {\r\n      key: \"grossPL\",\r\n      label: \"Gross P/L\",\r\n    },\r\n    {\r\n      key: \"taxes\",\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Taxes\r\n          <Tooltip content=\"Tax amount for the month.\" placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: \"taxPercent\",\r\n      label: \"Tax %\",\r\n    },\r\n    {\r\n      key: \"netPL\",\r\n      label: \"Net P/L\",\r\n    },\r\n    {\r\n      key: \"grossPFImpact\",\r\n      label: \"Gross PF Impact\",\r\n    },\r\n    {\r\n      key: \"netPFImpact\",\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Net PF Impact\r\n          <Tooltip content=\"Portfolio impact after taxes.\" placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: \"returnPercent\",\r\n      label: \"Return %\",\r\n    },\r\n    {\r\n      key: \"totalTrades\",\r\n      label: \"Trades\",\r\n    },\r\n    {\r\n      key: \"winRate\",\r\n      label: \"Win Rate\",\r\n    },\r\n    {\r\n      key: \"avgProfit\",\r\n      label: \"Avg Profit\",\r\n    },\r\n    {\r\n      key: \"avgLoss\",\r\n      label: \"Avg Loss\",\r\n    },\r\n    {\r\n      key: \"avgRR\",\r\n      label: \"Avg R:R\",\r\n    },\r\n  ], []);\r\n\r\n  const renderCell = useCallback((item: TaxData, columnKey: string) => {\r\n    const isEditing = editingCell?.month === item.month && columnKey === 'taxes';\r\n    const value = item[columnKey as keyof TaxData];\r\n\r\n    if (columnKey === 'taxes') {\r\n        return (\r\n        <TableCell\r\n          key={columnKey}\r\n          className=\"cursor-pointer rounded-md\"\r\n          onClick={() => handleEditStart(item.month, item.taxes)}\r\n        >\r\n          <div className=\"flex items-center justify-end gap-1.5\">\r\n            {isEditing ? (\r\n              <EditableText\r\n                value={editingCell?.value || ''}\r\n                onSave={handleEditComplete}\r\n                isEditing={true}\r\n                type=\"number\"\r\n                prefix=\"₹\"\r\n                className=\"text-right\"\r\n              />\r\n            ) : (\r\n              <>\r\n                <span className=\"text-foreground dark:text-foreground-200\">\r\n                  {formatCurrency(item.taxes)}\r\n                </span>\r\n                <span className=\"text-foreground-400\">\r\n                  <Icon icon=\"lucide:edit-2\" className=\"h-2.5 w-2.5\" />\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </TableCell>\r\n        );\r\n      }\r\n\r\n    if (columnKey === 'month') {\r\n      return (\r\n        <TableCell key={columnKey}>\r\n          <span className=\"font-medium text-foreground dark:text-foreground-200\">{item.month}</span>\r\n        </TableCell>\r\n      );\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      const formattedValue = columnKey === 'grossPL' || columnKey === 'netPL' ? formatCurrency(value) : (value >= 0 ? `${value.toFixed(2)}%` : `-${Math.abs(value).toFixed(2)}%`);\r\n        return (\r\n        <TableCell key={columnKey}>\r\n          <span className={`${value >= 0 ? 'text-success-600 dark:text-success-400' : 'text-danger-600 dark:text-danger-400'}`}>\r\n            {formattedValue}\r\n          </span>\r\n        </TableCell>\r\n      );\r\n    }\r\n\r\n    // Handle specific string values like \"#N/A\" and \"#DIV/0!\"\r\n    if (typeof value === 'string' && (value === '#N/A' || value === '#DIV/0!' || value === '-')) {\r\n        return (\r\n        <TableCell key={columnKey}>\r\n          <span className=\"text-foreground dark:text-foreground-200\">\r\n            -\r\n          </span>\r\n        </TableCell>\r\n        );\r\n    }\r\n\r\n    return (\r\n      <TableCell key={columnKey}>\r\n        <span className=\"text-foreground dark:text-foreground-200\">\r\n          {String(value)}\r\n        </span>\r\n      </TableCell>\r\n    );\r\n  }, [editingCell, taxesByMonth, formatCurrency, handleEditComplete, handleEditStart]);\r\n\r\n  return (\r\n    <div className=\"rounded-lg border border-default-200 dark:border-default-100 bg-white dark:bg-gray-900 overflow-hidden\">\r\n      <div className=\"overflow-auto max-h-[70vh]\">\r\n        <Table\r\n          aria-label=\"Monthly Tax Breakdown Table\"\r\n          classNames={{\r\n            base: \"min-w-[800px]\",\r\n            wrapper: \"shadow-none p-0 rounded-none\",\r\n            table: \"table-auto\",\r\n            thead: \"[&>tr]:first:shadow-none\",\r\n            th: \"bg-default-100 dark:bg-gray-950 text-foreground-600 dark:text-white text-xs font-medium uppercase border-b border-default-200 dark:border-gray-800 sticky top-0 z-20 backdrop-blur-sm\",\r\n            td: \"py-3 px-4 border-b border-default-200 dark:border-gray-800 text-foreground-800 dark:text-gray-200\",\r\n          }}\r\n          removeWrapper\r\n        >\r\n        <TableHeader columns={columns}>\r\n          {(column) => (\r\n            <TableColumn key={column.key} className=\"whitespace-nowrap\">\r\n              {column.label}\r\n            </TableColumn>\r\n          )}\r\n      </TableHeader>\r\n        <TableBody items={monthOrder.map(month => {\r\n          const monthlyTrades = monthlyMap[month] || [];\r\n\r\n          // Calculate P/L based on accounting method\r\n          const tradesWithPL = monthlyTrades.map(trade => ({\r\n            ...trade,\r\n            accountingPL: calculateTradePL(trade, useCashBasis)\r\n          }));\r\n\r\n          const grossPL = tradesWithPL.reduce((sum, t) => sum + t.accountingPL, 0);\r\n          const winTrades = tradesWithPL.filter(t => t.accountingPL > 0);\r\n          const lossTrades = tradesWithPL.filter(t => t.accountingPL < 0);\r\n          const totalTrades = monthlyTrades.length;\r\n          const winRate = totalTrades > 0 ? ((winTrades.length / totalTrades) * 100).toFixed(2) + '%' : \"-\";\r\n          const avgProfit = winTrades.length > 0 ? winTrades.reduce((sum, t) => sum + t.accountingPL, 0) / winTrades.length : \"-\";\r\n          const avgLoss = lossTrades.length > 0 ? lossTrades.reduce((sum, t) => sum + t.accountingPL, 0) / lossTrades.length : \"-\";\r\n\r\n          const taxes = taxesByMonth[month] || 0;\r\n          const netPL = grossPL - taxes;\r\n          const taxPercent = grossPL !== 0 ? ((taxes / grossPL) * 100).toFixed(2) + '%' : \"0.00%\";\r\n\r\n          const portfolioSizeForMonth = getPortfolioSize(getShortMonthName(month), new Date().getFullYear());\r\n          const grossPFImpact = portfolioSizeForMonth > 0 ? ((grossPL / portfolioSizeForMonth) * 100).toFixed(2) + '%' : \"0.00%\";\r\n          const netPFImpact = portfolioSizeForMonth > 0 ? ((netPL / portfolioSizeForMonth) * 100).toFixed(2) + '%' : \"0.00%\";\r\n          const returnPercent = grossPFImpact; // Using grossPFImpact for now\r\n\r\n          // Calculate avg RR based on existing trades (assuming avgGain and avgLoss are available)\r\n          const avgGainValue = typeof avgProfit === 'number' ? avgProfit : 0; // Convert to number if needed\r\n          const avgLossValue = typeof avgLoss === 'number' ? avgLoss : 0; // Convert to number if needed\r\n          const avgRR = avgLossValue !== 0 ? Math.abs(avgGainValue / avgLossValue).toFixed(2) : \"0.00\";\r\n\r\n          return {\r\n            month,\r\n            totalTrades,\r\n            winRate,\r\n            avgProfit: typeof avgProfit === 'number' ? avgProfit.toFixed(2) : avgProfit,\r\n            avgLoss: typeof avgLoss === 'number' ? avgLoss.toFixed(2) : avgLoss,\r\n            grossPL,\r\n            taxes,\r\n            netPL,\r\n            taxPercent,\r\n            grossPFImpact,\r\n            netPFImpact,\r\n            returnPercent,\r\n            avgRR\r\n          };\r\n        })}>\r\n          {(item) => (\r\n            <TableRow key={item.month}>\r\n              {(columnKey) => renderCell(item, columnKey as string)}\r\n          </TableRow>\r\n          )}\r\n        </TableBody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React, { useCallback } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Input,\r\n  Divider,\r\n  Tabs,\r\n  Tab\r\n} from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\n// Removed Supabase import - using localStorage only\r\n\r\ninterface TaxEditModalProps {\r\n  isOpen: boolean;\r\n  onOpenChange: (isOpen: boolean) => void;\r\n  month: string | null;\r\n}\r\n\r\n// localStorage helpers\r\nfunction fetchTaxData() {\r\n  try {\r\n    const stored = localStorage.getItem('taxData');\r\n    return stored ? JSON.parse(stored) : {};\r\n  } catch (error) {\r\n    return {};\r\n  }\r\n}\r\n\r\nfunction saveTaxData(taxData: any) {\r\n  try {\r\n    localStorage.setItem('taxData', JSON.stringify(taxData));\r\n  } catch (error) {\r\n    }\r\n}\r\n\r\nexport const TaxEditModal: React.FC<TaxEditModalProps> = ({\r\n  isOpen,\r\n  onOpenChange,\r\n  month\r\n}) => {\r\n  if (!month) return null;\r\n\r\n  // Unique key for sessionStorage\r\n  const sessionKey = React.useMemo(() => month ? `taxEditModal_${month}` : 'taxEditModal', [month]);\r\n\r\n  // Restore form state from sessionStorage if present\r\n  const [grossPL, setGrossPL] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_grossPL');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [taxes, setTaxes] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_taxes');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [stcg, setStcg] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_stcg');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [ltcg, setLtcg] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_ltcg');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [stt, setStt] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_stt');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [stampDuty, setStampDuty] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_stampDuty');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [exchangeCharges, setExchangeCharges] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_exchangeCharges');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [gst, setGst] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_gst');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [sebiCharges, setSebiCharges] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_sebiCharges');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [ipft, setIpft] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_ipft');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const [otherCharges, setOtherCharges] = React.useState(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = sessionStorage.getItem(sessionKey + '_otherCharges');\r\n      if (saved) return Number(saved);\r\n    }\r\n    return 0;\r\n  });\r\n  const taxBreakupSum = stcg + ltcg + stt + stampDuty + exchangeCharges + gst + sebiCharges + ipft + otherCharges;\r\n  const [taxWarning, setTaxWarning] = React.useState(\"\");\r\n\r\n  // Save form state to sessionStorage on change\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_grossPL', String(grossPL));\r\n  }, [grossPL, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_taxes', String(taxes));\r\n  }, [taxes, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_stcg', String(stcg));\r\n  }, [stcg, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_ltcg', String(ltcg));\r\n  }, [ltcg, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_stt', String(stt));\r\n  }, [stt, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_stampDuty', String(stampDuty));\r\n  }, [stampDuty, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_exchangeCharges', String(exchangeCharges));\r\n  }, [exchangeCharges, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_gst', String(gst));\r\n  }, [gst, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_sebiCharges', String(sebiCharges));\r\n  }, [sebiCharges, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_ipft', String(ipft));\r\n  }, [ipft, sessionKey]);\r\n  React.useEffect(() => {\r\n    sessionStorage.setItem(sessionKey + '_otherCharges', String(otherCharges));\r\n  }, [otherCharges, sessionKey]);\r\n\r\n  // Clear sessionStorage on close\r\n  React.useEffect(() => {\r\n    if (!isOpen) {\r\n      [\r\n        '_grossPL','_taxes','_stcg','_ltcg','_stt','_stampDuty','_exchangeCharges','_gst','_sebiCharges','_ipft','_otherCharges'\r\n      ].forEach(suffix => sessionStorage.removeItem(sessionKey + suffix));\r\n    }\r\n  }, [isOpen, sessionKey]);\r\n\r\n  // Save tax data to Supabase when saving changes\r\n  const handleSaveChanges = useCallback(() => {\r\n    if (!month) return;\r\n    // Get the selected year from the URL or use current year as fallback\r\n    const pathParts = window.location.pathname.split('/');\r\n    const yearFromUrl = pathParts[pathParts.length - 1];\r\n    const selectedYear = yearFromUrl && !isNaN(Number(yearFromUrl)) ? yearFromUrl : new Date().getFullYear().toString();\r\n    // Get existing tax data from localStorage\r\n    const allTaxData = fetchTaxData();\r\n    const currentData = { ...allTaxData };\r\n    currentData[selectedYear] = currentData[selectedYear] || {};\r\n    currentData[selectedYear][month] = taxes;\r\n    saveTaxData(currentData);\r\n    onOpenChange(false);\r\n    window.dispatchEvent(new Event('storage'));\r\n  }, [month, taxes, onOpenChange]);\r\n\r\n  // Calculate Net P/L and Tax Percentage\r\n  const netPL = grossPL - taxes;\r\n  const taxPercent = grossPL !== 0 ? ((taxes / Math.abs(grossPL)) * 100).toFixed(2) : \"0.00\";\r\n\r\n  const handleTaxesChange = (e) => {\r\n    const value = Number(e.target.value);\r\n    if (value > taxBreakupSum) {\r\n      setTaxWarning(\"Taxes cannot exceed the sum of detailed charges.\");\r\n      return; // Do not update taxes if above sum\r\n    } else {\r\n      setTaxWarning(\"\");\r\n      setTaxes(value);\r\n    }\r\n  };\r\n\r\n  // Add effect to clamp taxes if breakup sum decreases\r\n  React.useEffect(() => {\r\n    if (taxes > taxBreakupSum) {\r\n      setTaxes(taxBreakupSum);\r\n      setTaxWarning(\"Taxes cannot exceed the sum of detailed charges.\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [taxBreakupSum]);\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onOpenChange={onOpenChange}\r\n      size=\"3xl\"\r\n      scrollBehavior=\"inside\"\r\n    >\r\n      <ModalContent>\r\n        {(onClose) => (\r\n          <>\r\n            <ModalHeader className=\"flex flex-col gap-1\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3>Edit {month} Tax Data</h3>\r\n                <Tabs\r\n                  aria-label=\"Options\"\r\n                  color=\"primary\"\r\n                  size=\"sm\"\r\n                  classNames={{\r\n                    tabList: \"bg-content2/50 p-0.5 rounded-lg\",\r\n                    cursor: \"bg-primary rounded-md\",\r\n                    tab: \"px-3 py-1 data-[selected=true]:text-white\"\r\n                  }}\r\n                >\r\n                  <Tab key=\"basic\" title=\"Basic\" />\r\n                  <Tab key=\"advanced\" title=\"Advanced\" />\r\n                </Tabs>\r\n              </div>\r\n            </ModalHeader>\r\n            <Divider />\r\n            <ModalBody>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <Input\r\n                  label=\"Total Trades\"\r\n                  type=\"number\"\r\n                  variant=\"bordered\"\r\n                  defaultValue={month === \"January\" ? \"9\" : \"\"}\r\n                />\r\n                <Input\r\n                  label=\"Win Rate (%)\"\r\n                  type=\"text\"\r\n                  variant=\"bordered\"\r\n                  defaultValue={month === \"January\" ? \"#N/A\" : \"\"}\r\n                />\r\n                <Input\r\n                  label=\"Average Profit (₹)\"\r\n                  type=\"text\"\r\n                  variant=\"bordered\"\r\n                  defaultValue={month === \"January\" ? \"#DIV/0!\" : \"\"}\r\n                />\r\n                <Input\r\n                  label=\"Average Loss (₹)\"\r\n                  type=\"text\"\r\n                  variant=\"bordered\"\r\n                  defaultValue={month === \"January\" ? \"-405.81\" : \"\"}\r\n                />\r\n                <Input\r\n                  label=\"Gross P/L (₹)\"\r\n                  type=\"number\"\r\n                  variant=\"bordered\"\r\n                  value={String(grossPL)}\r\n                  onChange={e => setGrossPL(Number(e.target.value))}\r\n                />\r\n                <Input\r\n                  label=\"Taxes (₹)\"\r\n                  type=\"number\"\r\n                  variant=\"bordered\"\r\n                  value={String(taxes)}\r\n                  onChange={handleTaxesChange}\r\n                />\r\n                {taxWarning && <div style={{color: 'red', fontSize: '0.9em'}}>{taxWarning}</div>}\r\n                <Input\r\n                  label=\"Net P/L (₹)\"\r\n                  type=\"number\"\r\n                  variant=\"bordered\"\r\n                  value={String(netPL)}\r\n                  isReadOnly\r\n                />\r\n                <Input\r\n                  label=\"Tax Percentage (%)\"\r\n                  type=\"text\"\r\n                  variant=\"bordered\"\r\n                  value={`${taxPercent}%`}\r\n                  isReadOnly\r\n                />\r\n                <Input\r\n                  label=\"Gross PF Impact (%)\"\r\n                  type=\"text\"\r\n                  variant=\"bordered\"\r\n                  defaultValue={month === \"January\" ? \"-1.25%\" : \"\"}\r\n                />\r\n                <Input\r\n                  label=\"Net PF Impact (%)\"\r\n                  type=\"text\"\r\n                  variant=\"bordered\"\r\n                  defaultValue={month === \"January\" ? \"-1.37%\" : \"\"}\r\n                />\r\n                <Input\r\n                  label=\"Return Percentage (%)\"\r\n                  type=\"text\"\r\n                  variant=\"bordered\"\r\n                  defaultValue={month === \"January\" ? \"-1.25%\" : \"\"}\r\n                />\r\n              </div>\r\n\r\n              <Divider className=\"my-4\" />\r\n\r\n              <div className=\"space-y-4\">\r\n                <h4 className=\"text-md font-medium\">Tax Calculation Details</h4>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <Input\r\n                    label=\"Short-term Capital Gain\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(stcg)}\r\n                    onChange={e => setStcg(Number(e.target.value))}\r\n                  />\r\n                  <Input\r\n                    label=\"Long-term Capital Gain\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(ltcg)}\r\n                    onChange={e => setLtcg(Number(e.target.value))}\r\n                  />\r\n                  <Input\r\n                    label=\"Securities Transaction Tax\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(stt)}\r\n                    onChange={e => setStt(Number(e.target.value))}\r\n                  />\r\n                  <Input\r\n                    label=\"Stamp Duty\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(stampDuty)}\r\n                    onChange={e => setStampDuty(Number(e.target.value))}\r\n                  />\r\n                  <Input\r\n                    label=\"Exchange Transaction Charges\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(exchangeCharges)}\r\n                    onChange={e => setExchangeCharges(Number(e.target.value))}\r\n                  />\r\n                  <Input\r\n                    label=\"GST\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(gst)}\r\n                    onChange={e => setGst(Number(e.target.value))}\r\n                  />\r\n                  <Input\r\n                    label=\"SEBI Charges\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(sebiCharges)}\r\n                    onChange={e => setSebiCharges(Number(e.target.value))}\r\n                  />\r\n                  <Input\r\n                    label=\"IPFT\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(ipft)}\r\n                    onChange={e => setIpft(Number(e.target.value))}\r\n                  />\r\n                  <Input\r\n                    label=\"Other Charges\"\r\n                    type=\"number\"\r\n                    variant=\"bordered\"\r\n                    value={String(otherCharges)}\r\n                    onChange={e => setOtherCharges(Number(e.target.value))}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </ModalBody>\r\n            <Divider />\r\n            <ModalFooter>\r\n              <Button variant=\"flat\" onPress={onClose}>\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                onPress={handleSaveChanges}\r\n                startContent={<Icon icon=\"lucide:save\" />}\r\n              >\r\n                Save Changes\r\n              </Button>\r\n            </ModalFooter>\r\n          </>\r\n        )}\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};","import React, { useCallback } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Divider,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Table,\r\n  TableHeader,\r\n  TableColumn,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Tooltip,\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Input,\r\n  Modal,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { TaxSummaryChart } from \"./tax/tax-summary-chart\";\r\nimport { TaxMetricsCards } from \"./tax/tax-metrics-cards\";\r\nimport { TaxTable } from \"./tax/tax-table\";\r\nimport { TaxEditModal } from \"./tax/tax-edit-modal\";\r\nimport { useTrades } from \"../hooks/use-trades\";\r\nimport { useAccountingMethod } from \"../context/AccountingMethodContext\";\r\nimport { useGlobalFilter } from \"../context/GlobalFilterContext\";\r\nimport { calculateTradePL } from \"../utils/accountingUtils\";\r\n// Removed Supabase import - using localStorage only\r\n\r\n// Editable Text Component\r\nconst EditableText: React.FC<{\r\n  value: string | number;\r\n  onSave: (value: string) => void;\r\n  isEditing: boolean;\r\n  type?: \"text\" | \"number\";\r\n  className?: string;\r\n  prefix?: string;\r\n}> = ({ value, onSave, isEditing, type = \"text\", className = \"\", prefix = \"\" }) => {\r\n  const [editValue, setEditValue] = React.useState(value.toString());\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    if (isEditing && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isEditing]);\r\n\r\n  const handleBlur = () => {\r\n    onSave(editValue);\r\n  };\r\n\r\n  if (!isEditing) {\r\n    return (\r\n      <motion.span\r\n        className={`inline-block ${className}`}\r\n        initial={{ opacity: 0.8 }}\r\n        animate={{ opacity: 1 }}\r\n        whileHover={{ scale: 1.02 }}\r\n      >\r\n        {prefix}{value}\r\n      </motion.span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Input\r\n      ref={inputRef}\r\n      type={type}\r\n      value={editValue}\r\n      onValueChange={setEditValue}\r\n      onBlur={handleBlur}\r\n      size=\"sm\"\r\n      variant=\"bordered\"\r\n      className={`max-w-[120px] ${className}`}\r\n      classNames={{\r\n        input: \"text-right\",\r\n        inputWrapper: \"h-8 min-h-unit-8\"\r\n      }}\r\n      startContent={prefix ? <span className=\"text-default-400\">{prefix}</span> : undefined}\r\n    />\r\n  );\r\n};\r\n\r\n// Supabase helpers\r\nimport { SupabaseService } from '../services/supabaseService';\r\n\r\nasync function fetchTaxData(year: number) {\r\n  try {\r\n    const taxRecord = await SupabaseService.getTaxData(year);\r\n    return taxRecord ? taxRecord.data : {};\r\n  } catch (error) {\r\n    return {};\r\n  }\r\n}\r\n\r\nasync function saveTaxData(year: number, taxData: any): Promise<boolean> {\r\n  try {\r\n    return await SupabaseService.saveTaxData(year, taxData);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function fetchCommentaryData(year: string) {\r\n  try {\r\n    const commentaryRecord = await SupabaseService.getCommentaryData(year);\r\n    return commentaryRecord ? commentaryRecord.data : {};\r\n  } catch (error) {\r\n    return {};\r\n  }\r\n}\r\n\r\nasync function saveCommentaryData(year: string, commentaryData: any): Promise<boolean> {\r\n  try {\r\n    return await SupabaseService.saveCommentaryData(year, commentaryData);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const TaxAnalytics: React.FC = () => {\r\n  const { trades } = useTrades(); // This now returns filtered trades based on global filter and accounting method\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const { filter } = useGlobalFilter();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n\r\n  // Note: trades are now pre-filtered by global filter and accounting method from useTrades()\r\n  // Get all unique years from filtered trades for year selector (if needed for additional filtering)\r\n  const tradeYears = Array.from(new Set(trades.map(t => new Date(t.date).getFullYear()))).sort((a, b) => b - a);\r\n  const defaultYear = tradeYears.length > 0 ? String(tradeYears[0]) : String(new Date().getFullYear());\r\n  const [selectedYear, setSelectedYear] = React.useState(defaultYear);\r\n  const [isEditMode, setIsEditMode] = React.useState(false);\r\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n  const [selectedMonth, setSelectedMonth] = React.useState<string | null>(null);\r\n  const [isDrawdownModalOpen, setIsDrawdownModalOpen] = React.useState(false);\r\n  const [customCommentary, setCustomCommentary] = React.useState<{ [key: string]: string }>({});\r\n  const [editingCommentary, setEditingCommentary] = React.useState<string | null>(null);\r\n  const monthOrder = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n\r\n  // Function to handle commentary editing\r\n  const handleCommentaryEdit = (tradeKey: string) => {\r\n    setEditingCommentary(tradeKey);\r\n  };\r\n\r\n  // Function to save commentary updates\r\n  const handleCommentarySave = (tradeKey: string, newCommentary: string) => {\r\n    setCustomCommentary(prev => ({\r\n      ...prev,\r\n      [tradeKey]: newCommentary\r\n    }));\r\n    setEditingCommentary(null);\r\n  };\r\n  const [taxesByMonth, setTaxesByMonth] = React.useState<{ [month: string]: number }>({});\r\n\r\n  // Function to load tax data for the selected year\r\n  const loadTaxData = useCallback(async () => {\r\n    try {\r\n      const yearData = await fetchTaxData(parseInt(selectedYear));\r\n      if (Object.keys(yearData).length > 0) {\r\n        setTaxesByMonth(prev => ({ ...prev, ...yearData }));\r\n      } else {\r\n        const initialData: { [month: string]: number } = {};\r\n        monthOrder.forEach(month => { initialData[month] = 0; });\r\n        setTaxesByMonth(initialData);\r\n      }\r\n    } catch (error) {\r\n      }\r\n  }, [selectedYear]);\r\n\r\n  // Function to load commentary data for the selected year\r\n  const loadCommentaryData = useCallback(async () => {\r\n    try {\r\n      const commentaryData = await fetchCommentaryData(selectedYear);\r\n      if (Object.keys(commentaryData).length > 0) {\r\n        setCustomCommentary(commentaryData);\r\n      } else {\r\n        setCustomCommentary({});\r\n      }\r\n    } catch (error) {\r\n      }\r\n  }, [selectedYear]);\r\n\r\n  // Load tax and commentary data on mount and when selectedYear changes\r\n  React.useEffect(() => {\r\n    loadTaxData();\r\n    loadCommentaryData();\r\n\r\n    // Note: IndexedDB doesn't have storage events like localStorage\r\n    // Data synchronization would need to be handled differently if needed\r\n  }, [loadTaxData, loadCommentaryData]);\r\n\r\n  // Save tax data to IndexedDB when it changes\r\n  React.useEffect(() => {\r\n    if (Object.keys(taxesByMonth).length > 0 && selectedYear) {\r\n      saveTaxData(parseInt(selectedYear), taxesByMonth).then(success => {\r\n        });\r\n    }\r\n  }, [taxesByMonth, selectedYear]);\r\n\r\n  // Save commentary data to IndexedDB when it changes\r\n  React.useEffect(() => {\r\n    if (Object.keys(customCommentary).length > 0 && selectedYear) {\r\n      saveCommentaryData(selectedYear, customCommentary).then(success => {\r\n        });\r\n    }\r\n  }, [customCommentary, selectedYear]);\r\n\r\n  // Initialize months with 0 if they don't exist\r\n  React.useEffect(() => {\r\n    const initial: { [month: string]: number } = {};\r\n    let needsUpdate = false;\r\n\r\n    monthOrder.forEach(month => {\r\n      if (!(month in taxesByMonth)) {\r\n        initial[month] = 0;\r\n        needsUpdate = true;\r\n      }\r\n    });\r\n\r\n    if (needsUpdate) {\r\n      setTaxesByMonth(prev => ({ ...initial, ...prev }));\r\n    }\r\n  }, [trades, taxesByMonth]);\r\n\r\n  let tradesForYear = trades.filter(t => t.date.startsWith(selectedYear));\r\n\r\n  // For cash basis, deduplicate trades to avoid double counting\r\n  if (useCashBasis) {\r\n    const seenTradeIds = new Set();\r\n    tradesForYear = tradesForYear.filter(trade => {\r\n      const originalId = trade.id.split('_exit_')[0];\r\n      if (seenTradeIds.has(originalId)) return false;\r\n      seenTradeIds.add(originalId);\r\n      return true;\r\n    });\r\n  }\r\n\r\n  const closedTrades = tradesForYear\r\n    .filter(t => t.positionStatus === \"Closed\" || t.positionStatus === \"Partial\")\r\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\r\n  const cummPfs = closedTrades.map(t => t.cummPf).filter(v => typeof v === 'number' && !isNaN(v));\r\n\r\n  // Create detailed drawdown breakdown for the modal - accounting aware\r\n  const drawdownBreakdown = React.useMemo(() => {\r\n    if (closedTrades.length === 0) return [];\r\n\r\n    let runningMax = closedTrades[0].cummPf || 0;\r\n    let maxDrawdown = 0;\r\n    let previousPF = 0;\r\n\r\n    return closedTrades.map((trade, index) => {\r\n      const currentPF = trade.cummPf || 0;\r\n\r\n      // Calculate accounting-aware P/L for this trade\r\n      const accountingAwarePL = calculateTradePL(trade, useCashBasis);\r\n\r\n      // Calculate stock-level PF impact (individual trade's impact on portfolio %)\r\n      const stockPFImpact = trade.pfImpact || 0; // This should be the individual trade's PF impact\r\n\r\n      // Check if this is a new peak\r\n      const isNewPeak = currentPF > runningMax;\r\n\r\n      // Update running max\r\n      if (currentPF > runningMax) {\r\n        runningMax = currentPF;\r\n      }\r\n\r\n      // Calculate drawdown from peak as absolute percentage points down from peak\r\n      const drawdownFromPeak = runningMax > 0 ? runningMax - currentPF : 0;\r\n\r\n      // Track maximum drawdown (convert to percentage for comparison)\r\n      const drawdownPercentage = runningMax > 0 ? (drawdownFromPeak / runningMax) * 100 : 0;\r\n      if (drawdownPercentage > maxDrawdown) {\r\n        maxDrawdown = drawdownPercentage;\r\n      }\r\n\r\n      // Generate system commentary\r\n      let commentary = \"\";\r\n      let commentaryType = \"neutral\";\r\n\r\n      if (index === 0) {\r\n        commentary = \"DD started\";\r\n        commentaryType = \"start\";\r\n      } else if (isNewPeak) {\r\n        commentary = `Touching new peak equity highs`;\r\n        commentaryType = \"peak\";\r\n      } else if (drawdownFromPeak === 0 && previousPF < runningMax) {\r\n        const recoveryAmount = Math.abs(runningMax - previousPF);\r\n        commentary = `Recovery of ${recoveryAmount.toFixed(2)} from dd low of ${runningMax.toFixed(2)}`;\r\n        commentaryType = \"recovery\";\r\n      } else if (drawdownFromPeak > 0 && drawdownFromPeak < 5) {\r\n        commentary = `DD going on`;\r\n        commentaryType = \"mild\";\r\n      } else if (drawdownFromPeak >= 5 && drawdownFromPeak < 15) {\r\n        commentary = `DD in full force (MODERATE DD)`;\r\n        commentaryType = \"moderate\";\r\n      } else if (drawdownFromPeak >= 15) {\r\n        commentary = `DD in full force (SEVERE DD - RECORD DD IN ${selectedYear})`;\r\n        commentaryType = \"severe\";\r\n      }\r\n\r\n      // Add specific movement details\r\n      if (index > 0) {\r\n        const move = currentPF - previousPF;\r\n        if (Math.abs(move) > 0.5) {\r\n          if (move > 0) {\r\n            commentary += ` • Portfolio up ${move.toFixed(2)}%`;\r\n          } else {\r\n            commentary += ` • Portfolio down ${Math.abs(move).toFixed(2)}%`;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Get the appropriate date based on accounting method\r\n      const displayDate = useCashBasis ?\r\n        (trade.exit1Date || trade.exit2Date || trade.exit3Date || trade.date) :\r\n        trade.date;\r\n\r\n      // Create unique key for this trade\r\n      const tradeKey = `${displayDate}-${trade.name}-${index}`;\r\n\r\n      // Use custom commentary if available, otherwise use system commentary\r\n      const finalCommentary = customCommentary[tradeKey] || commentary || 'No commentary';\r\n      const finalCommentaryType = customCommentary[tradeKey] ? 'custom' : (commentaryType || 'neutral');\r\n\r\n      previousPF = currentPF;\r\n\r\n      return {\r\n        date: displayDate,\r\n        symbol: trade.name || 'Unknown',\r\n        stockPFImpact: stockPFImpact, // Portfolio % impact of this trade\r\n        cummPFImpact: currentPF, // Cumulative portfolio %\r\n        drawdownFromPeak: drawdownFromPeak, // Portfolio % down from peak\r\n        isNewPeak: isNewPeak,\r\n        commentary: finalCommentary,\r\n        systemCommentary: commentary || 'No commentary',\r\n        commentaryType: finalCommentaryType,\r\n        tradeKey: tradeKey,\r\n        accountingMethod: useCashBasis ? 'Cash' : 'Accrual'\r\n      };\r\n    });\r\n  }, [closedTrades, useCashBasis, selectedYear, customCommentary, editingCommentary]);\r\n\r\n  let runningMax = cummPfs.length > 0 ? cummPfs[0] : 0;\r\n  let maxDrawdownPoints = 0;\r\n  cummPfs.forEach(pf => {\r\n    if (pf > runningMax) runningMax = pf;\r\n    // Calculate drawdown as percentage points down from peak\r\n    if (runningMax > 0) {\r\n      const ddPoints = runningMax - pf;\r\n      if (ddPoints > maxDrawdownPoints) maxDrawdownPoints = ddPoints;\r\n    }\r\n  });\r\n  const drawdown = maxDrawdownPoints;\r\n  const maxCummPF = cummPfs.length ? Math.max(...cummPfs) : 0;\r\n  const minCummPF = cummPfs.length ? Math.min(...cummPfs) : 0;\r\n  // Calculate total gross P/L using the same approach as trade journal for consistency\r\n  let totalGrossPL = 0;\r\n  if (useCashBasis) {\r\n    // For cash basis: Use expanded trades to get accurate P/L calculation\r\n    const allTradesForYear = trades.filter(t => t.date.startsWith(selectedYear));\r\n    const expandedTrades = allTradesForYear.flatMap(trade =>\r\n      Array.isArray(trade._expandedTrades)\r\n        ? trade._expandedTrades.filter(t => t._cashBasisExit)\r\n        : (trade._cashBasisExit ? [trade] : [])\r\n    );\r\n    totalGrossPL = expandedTrades.reduce((sum, t) => sum + calculateTradePL(t, useCashBasis), 0);\r\n  } else {\r\n    // For accrual basis: Use deduplicated trades\r\n    totalGrossPL = tradesForYear.reduce((sum, t) => sum + calculateTradePL(t, useCashBasis), 0);\r\n  }\r\n  const totalTaxes = monthOrder.reduce((sum, m) => sum + (taxesByMonth[m] || 0), 0);\r\n  const totalNetPL = totalGrossPL - totalTaxes;\r\n  const formatCurrency = (value: number) => new Intl.NumberFormat(\"en-IN\", { style: \"currency\", currency: \"INR\", minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(value);\r\n  const formatPercent = (value: number) => value.toFixed(2) + \"%\";\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <motion.div\r\n        className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\"\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.3 }}\r\n      >\r\n        <div className=\"flex items-center gap-3\">\r\n          <Dropdown>\r\n            <DropdownTrigger>\r\n              <Button\r\n                variant=\"light\"\r\n                endContent={<Icon icon=\"lucide:chevron-down\" className=\"text-sm\" />}\r\n                size=\"sm\"\r\n                radius=\"full\"\r\n                className=\"font-medium text-xs h-7 px-3\"\r\n              >\r\n                {selectedYear}\r\n              </Button>\r\n            </DropdownTrigger>\r\n            <DropdownMenu\r\n              aria-label=\"Year selection\"\r\n              selectionMode=\"single\"\r\n              selectedKeys={[selectedYear]}\r\n              onSelectionChange={(keys) => {\r\n                const selected = Array.from(keys)[0] as string;\r\n                setSelectedYear(selected);\r\n              }}\r\n            >\r\n              {tradeYears.map((year) => (\r\n                <DropdownItem key={year}>{year}</DropdownItem>\r\n              ))}\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button\r\n            variant=\"light\"\r\n            startContent={<Icon icon=\"lucide:download\" className=\"w-3.5 h-3.5\" />}\r\n            size=\"sm\"\r\n            radius=\"full\"\r\n            className=\"font-medium text-xs h-7 px-3\"\r\n          >\r\n            Export\r\n          </Button>\r\n        </div>\r\n      </motion.div>\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        <Card className=\"lg:col-span-2\">\r\n          <CardHeader className=\"flex justify-between items-center\">\r\n            <h3 className=\"text-xl font-semibold tracking-tight\">Tax Summary</h3>\r\n            <Tabs\r\n              aria-label=\"Chart options\"\r\n              size=\"sm\"\r\n              color=\"primary\"\r\n              variant=\"light\"\r\n              radius=\"full\"\r\n              classNames={{\r\n                tabList: \"gap-2 p-0.5\",\r\n                cursor: \"bg-primary/20\",\r\n                tab: \"px-3 py-1 h-7 data-[selected=true]:text-primary font-medium text-xs\",\r\n                tabContent: \"group-data-[selected=true]:text-primary\"\r\n              }}\r\n            >\r\n              <Tab key=\"gross\" title=\"Gross P/L\" />\r\n              <Tab key=\"net\" title=\"Net P/L\" />\r\n              <Tab key=\"taxes\" title=\"Taxes\" />\r\n            </Tabs>\r\n          </CardHeader>\r\n          <Divider />\r\n          <CardBody>\r\n            <TaxSummaryChart taxesByMonth={taxesByMonth} />\r\n          </CardBody>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader>\r\n            <h3 className=\"text-xl font-semibold tracking-tight\">Tax Metrics</h3>\r\n          </CardHeader>\r\n          <Divider />\r\n          <CardBody className=\"p-6 space-y-8\">\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-default-600\">Max Cumm PF</span>\r\n                  <Tooltip\r\n                    content={\r\n                      <div className=\"max-w-xs p-2 space-y-2 text-sm\">\r\n                        <p className=\"font-medium text-default-600\">Maximum Cumulative Profit Factor</p>\r\n                        <p>The highest point your cumulative profit factor reached during this period.</p>\r\n                        <div className=\"space-y-1\">\r\n                          <p className=\"font-medium\">What it means:</p>\r\n                          <p>• Higher values indicate stronger performance peaks</p>\r\n                          <p>• Shows your best momentum in the market</p>\r\n                          <p>• Helps identify optimal trading conditions</p>\r\n                        </div>\r\n                        <p className=\"text-xs text-default-400 mt-2\">\r\n                          Tip: Use this as a benchmark for your trading potential\r\n                        </p>\r\n                      </div>\r\n                    }\r\n                    placement=\"right\"\r\n                    showArrow\r\n                    classNames={{\r\n                      base: \"bg-content1\",\r\n                      content: \"p-0\"\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      isIconOnly\r\n                      size=\"sm\"\r\n                      variant=\"light\"\r\n                      className=\"min-w-unit-5 w-unit-5 h-unit-5 text-default-400\"\r\n                    >\r\n                      <Icon icon=\"lucide:info\" className=\"w-3 h-3\" />\r\n                    </Button>\r\n                  </Tooltip>\r\n                </div>\r\n                <span className=\"text-[#00B386] font-medium\">{maxCummPF.toFixed(2)}%</span>\r\n              </div>\r\n              <div className=\"flex justify-between items-center\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-default-600\">Min Cumm PF</span>\r\n                  <Tooltip\r\n                    content={\r\n                      <div className=\"max-w-xs p-2 space-y-2 text-sm\">\r\n                        <p className=\"font-medium text-default-600\">Minimum Cumulative Profit Factor</p>\r\n                        <p>The lowest point your cumulative profit factor reached during this period.</p>\r\n                        <div className=\"space-y-1\">\r\n                          <p className=\"font-medium\">What it means:</p>\r\n                          <p>• Shows your resilience during tough periods</p>\r\n                          <p>• Helps identify risk management needs</p>\r\n                          <p>• Important for setting stop-loss levels</p>\r\n                        </div>\r\n                        <p className=\"text-xs text-default-400 mt-2\">\r\n                          Tip: Use this to improve your risk management strategy\r\n                        </p>\r\n                      </div>\r\n                    }\r\n                    placement=\"right\"\r\n                    showArrow\r\n                    classNames={{\r\n                      base: \"bg-content1\",\r\n                      content: \"p-0\"\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      isIconOnly\r\n                      size=\"sm\"\r\n                      variant=\"light\"\r\n                      className=\"min-w-unit-5 w-unit-5 h-unit-5 text-default-400\"\r\n                    >\r\n                      <Icon icon=\"lucide:info\" className=\"w-3 h-3\" />\r\n                    </Button>\r\n                  </Tooltip>\r\n                </div>\r\n                <span className=\"text-[#FF3B3B] font-medium\">{minCummPF.toFixed(2)}%</span>\r\n              </div>\r\n              <div className=\"flex justify-between items-center\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-default-600\">Drawdown</span>\r\n                  <Button\r\n                    isIconOnly\r\n                    size=\"sm\"\r\n                    variant=\"light\"\r\n                    className=\"min-w-unit-5 w-unit-5 h-unit-5 text-default-400 hover:text-primary transition-colors\"\r\n                    onPress={() => setIsDrawdownModalOpen(true)}\r\n                  >\r\n                    <Icon icon=\"lucide:table\" className=\"w-3 h-3\" />\r\n                  </Button>\r\n                </div>\r\n                {drawdown === 0 ? (\r\n                  <span className=\"text-[#00B386] font-medium flex items-center gap-1\">\r\n                    <Icon icon=\"lucide:rocket\" className=\"w-4 h-4\" />\r\n                    Hurray! Flying high\r\n                  </span>\r\n                ) : (\r\n                  <span className=\"text-[#FF3B3B] font-medium text-sm\">{drawdown.toFixed(2)}% OF PF LOST FROM TOP</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <Divider className=\"my-4\" />\r\n\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-default-600\">Total Gross P/L</span>\r\n                </div>\r\n                <span className={`font-medium ${totalGrossPL >= 0 ? 'text-[#00B386]' : 'text-[#FF3B3B]'}`}>\r\n                  {formatCurrency(totalGrossPL)}\r\n                </span>\r\n              </div>\r\n              <div className=\"flex justify-between items-center\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-default-600\">Total Taxes</span>\r\n                  <Tooltip\r\n                    content={\r\n                      <div className=\"max-w-xs text-xs p-1\">\r\n                        {totalGrossPL !== 0\r\n                          ? `Taxes are ${((totalTaxes / totalGrossPL) * 100).toFixed(2)}% of Gross P/L.`\r\n                          : `Taxes are 0% of Gross P/L (Total Gross P/L is zero).`\r\n                        }\r\n                      </div>\r\n                    }\r\n                    placement=\"right\"\r\n                    showArrow\r\n                    classNames={{\r\n                      base: \"bg-content1\",\r\n                      content: \"p-0\"\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      isIconOnly\r\n                      size=\"sm\"\r\n                      variant=\"light\"\r\n                      className=\"min-w-unit-5 w-unit-5 h-unit-5 text-default-400\"\r\n                    >\r\n                      <Icon icon=\"lucide:info\" className=\"w-3 h-3\" />\r\n                    </Button>\r\n                  </Tooltip>\r\n                </div>\r\n                <span className=\"text-[#FF3B3B] font-medium\">\r\n                  {formatCurrency(totalTaxes)}\r\n                </span>\r\n              </div>\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-default-600\">Total Net P/L</span>\r\n                <span className={`font-medium ${totalNetPL >= 0 ? 'text-[#00B386]' : 'text-[#FF3B3B]'}`}>\r\n                  {formatCurrency(totalNetPL)}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n      <Card>\r\n        <CardHeader>\r\n          <h3 className=\"text-xl font-semibold tracking-tight\">Monthly Tax Breakdown</h3>\r\n        </CardHeader>\r\n        <Divider />\r\n        <CardBody>\r\n          <TaxTable\r\n            trades={trades}\r\n            taxesByMonth={taxesByMonth}\r\n            setTaxesByMonth={setTaxesByMonth}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <TaxEditModal\r\n        isOpen={isModalOpen}\r\n        onOpenChange={setIsModalOpen}\r\n        month={selectedMonth}\r\n      />\r\n\r\n      {/* Drawdown Breakdown Modal */}\r\n      <Modal\r\n        isOpen={isDrawdownModalOpen}\r\n        onOpenChange={setIsDrawdownModalOpen}\r\n        size=\"3xl\"\r\n        scrollBehavior=\"inside\"\r\n        classNames={{\r\n          base: \"transform-gpu backdrop-blur-sm\",\r\n          wrapper: \"transform-gpu\",\r\n          backdrop: \"bg-black/40\",\r\n          closeButton: \"text-foreground/60 hover:bg-white/10\"\r\n        }}\r\n        backdrop=\"blur\"\r\n      >\r\n        <ModalContent className=\"bg-white/95 dark:bg-gray-900/95 backdrop-blur-2xl border border-gray-200 dark:border-gray-700 shadow-2xl max-h-[85vh]\">\r\n          {(onClose) => (\r\n            <>\r\n              <ModalHeader className=\"flex flex-col gap-1 border-b border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-900/80 px-4 py-3\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"p-1.5 rounded-lg bg-primary/10\">\r\n                    <Icon icon=\"lucide:trending-down\" className=\"text-primary text-sm\" />\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"text-base font-semibold\">Drawdown Breakdown</span>\r\n                    <p className=\"text-xs text-default-500 mt-0.5\">\r\n                      {useCashBasis ? 'Cash Basis' : 'Accrual Basis'} • {selectedYear}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ModalHeader>\r\n              <ModalBody className=\"p-4\">\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"p-2 bg-content1/20 rounded-lg border border-divider/20\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <p className=\"text-xs font-medium text-foreground\">\r\n                        {drawdownBreakdown.length} trades • Max DD: <span className=\"text-danger\">{drawdown.toFixed(2)}%</span>\r\n                      </p>\r\n                      <p className=\"text-xs text-default-500\">\r\n                        {useCashBasis ? 'Exit dates' : 'Entry dates'}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <Table\r\n                    aria-label=\"Drawdown breakdown table\"\r\n                    classNames={{\r\n                      wrapper: \"max-h-[55vh] border border-divider/30 rounded-lg overflow-hidden\",\r\n                      table: \"border-collapse\",\r\n                      th: \"bg-content1/50 text-sm font-medium text-default-600 border-b border-divider/30 px-3 py-2.5\",\r\n                      td: \"py-2.5 px-3 text-sm border-b border-divider/20\",\r\n                      tr: \"hover:bg-content1/20 transition-colors\"\r\n                    }}\r\n                    removeWrapper={false}\r\n                  >\r\n                    <TableHeader>\r\n                      <TableColumn key=\"date\" align=\"start\" width={90}>Date</TableColumn>\r\n                      <TableColumn key=\"symbol\" align=\"start\" width={80}>Symbol</TableColumn>\r\n                      <TableColumn key=\"stockPF\" align=\"center\" width={110}>Stock PF Impact</TableColumn>\r\n                      <TableColumn key=\"cummPF\" align=\"center\" width={110}>Cum PF Impact</TableColumn>\r\n                      <TableColumn key=\"drawdown\" align=\"center\" width={110}>DD From Peak</TableColumn>\r\n                      <TableColumn key=\"commentary\" align=\"start\">Commentary</TableColumn>\r\n                    </TableHeader>\r\n                    <TableBody items={drawdownBreakdown.filter(item => item && item.symbol)}>\r\n                      {(item) => (\r\n                        <TableRow\r\n                          key={`${item.date}-${item.symbol}`}\r\n                          className={`${item.isNewPeak ? \"bg-success/10 border-l-4 border-l-success\" : \"hover:bg-content1/50\"} transition-all duration-200`}\r\n                        >\r\n                          <TableCell>\r\n                            <div className=\"flex items-center gap-1\">\r\n                              {item.isNewPeak && (\r\n                                <Icon icon=\"lucide:crown\" className=\"w-3 h-3 text-warning\" />\r\n                              )}\r\n                              <span className=\"text-sm\">{new Date(item.date).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit' })}</span>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell className=\"font-medium text-sm\">{item.symbol}</TableCell>\r\n                          <TableCell className=\"text-center\">\r\n                            <span className={`text-sm font-medium ${item.stockPFImpact >= 0 ? \"text-success\" : \"text-danger\"}`}>\r\n                              {item.stockPFImpact >= 0 ? \"+\" : \"\"}{item.stockPFImpact.toFixed(2)}%\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell className=\"text-center\">\r\n                            <span className=\"text-sm font-medium\">\r\n                              {item.cummPFImpact.toFixed(2)}%\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell className=\"text-center\">\r\n                            <span className={`text-sm font-medium ${item.drawdownFromPeak > 0 ? \"text-danger\" : \"text-success\"}`}>\r\n                              {item.drawdownFromPeak === 0 ? \"0.00%\" : `-${item.drawdownFromPeak.toFixed(2)}%`}\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            {editingCommentary === item.tradeKey ? (\r\n                              <Input\r\n                                size=\"sm\"\r\n                                value={customCommentary[item.tradeKey] || item.systemCommentary}\r\n                                onValueChange={(value) => setCustomCommentary(prev => ({ ...prev, [item.tradeKey]: value }))}\r\n                                onBlur={() => setEditingCommentary(null)}\r\n                                onKeyDown={(e) => {\r\n                                  if (e.key === 'Enter') {\r\n                                    setEditingCommentary(null);\r\n                                  }\r\n                                  if (e.key === 'Escape') {\r\n                                    setEditingCommentary(null);\r\n                                  }\r\n                                }}\r\n                                variant=\"bordered\"\r\n                                autoFocus\r\n                                classNames={{\r\n                                  input: \"text-xs\",\r\n                                  inputWrapper: \"h-7 min-h-unit-7\"\r\n                                }}\r\n                              />\r\n                            ) : (\r\n                              <div\r\n                                className={`text-sm px-2 py-1 rounded font-medium cursor-pointer hover:ring-1 hover:ring-primary/50 transition-all ${\r\n                                  customCommentary[item.tradeKey] ? 'bg-primary/10 text-primary border border-primary/20' :\r\n                                  item.commentaryType === 'peak' ? 'bg-success/10 text-success' :\r\n                                  item.commentaryType === 'recovery' ? 'bg-primary/10 text-primary' :\r\n                                  item.commentaryType === 'mild' ? 'bg-warning/10 text-warning' :\r\n                                  item.commentaryType === 'moderate' ? 'bg-danger/10 text-danger' :\r\n                                  item.commentaryType === 'severe' ? 'bg-danger/20 text-danger' :\r\n                                  'bg-default/10 text-default-600'\r\n                                }`}\r\n                                onClick={() => handleCommentaryEdit(item.tradeKey)}\r\n                                title=\"Click to edit commentary\"\r\n                              >\r\n                                <span className=\"truncate block max-w-[140px]\">{item.commentary}</span>\r\n                                {customCommentary[item.tradeKey] && (\r\n                                  <Icon icon=\"lucide:edit-3\" className=\"w-3 h-3 ml-1 inline opacity-60\" />\r\n                                )}\r\n                              </div>\r\n                            )}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                    </TableBody>\r\n                  </Table>\r\n                </div>\r\n              </ModalBody>\r\n              <ModalFooter className=\"border-t border-gray-200 dark:border-gray-700 px-4 py-1.5\">\r\n                <Button\r\n                  variant=\"flat\"\r\n                  onPress={onClose}\r\n                  size=\"sm\"\r\n                  className=\"w-auto px-4 py-1 text-xs h-7\"\r\n                  startContent={<Icon icon=\"lucide:x\" className=\"w-3 h-3\" />}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </>\r\n          )}\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaxAnalytics;"],"names":["formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","CustomTooltip","active","payload","label","length","_jsxs","motion","div","initial","opacity","y","animate","exit","transition","duration","className","backgroundColor","border","borderRadius","padding","children","_jsx","map","entry","index","color","name","toFixed","TaxSummaryChart","taxesByMonth","trades","useTrades","accountingMethod","useAccountingMethod","getPortfolioSize","getAllMonthlyTruePortfolios","useTruePortfolioWithTrades","currentYear","Date","getFullYear","filteredMonthlyPortfolios","filter","mp","year","chartData","month","longMonth","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","grossPL","find","pl","taxes","netPL","portfolioSize","plPercent","ease","ResponsiveContainer","width","height","ComposedChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","vertical","stroke","XAxis","dataKey","axisLine","tickLine","YAxis","yAxisId","tickFormatter","orientation","Tooltip","content","cursor","fill","Legend","ReferenceLine","Bar","radius","barSize","animationBegin","animationDuration","animationEasing","Line","type","strokeWidth","dot","r","activeDot","fetchTaxData","stored","localStorage","getItem","JSON","parse","error","EditableText","onSave","isEditing","prefix","editValue","setEditValue","React","useState","toString","inputRef","useRef","useEffect","current","focus","select","Input","ref","onValueChange","onBlur","handleBlur","onKeyDown","e","key","preventDefault","autoFocus","size","variant","classNames","input","inputWrapper","startContent","undefined","min","span","whileHover","scale","TaxTable","setTaxesByMonth","useCashBasis","editingCell","setEditingCell","yearTaxData","getShortMonthName","fullMonth","substring","monthOrder","monthlyMap","forEach","shortMonth","monthTrades","getTradesForMonth","handleEditStart","handleEditComplete","useCallback","newValueString","eventType","newValue","parseFloat","isNaN","trim","prev","updatedTaxes","allTaxData","taxData","setItem","stringify","saveTaxData","currentYear2","columns","useMemo","placement","Icon","icon","renderCell","item","columnKey","TableCell","onClick","_Fragment","formattedValue","Math","abs","String","Table","base","wrapper","table","thead","th","td","removeWrapper","TableHeader","TableColumn","column","TableBody","items","monthlyTrades","tradesWithPL","trade","accountingPL","calculateTradePL","reduce","sum","t","winTrades","lossTrades","totalTrades","winRate","avgProfit","avgLoss","taxPercent","portfolioSizeForMonth","grossPFImpact","netPFImpact","returnPercent","avgGainValue","avgLossValue","avgRR","TableRow","TaxEditModal","isOpen","onOpenChange","sessionKey","setGrossPL","window","saved","sessionStorage","Number","setTaxes","stcg","setStcg","ltcg","setLtcg","stt","setStt","stampDuty","setStampDuty","exchangeCharges","setExchangeCharges","gst","setGst","sebiCharges","setSebiCharges","ipft","setIpft","otherCharges","setOtherCharges","taxBreakupSum","taxWarning","setTaxWarning","suffix","removeItem","handleSaveChanges","pathParts","location","pathname","split","yearFromUrl","selectedYear","currentData","dispatchEvent","Event","handleTaxesChange","target","Modal","scrollBehavior","ModalContent","ModalHeader","Tabs","tabList","tab","Tab","title","Divider","ModalBody","defaultValue","onChange","fontSize","isReadOnly","ModalFooter","Button","onPress","onClose","TaxAnalytics","useGlobalFilter","tradeYears","Array","from","Set","date","sort","a","b","defaultYear","setSelectedYear","isEditMode","setIsEditMode","isModalOpen","setIsModalOpen","selectedMonth","setSelectedMonth","isDrawdownModalOpen","setIsDrawdownModalOpen","customCommentary","setCustomCommentary","editingCommentary","setEditingCommentary","loadTaxData","async","yearData","taxRecord","SupabaseService","getTaxData","parseInt","Object","keys","initialData","loadCommentaryData","commentaryData","commentaryRecord","getCommentaryData","fetchCommentaryData","then","success","saveCommentaryData","needsUpdate","tradesForYear","startsWith","seenTradeIds","originalId","id","has","add","closedTrades","positionStatus","getTime","cummPfs","cummPf","v","drawdownBreakdown","runningMax","previousPF","currentPF","stockPFImpact","pfImpact","isNewPeak","drawdownFromPeak","commentary","commentaryType","move","displayDate","exit1Date","exit2Date","exit3Date","tradeKey","finalCommentary","finalCommentaryType","symbol","cummPFImpact","systemCommentary","maxDrawdownPoints","pf","ddPoints","drawdown","maxCummPF","max","minCummPF","totalGrossPL","expandedTrades","flatMap","isArray","_expandedTrades","_cashBasisExit","totalTaxes","m","totalNetPL","Dropdown","DropdownTrigger","endContent","DropdownMenu","selectionMode","selectedKeys","onSelectionChange","selected","DropdownItem","Card","CardHeader","tabContent","CardBody","showArrow","isIconOnly","backdrop","closeButton","tr","align","toLocaleDateString","day","handleCommentaryEdit"],"mappings":"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"}