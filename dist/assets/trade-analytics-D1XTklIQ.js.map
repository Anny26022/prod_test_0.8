{"version":3,"mappings":"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","names":["DEFAULT_DASHBOARD_CONFIG","id","name","isVisible","springTransition","type","stiffness","damping","mass","pageVariants","initial","opacity","y","animate","transition","staggerChildren","exit","duration","cardVariants","scale","hover","tap","listItemVariants","x","metricVariants","backgroundColor","fadeInVariants","PerformanceMetrics","lazy","import","then","module","default","TradeStatistics","TopPerformers","PerformanceChart","DrawdownCurve","TradeAnalytics","React","memo","trades","useTrades","dashboardConfig","toggleWidgetVisibility","setDashboardConfig","useState","isLoading","setIsLoading","useEffect","async","window","storedConfigRecord","DatabaseService","getDashboardConfig","config","parsedConfig","finalConfig","map","defaultWidget","existingWidget","find","p","filter","widget","some","error","loadConfig","saveDashboardConfig","useCallback","prevConfig","useDashboardConfig","selectedPeriod","setSelectedPeriod","selectedView","setSelectedView","chartData","setChartData","handleChartDataUpdate","data","containerVariants","getWidgetVisibility","_jsxs","motion","div","className","variants","children","_jsx","Dropdown","placement","DropdownTrigger","Button","variant","color","startContent","Icon","icon","size","radius","DropdownMenu","closeOnSelect","selectionMode","selectedKeys","Set","w","onSelectionChange","keys","selectedKeysArray","Array","from","forEach","newVisibility","includes","DropdownItem","textValue","Card","CardHeader","length","plPercentage","delay","toFixed","CardBody","AnimatePresence","mode","Suspense","fallback","Loader","message","onDataUpdate","isEditing","Divider"],"ignoreList":[],"sources":["../../src/hooks/use-dashboard-config.ts","../../src/utils/animations.ts","../../src/components/trade-analytics.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { DatabaseService } from '../db/database';\r\n\r\nexport interface DashboardWidget {\r\n  id: string;\r\n  name: string;\r\n  isVisible: boolean;\r\n}\r\n\r\nconst DEFAULT_DASHBOARD_CONFIG: DashboardWidget[] = [\r\n  { id: 'portfolio-performance', name: 'Portfolio Performance', isVisible: true },\r\n  { id: 'performance-metrics', name: 'Performance Metrics', isVisible: true },\r\n  { id: 'drawdown-curve', name: 'Drawdown Analysis', isVisible: true },\r\n  { id: 'trade-statistics', name: 'Trade Statistics', isVisible: true },\r\n  { id: 'top-performers', name: 'Top Performers', isVisible: true },\r\n];\r\n\r\nexport const useDashboardConfig = () => {\r\n  const [dashboardConfig, setDashboardConfig] = useState<DashboardWidget[]>(DEFAULT_DASHBOARD_CONFIG);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Load dashboard config from IndexedDB on mount\r\n  useEffect(() => {\r\n    const loadConfig = async () => {\r\n      if (typeof window === 'undefined') {\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const storedConfigRecord = await DatabaseService.getDashboardConfig();\r\n        if (storedConfigRecord && storedConfigRecord.config) {\r\n          const parsedConfig: DashboardWidget[] = storedConfigRecord.config;\r\n          // Merge with default to ensure new widgets are added and old ones removed if structure changes\r\n          const mergedConfig = DEFAULT_DASHBOARD_CONFIG.map(defaultWidget => {\r\n            const existingWidget = parsedConfig.find(p => p.id === defaultWidget.id);\r\n            return existingWidget ? { ...defaultWidget, isVisible: existingWidget.isVisible } : defaultWidget;\r\n          });\r\n          // Filter out any widgets from stored config that are no longer in default config\r\n          const finalConfig = mergedConfig.filter(widget => DEFAULT_DASHBOARD_CONFIG.some(defaultWidget => defaultWidget.id === widget.id));\r\n          setDashboardConfig(finalConfig);\r\n        }\r\n      } catch (error) {\r\n        // Silent error handling\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadConfig();\r\n  }, []);\r\n\r\n  // Save dashboard config to IndexedDB\r\n  useEffect(() => {\r\n    if (!isLoading && typeof window !== 'undefined') {\r\n      DatabaseService.saveDashboardConfig(dashboardConfig);\r\n    }\r\n  }, [dashboardConfig, isLoading]);\r\n\r\n  const toggleWidgetVisibility = useCallback((id: string) => {\r\n    setDashboardConfig(prevConfig =>\r\n      prevConfig.map(widget =>\r\n        widget.id === id ? { ...widget, isVisible: !widget.isVisible } : widget\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  return {\r\n    dashboardConfig,\r\n    toggleWidgetVisibility,\r\n    isLoading,\r\n  };\r\n}; ","import { Variants } from \"framer-motion\";\r\n\r\n// Shared spring configuration for consistent feel\r\nexport const springTransition = {\r\n  type: \"spring\",\r\n  stiffness: 180,\r\n  damping: 22,\r\n  mass: 0.5\r\n};\r\n\r\n// Page transition variants\r\nexport const pageVariants: Variants = {\r\n  initial: {\r\n    opacity: 0,\r\n    y: 20\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    y: 0,\r\n    transition: {\r\n      ...springTransition,\r\n      staggerChildren: 0.07\r\n    }\r\n  },\r\n  exit: {\r\n    opacity: 0,\r\n    y: -20,\r\n    transition: {\r\n      duration: 0.15\r\n    }\r\n  }\r\n};\r\n\r\n// Card transition variants\r\nexport const cardVariants: Variants = {\r\n  initial: {\r\n    opacity: 0,\r\n    y: 20,\r\n    scale: 0.97\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    y: 0,\r\n    scale: 1,\r\n    transition: springTransition\r\n  },\r\n  hover: {\r\n    y: -2,\r\n    scale: 1.01,\r\n    transition: springTransition\r\n  },\r\n  tap: {\r\n    scale: 0.98\r\n  }\r\n};\r\n\r\n// List item variants for staggered animations\r\nexport const listItemVariants: Variants = {\r\n  initial: {\r\n    opacity: 0,\r\n    x: -20\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    x: 0,\r\n    transition: springTransition\r\n  }\r\n};\r\n\r\n// Metric card variants\r\nexport const metricVariants: Variants = {\r\n  initial: {\r\n    opacity: 0,\r\n    scale: 0.97\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    transition: springTransition\r\n  },\r\n  hover: {\r\n    y: -2,\r\n    backgroundColor: \"#F8F9FA\", // Light mode content2\r\n    transition: springTransition\r\n  }\r\n};\r\n\r\n// Fade in variants\r\nexport const fadeInVariants: Variants = {\r\n  initial: {\r\n    opacity: 0\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    transition: {\r\n      duration: 0.2\r\n    }\r\n  }\r\n};\r\n\r\n// Scale up variants\r\nexport const scaleUpVariants: Variants = {\r\n  initial: {\r\n    scale: 0.95,\r\n    opacity: 0\r\n  },\r\n  animate: {\r\n    scale: 1,\r\n    opacity: 1,\r\n    transition: springTransition\r\n  }\r\n};\r\n\r\n// Slide variants\r\nexport const slideVariants: Variants = {\r\n  left: {\r\n    x: \"-100%\",\r\n    opacity: 0\r\n  },\r\n  right: {\r\n    x: \"100%\",\r\n    opacity: 0\r\n  },\r\n  center: {\r\n    x: 0,\r\n    opacity: 1,\r\n    transition: springTransition\r\n  }\r\n};\r\n\r\n// Table row variants\r\nexport const tableRowVariants: Variants = {\r\n  initial: {\r\n    opacity: 0,\r\n    x: -20\r\n  },\r\n  animate: (i: number) => ({\r\n    opacity: 1,\r\n    x: 0,\r\n    transition: {\r\n      delay: i * 0.03,\r\n      ...springTransition\r\n    }\r\n  }),\r\n  hover: {\r\n    backgroundColor: \"#F8F9FA\", // Light mode content2\r\n    transition: {\r\n      duration: 0.13\r\n    }\r\n  }\r\n};\r\n\r\n// Modal variants\r\nexport const modalVariants: Variants = {\r\n  initial: {\r\n    opacity: 0,\r\n    scale: 0.97,\r\n    y: 20\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    y: 0,\r\n    transition: springTransition\r\n  },\r\n  exit: {\r\n    opacity: 0,\r\n    scale: 0.97,\r\n    y: 10,\r\n    transition: {\r\n      duration: 0.15\r\n    }\r\n  }\r\n};","import React, { Suspense } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Divider,\r\n  Button,\r\n  Dropdown,\r\n  DropdownTrigger,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Tabs,\r\n  Tab\r\n} from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { useTrades } from \"../hooks/use-trades\";\r\nimport { useDashboardConfig } from \"../hooks/use-dashboard-config\";\r\nimport { pageVariants, cardVariants, fadeInVariants } from \"../utils/animations\";\r\nimport { Loader } from \"./Loader\";\r\n\r\n// Lazy load analytics components for better performance\r\nconst PerformanceMetrics = React.lazy(() => import(\"./analytics/performance-metrics\").then(module => ({ default: module.PerformanceMetrics })));\r\nconst TradeStatistics = React.lazy(() => import(\"./analytics/trade-statistics\").then(module => ({ default: module.TradeStatistics })));\r\nconst TopPerformers = React.lazy(() => import(\"./analytics/top-performers\").then(module => ({ default: module.TopPerformers })));\r\nconst PerformanceChart = React.lazy(() => import(\"./analytics/performance-chart\").then(module => ({ default: module.PerformanceChart })));\r\nconst DrawdownCurve = React.lazy(() => import(\"./analytics/drawdown-curve\").then(module => ({ default: module.DrawdownCurve })));\r\n\r\ninterface ChartDataPoint {\r\n  month: string;\r\n  capital: number;\r\n  pl: number;\r\n  plPercentage: number;\r\n  startingCapital?: number;\r\n}\r\n\r\nexport const TradeAnalytics = React.memo(function TradeAnalytics() {\r\n  const { trades } = useTrades();\r\n  const { dashboardConfig, toggleWidgetVisibility } = useDashboardConfig();\r\n  const [selectedPeriod, setSelectedPeriod] = React.useState(\"YTD\");\r\n  const [selectedView, setSelectedView] = React.useState(\"performance\");\r\n  const [chartData, setChartData] = React.useState<ChartDataPoint[]>([]);\r\n  \r\n  const periods = [\"1W\", \"1M\", \"3M\", \"6M\", \"YTD\", \"1Y\", \"ALL\"];\r\n  \r\n  const handleChartDataUpdate = React.useCallback((data: ChartDataPoint[]) => {\r\n    setChartData(data);\r\n  }, []);\r\n  \r\n  const containerVariants = {\r\n    initial: {},\r\n    animate: {\r\n      transition: {\r\n        staggerChildren: 0.1,\r\n      },\r\n    },\r\n  };\r\n\r\n  const getWidgetVisibility = (id: string) => {\r\n    return dashboardConfig.find(widget => widget.id === id)?.isVisible;\r\n  };\r\n\r\n  return (\r\n    <motion.div \r\n      className=\"space-y-6\"\r\n      variants={pageVariants}\r\n      initial=\"initial\"\r\n      animate=\"animate\"\r\n      exit=\"exit\"\r\n    >\r\n      <motion.div\r\n        className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\"\r\n        variants={fadeInVariants}\r\n      >\r\n        <h2 className=\"text-3xl font-bold tracking-tight text-foreground\">Analytics Dashboard</h2>\r\n        <Dropdown placement=\"bottom-end\">\r\n          <DropdownTrigger>\r\n            <Button \r\n              variant=\"flat\" \r\n              color=\"default\" \r\n              startContent={<Icon icon=\"lucide:customize\" />}\r\n              size=\"sm\"\r\n              radius=\"full\"\r\n            >\r\n              Customize Dashboard\r\n            </Button>\r\n          </DropdownTrigger>\r\n          <DropdownMenu \r\n            aria-label=\"Customize Dashboard Actions\"\r\n            closeOnSelect={false}\r\n            selectionMode=\"multiple\"\r\n            selectedKeys={new Set(dashboardConfig.filter(w => w.isVisible).map(w => w.id))}\r\n            onSelectionChange={(keys) => {\r\n              const selectedKeysArray = Array.from(keys as any); // Convert to array\r\n              dashboardConfig.forEach(widget => {\r\n                const newVisibility = selectedKeysArray.includes(widget.id);\r\n                if (widget.isVisible !== newVisibility) {\r\n                  toggleWidgetVisibility(widget.id);\r\n                }\r\n              });\r\n            }}\r\n          >\r\n            {dashboardConfig.map((widget) => (\r\n              <DropdownItem key={widget.id} textValue={widget.name}>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span>{widget.name}</span>\r\n                </div>\r\n              </DropdownItem>\r\n            ))}\r\n          </DropdownMenu>\r\n        </Dropdown>\r\n      </motion.div>\r\n      \r\n      <motion.div \r\n        className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\"\r\n        variants={containerVariants}\r\n        initial=\"initial\"\r\n        animate=\"animate\"\r\n      >\r\n        {getWidgetVisibility('portfolio-performance') && (\r\n          <motion.div\r\n            className=\"lg:col-span-2\"\r\n            variants={cardVariants}\r\n          >\r\n            <Card className=\"dark:bg-gray-900\">\r\n              <CardHeader className=\"flex flex-col gap-2\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <h3 className=\"text-xl font-semibold tracking-tight dark:text-white\">Portfolio Performance</h3>\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <motion.div \r\n                      className={`flex items-center gap-1.5 px-2 py-1 rounded-md ${\r\n                        chartData.length > 0 && chartData[chartData.length - 1].plPercentage >= 0 \r\n                          ? 'bg-success-100 dark:bg-success-900' \r\n                          : 'bg-danger-100 dark:bg-danger-900'\r\n                      }`}\r\n                      initial={{ opacity: 0, scale: 0.8 }}\r\n                      animate={{ opacity: 1, scale: 1 }}\r\n                      transition={{ delay: 0.2, type: \"spring\" }}\r\n                    >\r\n                      <Icon \r\n                        icon={chartData.length > 0 && chartData[chartData.length - 1].plPercentage >= 0 \r\n                          ? \"lucide:trending-up\" \r\n                          : \"lucide:trending-down\"} \r\n                        className={chartData.length > 0 && chartData[chartData.length - 1].plPercentage >= 0 \r\n                          ? \"text-success-600 dark:text-success-400\" \r\n                          : \"text-danger-600 dark:text-danger-400\"} \r\n                      />\r\n                      <span \r\n                        className={`text-sm font-medium ${\r\n                          chartData.length > 0 && chartData[chartData.length - 1].plPercentage >= 0 \r\n                            ? 'text-success-600 dark:text-success-400' \r\n                            : 'text-danger-600 dark:text-danger-400'\r\n                        }`}\r\n                      >\r\n                        {chartData && chartData.length > 0 \r\n                          ? `${chartData[chartData.length - 1].plPercentage >= 0 ? '+' : ''}${chartData[chartData.length - 1].plPercentage.toFixed(2)}%`\r\n                          : '0.00%'}\r\n                      </span>\r\n                    </motion.div>\r\n                    <span className=\"text-sm text-default-500 dark:text-gray-400 font-medium min-w-[40px] text-center\">{selectedPeriod}</span>\r\n                  </div>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <AnimatePresence mode=\"wait\">\r\n                  <motion.div\r\n                    key={selectedView}\r\n                    initial={{ opacity: 0, x: 20 }}\r\n                    animate={{ opacity: 1, x: 0 }}\r\n                    exit={{ opacity: 0, x: -20 }}\r\n                    transition={{ duration: 0.2 }}\r\n                  >\r\n                    <Suspense fallback={<Loader size=\"sm\" message=\"Loading chart...\" />}>\r\n                      <PerformanceChart\r\n                        trades={trades}\r\n                        onDataUpdate={handleChartDataUpdate}\r\n                        selectedView={selectedView}\r\n                      />\r\n                    </Suspense>\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              </CardBody>\r\n            </Card>\r\n          </motion.div>\r\n        )}\r\n        \r\n        {getWidgetVisibility('performance-metrics') && (\r\n          <motion.div\r\n            variants={cardVariants}\r\n          >\r\n            <Card className=\"dark:bg-gray-900\">\r\n              <CardHeader>\r\n                <h3 className=\"text-xl font-semibold tracking-tight dark:text-white\">Performance Metrics</h3>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Suspense fallback={<Loader size=\"sm\" message=\"Loading metrics...\" />}>\r\n                  <PerformanceMetrics trades={trades} isEditing={false} />\r\n                </Suspense>\r\n              </CardBody>\r\n            </Card>\r\n          </motion.div>\r\n        )}\r\n      </motion.div>\r\n\r\n      {/* Drawdown Analysis Section */}\r\n      {getWidgetVisibility('drawdown-curve') && (\r\n        <motion.div\r\n          variants={cardVariants}\r\n          initial=\"initial\"\r\n          animate=\"animate\"\r\n        >\r\n          <Suspense fallback={<Loader size=\"sm\" message=\"Loading drawdown analysis...\" />}>\r\n            <DrawdownCurve trades={trades} className=\"dark:bg-gray-900\" />\r\n          </Suspense>\r\n        </motion.div>\r\n      )}\r\n      \r\n      <motion.div \r\n        className=\"grid grid-cols-1 md:grid-cols-2 gap-6\"\r\n        variants={containerVariants}\r\n        initial=\"initial\"\r\n        animate=\"animate\"\r\n      >\r\n        {getWidgetVisibility('trade-statistics') && (\r\n          <motion.div\r\n            variants={cardVariants}\r\n          >\r\n            <Card className=\"dark:bg-gray-900\">\r\n              <CardHeader>\r\n                <h3 className=\"text-xl font-semibold tracking-tight dark:text-white\">Trade Statistics</h3>\r\n              </CardHeader>\r\n              <Divider className=\"dark:bg-gray-800\" />\r\n              <CardBody>\r\n                <Suspense fallback={<Loader size=\"sm\" message=\"Loading statistics...\" />}>\r\n                  <TradeStatistics trades={trades} />\r\n                </Suspense>\r\n              </CardBody>\r\n            </Card>\r\n          </motion.div>\r\n        )}\r\n        \r\n        {getWidgetVisibility('top-performers') && (\r\n          <motion.div\r\n            variants={cardVariants}\r\n          >\r\n            <Card className=\"dark:bg-gray-900\">\r\n              <CardHeader className=\"flex justify-between items-center\">\r\n                <h3 className=\"text-xl font-semibold tracking-tight dark:text-white\">Top Performers</h3>\r\n              </CardHeader>\r\n              <Divider className=\"dark:bg-gray-800\" />\r\n              <CardBody>\r\n                <Suspense fallback={<Loader size=\"sm\" message=\"Loading top performers...\" />}>\r\n                  <TopPerformers trades={trades} />\r\n                </Suspense>\r\n              </CardBody>\r\n            </Card>\r\n          </motion.div>\r\n        )}\r\n      </motion.div>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\nexport default TradeAnalytics;"],"file":"assets/trade-analytics-D1XTklIQ.js"}