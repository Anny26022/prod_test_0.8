{"version":3,"file":"monthly-performance-DVXWktNO.js","sources":["../../src/pages/monthly-performance.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Tooltip, Input, Button } from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useTrades } from \"../hooks/use-trades\";\r\nimport { useTruePortfolioWithTrades } from \"../hooks/use-true-portfolio-with-trades\";\r\nimport { calcXIRR } from \"../utils/tradeCalculations\";\r\nimport { useAccountingMethod } from \"../context/AccountingMethodContext\";\r\nimport { useGlobalFilter } from \"../context/GlobalFilterContext\";\r\nimport { getTradesForMonth, calculateTradePL, getTradeDateForAccounting } from \"../utils/accountingUtils\";\r\nimport MobileTooltip from \"../components/ui/MobileTooltip\";\r\n\r\n// Helper function to create safe dependencies for useEffect/useMemo\r\nconst safeDeps = (deps: any[]) => deps;\r\n\r\ninterface MonthlyData {\r\n  month: string;\r\n  addedWithdrawn: number;\r\n  startingCapital: number;\r\n  pl: number;\r\n  plPercentage: number;\r\n  finalCapital: number;\r\n  yearPlPercentage: string;\r\n  trades: number;\r\n  winPercentage: number;\r\n  avgGain: number;\r\n  avgLoss: number;\r\n  avgRR: number;\r\n  biggestImpact: number;\r\n  smallestLoss: number;\r\n  avgHoldingDays: number;\r\n  cagr: number;\r\n  rollingReturn1M: number;\r\n  rollingReturn3M: number;\r\n  rollingReturn6M: number;\r\n  rollingReturn12M: number;\r\n}\r\n\r\nexport const MonthlyPerformanceTable: React.FC = () => {\r\n  const { trades } = useTrades(); // This now returns filtered trades based on global filter and accounting method\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const { filter } = useGlobalFilter();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n  const {\r\n    portfolioSize,\r\n    getPortfolioSize,\r\n    getAllMonthlyTruePortfolios,\r\n    yearlyStartingCapitals,\r\n    setYearlyStartingCapital,\r\n    setMonthlyStartingCapitalOverride,\r\n    removeMonthlyStartingCapitalOverride,\r\n    getMonthlyStartingCapitalOverride,\r\n    capitalChanges,\r\n    addCapitalChange,\r\n    updateCapitalChange,\r\n    deleteCapitalChange\r\n  } = useTruePortfolioWithTrades(trades);\r\n\r\n  // Removed debug console.log to prevent unnecessary re-renders\r\n\r\n  // Get all monthly portfolio data\r\n  const monthlyPortfolios = getAllMonthlyTruePortfolios();\r\n  const [yearlyStartingCapital, setYearlyStartingCapitalState] = React.useState(portfolioSize);\r\n\r\n  // Inline editing state\r\n  const [editingCell, setEditingCell] = React.useState<{ row: number; col: string } | null>(null);\r\n  const [editingValue, setEditingValue] = React.useState<string>(\"\");\r\n\r\n  // Add global year picker state\r\n  const currentYear = new Date().getFullYear();\r\n  const [selectedYear, setSelectedYear] = React.useState<number>(currentYear);\r\n\r\n  // Build monthly data from trades with proper date handling\r\n  const monthOrder = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\r\n\r\n  // Memoize filtered trades to prevent unnecessary recalculations\r\n  const filteredTrades = React.useMemo(() =>\r\n    trades.filter(trade => {\r\n      if (!trade.date) return false;\r\n      const tradeYear = new Date(trade.date).getFullYear();\r\n      return tradeYear === selectedYear;\r\n    }),\r\n    [trades, selectedYear]\r\n  );\r\n\r\n  // Memoize monthly map calculation based on accounting method\r\n  const monthlyMap = React.useMemo(() => {\r\n    const map: Record<string, { trades: typeof trades; date: Date }> = {};\r\n\r\n    monthOrder.forEach(month => {\r\n      const monthTrades = getTradesForMonth(filteredTrades, month, selectedYear, useCashBasis);\r\n      if (monthTrades.length > 0) {\r\n        // Use the first trade's date for the month date\r\n        const firstTradeDate = new Date(getTradeDateForAccounting(monthTrades[0], useCashBasis));\r\n\r\n        map[month] = {\r\n          trades: monthTrades,\r\n          date: firstTradeDate\r\n        };\r\n\r\n        // Sort trades by date within each month\r\n        map[month].trades.sort((a, b) => {\r\n          const dateA = new Date(getTradeDateForAccounting(a, useCashBasis));\r\n          const dateB = new Date(getTradeDateForAccounting(b, useCashBasis));\r\n          return dateA.getTime() - dateB.getTime();\r\n        });\r\n      }\r\n    });\r\n\r\n    return map;\r\n  }, [filteredTrades, selectedYear, useCashBasis, monthOrder]);\r\n\r\n  // Memoize filtered monthly portfolios\r\n  const filteredMonthlyPortfolios = React.useMemo(() =>\r\n    monthlyPortfolios.filter(mp => mp.year === selectedYear),\r\n    [monthlyPortfolios, selectedYear, useCashBasis, trades]\r\n  );\r\n\r\n  // Memoize initial monthly data calculation\r\n  const initialMonthlyData = React.useMemo(() => monthOrder.map((month, i) => {\r\n    const monthData = monthlyMap[month] || { trades: [], date: new Date() };\r\n    const monthTrades = monthData.trades;\r\n    const tradesCount = monthTrades.length;\r\n\r\n    // Calculate P/L based on accounting method\r\n    const tradesWithPL = monthTrades.map(trade => ({\r\n      ...trade,\r\n      accountingPL: calculateTradePL(trade, useCashBasis)\r\n    }));\r\n\r\n    const winTrades = tradesWithPL.filter(t => t.accountingPL > 0);\r\n    const lossTrades = tradesWithPL.filter(t => t.accountingPL < 0);\r\n    const winPercentage = tradesCount > 0 ? (winTrades.length / tradesCount) * 100 : 0;\r\n\r\n    // For monthly performance, we want to show stockMove % (which is consistent across accounting methods)\r\n    // The key is that we're filtering trades correctly based on accounting method above\r\n    const avgGain = winTrades.length > 0 ? winTrades.reduce((sum, t) => sum + (t.stockMove || 0), 0) / winTrades.length : 0;\r\n    const avgLoss = lossTrades.length > 0 ? lossTrades.reduce((sum, t) => sum + (t.stockMove || 0), 0) / lossTrades.length : 0;\r\n\r\n    // Calculate average R:R (Reward to Risk ratio)\r\n    const avgRR = tradesCount > 0\r\n      ? Math.abs(avgGain / avgLoss) // Use absolute values to get proper ratio\r\n      : 0;\r\n\r\n    const avgHoldingDays = tradesCount > 0 ? monthTrades.reduce((sum, t) => sum + (t.holdingDays || 0), 0) / tradesCount : 0;\r\n\r\n    // Find corresponding monthly portfolio data\r\n    const monthPortfolio = filteredMonthlyPortfolios.find(mp => mp.month === month) || {\r\n      month,\r\n      year: selectedYear,\r\n      startingCapital: 0,\r\n      capitalChanges: 0,\r\n      pl: 0,\r\n      finalCapital: 0\r\n    };\r\n\r\n    // Get capital changes for this month and year\r\n    const monthCapitalChanges = capitalChanges.filter(change => {\r\n      const changeDate = new Date(change.date);\r\n      return changeDate.getMonth() === monthOrder.indexOf(month) &&\r\n             changeDate.getFullYear() === selectedYear;\r\n    });\r\n\r\n    // Calculate net added/withdrawn from capital changes\r\n    let netAddedWithdrawn = 0;\r\n    monthCapitalChanges.forEach(change => {\r\n      netAddedWithdrawn += change.type === 'deposit' ? change.amount : -change.amount;\r\n    });\r\n\r\n    // If no capital changes, use the portfolio data\r\n    if (monthCapitalChanges.length === 0) {\r\n      netAddedWithdrawn = monthPortfolio.capitalChanges;\r\n    }\r\n\r\n    // For months with no trades, show '-' for most stats and set finalCapital to 0\r\n    // Use the starting capital from monthPortfolio which includes the net deposits/withdrawals\r\n    const adjustedStartingCapital = monthPortfolio.startingCapital || getPortfolioSize(month, selectedYear);\r\n\r\n    // Check if there's any P/L for this month (regardless of trade count)\r\n    // This is important for Cash Basis where P/L might exist without trades initiated in this month\r\n    const hasMonthlyPL = monthPortfolio.pl !== 0;\r\n    const shouldShowPL = tradesCount > 0 || hasMonthlyPL;\r\n\r\n    return {\r\n      month,\r\n      addedWithdrawn: netAddedWithdrawn,\r\n      startingCapital: adjustedStartingCapital,\r\n      pl: shouldShowPL ? monthPortfolio.pl : '-',\r\n      plPercentage: shouldShowPL ? 0 : '-', // Will be calculated later in computedData\r\n      finalCapital: shouldShowPL ? monthPortfolio.finalCapital : adjustedStartingCapital,\r\n      yearPlPercentage: '',\r\n      trades: tradesCount > 0 ? tradesCount : '-',\r\n      winPercentage: tradesCount > 0 ? winPercentage : '-',\r\n      avgGain: tradesCount > 0 ? avgGain : '-',\r\n      avgLoss: tradesCount > 0 ? avgLoss : '-',\r\n      avgRR: tradesCount > 0 ? avgRR : '-',\r\n      biggestImpact: 0,\r\n      smallestLoss: 0,\r\n      avgHoldingDays: tradesCount > 0 ? avgHoldingDays : '-',\r\n      cagr: 0,\r\n      rollingReturn1M: 0,\r\n      rollingReturn3M: 0,\r\n      rollingReturn6M: 0,\r\n      rollingReturn12M: 0\r\n    };\r\n  }), [monthOrder, monthlyMap, filteredMonthlyPortfolios, selectedYear, capitalChanges, getPortfolioSize, useCashBasis]);\r\n\r\n  // Effect to update yearly starting capital when portfolio size changes\r\n  React.useEffect(() => {\r\n    setYearlyStartingCapitalState(portfolioSize);\r\n  }, safeDeps([portfolioSize]));\r\n\r\n  const computedData = React.useMemo(() => {\r\n    const currentYear = selectedYear; // Use the selected year instead of current year\r\n\r\n    return initialMonthlyData.map((row, i) => {\r\n      const startingCapital = row.startingCapital;\r\n      const pl = row.pl;\r\n      const finalCapital = row.finalCapital;\r\n      const monthIndex = monthOrder.indexOf(row.month);\r\n      const currentDate = new Date(currentYear, monthIndex, 1);\r\n\r\n      // Get all capital changes up to this month\r\n      const relevantChanges = capitalChanges\r\n        .filter(change => new Date(change.date) <= currentDate)\r\n        .map(change => ({\r\n          date: new Date(change.date),\r\n          amount: change.type === 'deposit' ? change.amount : -change.amount\r\n        }));\r\n\r\n      // Calculate XIRR for different time periods\r\n      const startOfYear = new Date(currentYear, 0, 1);\r\n      const xirrYTD = (typeof startingCapital === 'number' && typeof finalCapital === 'number' && startingCapital !== 0)\r\n        ? calcXIRR(startOfYear, yearlyStartingCapital, currentDate, finalCapital, relevantChanges)\r\n        : 0;\r\n\r\n      // Calculate rolling returns only if we have the required previous months' data\r\n      let xirr1M = 0;\r\n      let xirr3M = 0;\r\n      let xirr6M = 0;\r\n      let xirr12M = 0;\r\n\r\n      // 1-month return\r\n      if (i > 0 && initialMonthlyData[i-1] && typeof initialMonthlyData[i-1].finalCapital === 'number' && typeof finalCapital === 'number') {\r\n        const prevMonth = new Date(currentYear, monthIndex - 1, 1);\r\n        xirr1M = calcXIRR(\r\n          prevMonth,\r\n          initialMonthlyData[i-1].finalCapital,\r\n          currentDate,\r\n          finalCapital,\r\n          relevantChanges.filter(c => c.date >= prevMonth)\r\n        );\r\n      }\r\n\r\n      // 3-month return\r\n      if (i >= 2 && initialMonthlyData[i-3] && typeof initialMonthlyData[i-3].finalCapital === 'number' && typeof finalCapital === 'number') {\r\n        const prev3Month = new Date(currentYear, monthIndex - 3, 1);\r\n        xirr3M = calcXIRR(\r\n          prev3Month,\r\n          initialMonthlyData[i-3].finalCapital,\r\n          currentDate,\r\n          finalCapital,\r\n          relevantChanges.filter(c => c.date >= prev3Month)\r\n        );\r\n      }\r\n\r\n      // 6-month return\r\n      if (i >= 5 && initialMonthlyData[i-6] && typeof initialMonthlyData[i-6].finalCapital === 'number' && typeof finalCapital === 'number') {\r\n        const prev6Month = new Date(currentYear, monthIndex - 6, 1);\r\n        xirr6M = calcXIRR(\r\n          prev6Month,\r\n          initialMonthlyData[i-6].finalCapital,\r\n          currentDate,\r\n          finalCapital,\r\n          relevantChanges.filter(c => c.date >= prev6Month)\r\n        );\r\n      }\r\n\r\n      // 12-month return\r\n      if (i >= 11 && initialMonthlyData[i-12] && typeof initialMonthlyData[i-12].finalCapital === 'number' && typeof finalCapital === 'number') {\r\n        const prev12Month = new Date(currentYear, monthIndex - 12, 1);\r\n        xirr12M = calcXIRR(\r\n          prev12Month,\r\n          initialMonthlyData[i-12].finalCapital,\r\n          currentDate,\r\n          finalCapital,\r\n          relevantChanges.filter(c => c.date >= prev12Month)\r\n        );\r\n      }\r\n\r\n      return {\r\n        ...row,\r\n        plPercentage: (typeof startingCapital === 'number' && typeof pl === 'number' && startingCapital !== 0)\r\n          ? (pl / startingCapital) * 100\r\n          : '-',\r\n        cagr: xirrYTD,\r\n        rollingReturn1M: xirr1M,\r\n        rollingReturn3M: xirr3M,\r\n        rollingReturn6M: xirr6M,\r\n        rollingReturn12M: xirr12M\r\n      };\r\n    });\r\n  }, safeDeps([initialMonthlyData, yearlyStartingCapital, capitalChanges, monthOrder]));\r\n\r\n  // Ensure we have valid data before rendering the table\r\n  if (!computedData || computedData.length === 0) {\r\n    return (\r\n      <div className=\"flex flex-col items-center justify-center py-16 px-4 text-center\">\r\n        <div className=\"text-default-400 mb-2\">\r\n          <Icon icon=\"lucide:calendar-x\" className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\r\n        </div>\r\n        <div className=\"text-default-500 text-lg font-medium mb-1\">\r\n          No monthly data available\r\n        </div>\r\n        <div className=\"text-default-400 text-sm\">\r\n          Add some trades to see monthly performance breakdown\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Helper to get the date string for the first day of a month/year\r\n  const getMonthDateString = (month: string, year: number) => {\r\n    const monthIndex = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"].indexOf(month);\r\n    return new Date(year, monthIndex, 1).toISOString();\r\n  };\r\n\r\n  // Helper to get all years from 2000 to current year+1\r\n  const getYearOptions = () => {\r\n    const years = [];\r\n    for (let y = 2000; y <= currentYear + 1; y++) {\r\n      years.push(y);\r\n    }\r\n    return years;\r\n  };\r\n\r\n  // Handler for saving the edited value\r\n  const handleSaveAddedWithdrawn = (rowIndex: number, month: string, year: number) => {\r\n    const value = Number(editingValue);\r\n    if (isNaN(value)) return;\r\n\r\n    // Get the month index (0-11)\r\n    const monthIndex = monthOrder.indexOf(month);\r\n    if (monthIndex === -1) return;\r\n\r\n    // Always use selectedYear for the year\r\n    year = selectedYear;\r\n\r\n    // Check if starting capital is set for this month (either manually or automatically)\r\n    const monthData = computedData[rowIndex];\r\n    const startingCapital = monthData.startingCapital;\r\n\r\n    // Allow adding/withdrawing funds regardless of starting capital value\r\n\r\n    const monthDate = new Date(year, monthIndex, 1);\r\n    const formattedDate = monthDate.toISOString();\r\n\r\n    // Find any capital change for this month (assume only one per month for this UI)\r\n    const existingChange = capitalChanges.find(change => {\r\n      const d = new Date(change.date);\r\n      return d.getFullYear() === year && d.getMonth() === monthIndex;\r\n    });\r\n\r\n    // Get the current portfolio size for this month\r\n    const currentPortfolioSize = getPortfolioSize(month, year);\r\n\r\n    if (existingChange) {\r\n      // Calculate the difference to adjust the portfolio size\r\n      const oldAmount = existingChange.type === 'deposit'\r\n        ? existingChange.amount\r\n        : -existingChange.amount;\r\n      const newAmount = value; // value can be positive or negative\r\n      const difference = newAmount - oldAmount;\r\n\r\n      // Note: Portfolio size is now calculated automatically from true portfolio logic\r\n\r\n      // Update the capital change\r\n      updateCapitalChange({\r\n        ...existingChange,\r\n        amount: Math.abs(value),\r\n        type: value >= 0 ? 'deposit' : 'withdrawal',\r\n        date: formattedDate,\r\n        description: 'Manual edit from performance table'\r\n      });\r\n    } else if (value !== 0) {\r\n      // Only add if value is not zero\r\n      // Note: Portfolio size is now calculated automatically from true portfolio logic\r\n\r\n      // Add new capital change\r\n      addCapitalChange({\r\n        amount: Math.abs(value),\r\n        type: value >= 0 ? 'deposit' : 'withdrawal',\r\n        date: formattedDate,\r\n        description: 'Manual edit from performance table'\r\n      });\r\n    } else if (value === 0 && existingChange) {\r\n      // If setting to zero and there's an existing change, remove it\r\n      // Note: Portfolio size is now calculated automatically from true portfolio logic\r\n\r\n      // Delete the existing change\r\n      deleteCapitalChange(existingChange.id);\r\n    }\r\n\r\n    setEditingCell(null);\r\n    setEditingValue(\"\");\r\n  };\r\n\r\n  const handleSaveStartingCapital = (rowIndex: number, month: string, year: number) => {\r\n    const value = parseFloat(editingValue);\r\n    if (isNaN(value) || value < 0) {\r\n      setEditingCell(null);\r\n      setEditingValue('');\r\n      return;\r\n    }\r\n\r\n    // Set monthly starting capital override\r\n    setMonthlyStartingCapitalOverride(month, year, value);\r\n\r\n    setEditingCell(null);\r\n    setEditingValue('');\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      key: 'month',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Month\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'startingCapital',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Starting Capital\r\n          <MobileTooltip content={\r\n        <div className=\"max-w-xs text-xs p-1\">\r\n          <div>Capital at the start of the month, before trades and capital changes.</div>\r\n          <div className=\"mt-2 font-semibold\">Calculation Priority:</div>\r\n          <div>1. Manual Override (if set)</div>\r\n          <div>2. January: Yearly starting capital</div>\r\n          <div>3. Other months: Previous month's final capital</div>\r\n          <div className=\"text-foreground-400 mt-2\">Click to edit or manage in Portfolio Settings</div>\r\n        </div>\r\n      } placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'addedWithdrawn',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Added/Withdrawn\r\n          <MobileTooltip\r\n            content={\r\n              <div className=\"max-w-xs text-xs p-1\">\r\n                <b>Assumption:</b><br />\r\n                For XIRR calculation, all additions and withdrawals are assumed to occur on the <b>first day of the month</b>, even if the actual cash flow happened mid-month.<br /><br />\r\n                This may slightly affect the accuracy of annualized returns if you have frequent mid-month capital changes.\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'pl',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          P/L\r\n          <Tooltip\r\n            content={\r\n              <div className=\"max-w-xs p-2\">\r\n                <div className=\"font-semibold text-sm mb-1\">\r\n                  P/L Calculation ({useCashBasis ? 'Cash Basis' : 'Accrual Basis'})\r\n                </div>\r\n                <div className=\"text-xs\">\r\n                  {useCashBasis\r\n                    ? \"P/L is attributed to the month when trades are actually exited/closed, regardless of when they were initiated.\"\r\n                    : \"P/L is attributed to the month when trades are initiated/opened, regardless of when they are closed.\"\r\n                  }\r\n                </div>\r\n                <div className=\"text-xs text-warning-600 mt-2\">\r\n                  Toggle accounting method using the switch above to see different P/L attribution.\r\n                </div>\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'plPercentage',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          % P/L\r\n          <Tooltip\r\n            content={\r\n              <div className=\"max-w-xs p-2\">\r\n                <div className=\"font-semibold text-sm mb-1\">\r\n                  P/L Percentage ({useCashBasis ? 'Cash Basis' : 'Accrual Basis'})\r\n                </div>\r\n                <div className=\"text-xs\">\r\n                  Profit or loss as a percentage of starting capital for the month (before taxes).\r\n                </div>\r\n                <div className=\"text-xs mt-2\">\r\n                  {useCashBasis\r\n                    ? \"Based on P/L from trades exited in this month.\"\r\n                    : \"Based on P/L from trades initiated in this month.\"\r\n                  }\r\n                </div>\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'finalCapital',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Final Capital\r\n          <Tooltip\r\n            content={\r\n              <div className=\"max-w-xs p-2\">\r\n                <p className=\"font-semibold mb-1\">Final Capital Calculation:</p>\r\n                <p className=\"text-sm\">Starting Capital + P/L + (Added - Withdrawn)</p>\r\n                <p className=\"text-xs mt-2 text-foreground-500\">Note: Please ensure Starting Capital is set before adding/withdrawing funds.</p>\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'cagr',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          YTD Return %\r\n          <Tooltip\r\n            content={\r\n              <div className=\"max-w-xs text-xs p-1\">\r\n                <b>Year-to-Date Return</b> calculated using XIRR (Extended Internal Rate of Return)<br /><br />\r\n                <ul className=\"list-disc pl-4\">\r\n                  <li>Accounts for the timing and size of all cash flows</li>\r\n                  <li>Includes deposits and withdrawals</li>\r\n                  <li>More accurate than simple percentage returns</li>\r\n                  <li>Annualized return from start of year to current month</li>\r\n                </ul>\r\n                <br />\r\n                <span className=\"text-foreground-400\">Uses XIRR calculation which considers the timing of all cash flows</span>\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'rollingReturn1M',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          1M Return %\r\n          <Tooltip\r\n            content={\r\n              <div className=\"max-w-xs text-xs p-1\">\r\n                <b>1-Month Return</b> calculated using XIRR<br /><br />\r\n                <ul className=\"list-disc pl-4\">\r\n                  <li>Considers all cash flows in the last month</li>\r\n                  <li>Accounts for timing of deposits/withdrawals</li>\r\n                  <li>More accurate than simple month-over-month return</li>\r\n                </ul>\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'rollingReturn3M',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          3M Return %\r\n          <Tooltip\r\n            content={\r\n              <div className=\"max-w-xs text-xs p-1\">\r\n                <b>3-Month Return</b> calculated using XIRR<br /><br />\r\n                <ul className=\"list-disc pl-4\">\r\n                  <li>Considers all cash flows in the last 3 months</li>\r\n                  <li>Accounts for timing of deposits/withdrawals</li>\r\n                  <li>Annualized return over the 3-month period</li>\r\n                </ul>\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'rollingReturn6M',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          6M Return %\r\n          <Tooltip\r\n            content={\r\n              <div className=\"max-w-xs text-xs p-1\">\r\n                <b>6-Month Return</b> calculated using XIRR<br /><br />\r\n                <ul className=\"list-disc pl-4\">\r\n                  <li>Considers all cash flows in the last 6 months</li>\r\n                  <li>Accounts for timing of deposits/withdrawals</li>\r\n                  <li>Annualized return over the 6-month period</li>\r\n                </ul>\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'rollingReturn12M',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          12M Return %\r\n          <Tooltip\r\n            content={\r\n              <div className=\"max-w-xs text-xs p-1\">\r\n                <b>12-Month Return</b> calculated using XIRR<br /><br />\r\n                <ul className=\"list-disc pl-4\">\r\n                  <li>Considers all cash flows in the last 12 months</li>\r\n                  <li>Accounts for timing of deposits/withdrawals</li>\r\n                  <li>True annual return considering all capital changes</li>\r\n                </ul>\r\n              </div>\r\n            }\r\n            placement=\"top\"\r\n          >\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </Tooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'trades',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Trades\r\n          <MobileTooltip content=\"Number of trades closed in this month.\" placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'winPercentage',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          % Win\r\n          <MobileTooltip content=\"Percentage of trades closed with a profit in this month.\" placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'avgGain',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Avg Gain\r\n          <MobileTooltip content=\"Average percentage gain for winning trades in this month.\" placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'avgLoss',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Avg Loss\r\n          <MobileTooltip content=\"Average percentage loss for losing trades in this month.\" placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'avgRR',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Avg R:R\r\n          <MobileTooltip content=\"Average reward-to-risk ratio for trades in this month.\" placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      key: 'avgHoldingDays',\r\n      label: (\r\n        <div className=\"flex items-center gap-1\">\r\n          Avg Days\r\n          <MobileTooltip content=\"Average holding period (in days) for trades closed in this month.\" placement=\"top\">\r\n            <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-pointer\" />\r\n          </MobileTooltip>\r\n        </div>\r\n      )\r\n    },\r\n  ];\r\n\r\n  // Track the previous editingCell to only update editingValue when editing a new cell\r\n  const prevEditingCell = React.useRef(editingCell);\r\n\r\n  React.useEffect(() => {\r\n    // Only run when editingCell changes to a new cell\r\n    if (\r\n      editingCell &&\r\n      editingCell.col === 'addedWithdrawn' &&\r\n      (prevEditingCell.current?.row !== editingCell.row || prevEditingCell.current?.col !== editingCell.col)\r\n    ) {\r\n      const rowIndex = editingCell.row;\r\n      const item = computedData[rowIndex];\r\n      if (!item) return;\r\n      const month = item.month;\r\n      const monthPortfolio = filteredMonthlyPortfolios.find(mp => mp.month === month);\r\n      const year = monthPortfolio ? monthPortfolio.year : selectedYear;\r\n      const existingChange = capitalChanges.find(change => {\r\n        const d = new Date(change.date);\r\n        return d.getMonth() === monthOrder.indexOf(month) && d.getFullYear() === year;\r\n      });\r\n      if (existingChange) {\r\n        const sign = existingChange.type === 'deposit' ? 1 : -1;\r\n        setEditingValue(String(existingChange.amount * sign));\r\n      } else {\r\n        setEditingValue('');\r\n      }\r\n    }\r\n\r\n    // Handle starting capital editing\r\n    if (\r\n      editingCell &&\r\n      editingCell.col === 'startingCapital' &&\r\n      (prevEditingCell.current?.row !== editingCell.row || prevEditingCell.current?.col !== editingCell.col)\r\n    ) {\r\n      const rowIndex = editingCell.row;\r\n      const item = computedData[rowIndex];\r\n      if (!item) return;\r\n      const month = item.month;\r\n\r\n      // Check if there's a monthly override for this month\r\n      const override = getMonthlyStartingCapitalOverride(month, selectedYear);\r\n      if (override !== null) {\r\n        setEditingValue(String(override));\r\n      } else {\r\n        // Use the current calculated starting capital\r\n        setEditingValue(String(item.startingCapital));\r\n      }\r\n    }\r\n\r\n    prevEditingCell.current = editingCell;\r\n  }, safeDeps([editingCell, computedData, capitalChanges, filteredMonthlyPortfolios, getMonthlyStartingCapitalOverride, selectedYear]));\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-6\">\r\n      <div className=\"bg-blue-50 dark:bg-gray-900 rounded-lg p-4 border border-blue-200 dark:border-gray-800\">\r\n        <div className=\"flex items-start gap-2\">\r\n          <Icon icon=\"lucide:info\" className=\"text-blue-500 mt-0.5 flex-shrink-0\" />\r\n          <div>\r\n            <p className=\"font-medium text-blue-800 dark:text-white\">Portfolio Management:</p>\r\n            <p className=\"text-sm text-blue-700 dark:text-gray-200\">\r\n              You can edit <span className=\"font-semibold\">Starting Capital</span> and <span className=\"font-semibold\">Added/Withdrawn</span> directly in this table, or manage them through <span className=\"font-semibold\">Portfolio Settings</span> (profile icon). Both places stay in sync automatically.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex items-center gap-3 mb-2\">\r\n        <label htmlFor=\"year-picker\" className=\"font-medium text-black dark:text-white\">Year:</label>\r\n        <select\r\n          id=\"year-picker\"\r\n          value={selectedYear}\r\n          onChange={e => setSelectedYear(Number(e.target.value))}\r\n          style={{ height: 32, borderRadius: 6, border: '1px solid #ccc', padding: '0 8px', fontSize: 16 }}\r\n        >\r\n          {getYearOptions().map(y => (\r\n            <option key={y} value={y}>{y}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"rounded-lg border border-default-200 dark:border-default-100 bg-white dark:bg-gray-900 overflow-hidden\">\r\n        <div className=\"overflow-auto max-h-[70vh]\">\r\n          <Table\r\n            aria-label=\"Monthly performance table\"\r\n            classNames={{\r\n              base: \"min-w-[1200px]\",\r\n              wrapper: \"shadow-none p-0 rounded-none\",\r\n              table: \"table-auto\",\r\n              thead: \"[&>tr]:first:shadow-none\",\r\n              th: \"bg-default-100 dark:bg-gray-950 text-foreground-600 dark:text-white text-xs font-medium uppercase border-b border-default-200 dark:border-gray-800 sticky top-0 z-20 backdrop-blur-sm\",\r\n              td: \"py-3 px-4 border-b border-default-200 dark:border-gray-800 text-foreground-800 dark:text-gray-200\",\r\n            }}\r\n            removeWrapper\r\n          >\r\n          <TableHeader columns={columns}>\r\n            {(column) => (\r\n              <TableColumn key={column.key} className=\"whitespace-nowrap\">\r\n                {column.label}\r\n              </TableColumn>\r\n            )}\r\n          </TableHeader>\r\n          <TableBody items={computedData}>\r\n            {(item) => (\r\n              <TableRow key={item.month} className=\"group hover:bg-default-50 dark:hover:bg-gray-800\">\r\n                {(columnKey) => {\r\n                  if (columnKey === 'yearPlPercentage') return null;\r\n                  const rowIndex = computedData.findIndex(d => d.month === item.month);\r\n                  const isEditing = editingCell && editingCell.row === rowIndex && editingCell.col === columnKey;\r\n                  const value = item[columnKey as keyof typeof item];\r\n                  if (columnKey === 'addedWithdrawn') {\r\n                    if (isEditing) {\r\n                      return (\r\n                        <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Input\r\n                              autoFocus\r\n                              size=\"sm\"\r\n                              variant=\"bordered\"\r\n                              type=\"number\"\r\n                              value={editingValue}\r\n                              onChange={e => setEditingValue(e.target.value)}\r\n                              onBlur={() => handleSaveAddedWithdrawn(rowIndex, item.month, selectedYear)}\r\n                              onKeyDown={e => {\r\n                                if (e.key === 'Enter') {\r\n                                  handleSaveAddedWithdrawn(rowIndex, item.month, selectedYear);\r\n                                } else if (e.key === 'Escape') {\r\n                                  setEditingCell(null);\r\n                                  setEditingValue('');\r\n                                }\r\n                              }}\r\n                              className=\"h-8 w-32 min-w-[8rem] bg-background dark:bg-gray-900 border border-default-300 dark:border-primary focus:border-primary dark:focus:border-primary text-sm text-foreground dark:text-white text-right\"\r\n                              startContent={\r\n                                <span className=\"text-foreground-500 text-sm pr-1\">₹</span>\r\n                              }\r\n                            />\r\n                          </div>\r\n                        </TableCell>\r\n                      );\r\n                    }\r\n                    const numValue = Number(value);\r\n                    return (\r\n                      <TableCell\r\n                        key={`${item.month}-${String(columnKey)}`}\r\n                        className=\"cursor-pointer rounded-md\"\r\n                        onClick={() => {\r\n                          setEditingCell({ row: rowIndex, col: columnKey });\r\n                          setEditingValue(numValue === 0 ? \"\" : String(numValue));\r\n                        }}\r\n                      >\r\n                        <div className=\"flex items-center justify-end gap-1.5\">\r\n                          <span className={numValue < 0 ? \"text-danger-600 dark:text-danger-400\" : \"text-success-600 dark:text-success-400\"}>\r\n                            {numValue < 0\r\n                              ? `Withdrawn ₹${Math.abs(numValue).toLocaleString()}`\r\n                              : `Added ₹${numValue.toLocaleString()}`}\r\n                          </span>\r\n                          <span className=\"text-foreground-400\">\r\n                            <Icon icon=\"lucide:edit-2\" className=\"h-2.5 w-2.5\" />\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'month') {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        <span className=\"font-medium text-foreground dark:text-foreground-200\">{value}</span>\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'pl' || columnKey === 'plPercentage' ||\r\n                      (typeof columnKey === 'string' && (columnKey === 'cagr' || columnKey.startsWith('rollingReturn')))) {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        <span className={`${value !== '-' && Number(value) >= 0 ? \"text-success-600 dark:text-success-400\" : value !== '-' ? \"text-danger-600 dark:text-danger-400\" : ''}`}>\r\n                          {value === '-' ? '-' : (columnKey === 'pl' ? Number(value).toLocaleString() : `${Number(value).toFixed(2)}%`)}\r\n                        </span>\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'winPercentage') {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        <div className=\"flex items-center gap-1 text-foreground dark:text-foreground-200\">\r\n                          {value === '-' ? '-' : (\r\n                            <>\r\n                              {Number(value) > 0 ? (\r\n                                <Icon icon=\"lucide:check\" className=\"text-success-600 dark:text-success-400 w-3 h-3\" />\r\n                              ) : (\r\n                                <Icon icon=\"lucide:x\" className=\"text-danger-600 dark:text-danger-400 w-3 h-3\" />\r\n                              )}\r\n                              {Number(value).toFixed(2)}%\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'avgGain') {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        {value === '-' ? '-' : (\r\n                          Number(value) > 0 ? (\r\n                            <span className=\"text-success-600 dark:text-success-400\">{Number(value).toFixed(2)}%</span>\r\n                          ) : <span className=\"text-foreground-500 dark:text-foreground-400\">-</span>\r\n                        )}\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'avgLoss') {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        {value === '-' ? '-' : (\r\n                          <span className=\"text-danger-600 dark:text-danger-400\">{Number(value).toFixed(2)}%</span>\r\n                        )}\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'avgRR') {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        <span className={`${value !== '-' && Number(value) >= 0 ? \"text-success-600 dark:text-success-400\" : value !== '-' ? \"text-danger-600 dark:text-danger-400\" : ''}`}>\r\n                          {value === '-' ? '-' : Number(value).toFixed(2)}\r\n                        </span>\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'startingCapital') {\r\n                    const override = getMonthlyStartingCapitalOverride(item.month, selectedYear);\r\n                    const hasCustomSize = override !== null;\r\n\r\n                    if (isEditing) {\r\n                      return (\r\n                        <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Input\r\n                              autoFocus\r\n                              size=\"sm\"\r\n                              variant=\"bordered\"\r\n                              value={editingValue}\r\n                              onChange={e => setEditingValue(e.target.value)}\r\n                              onBlur={() => handleSaveStartingCapital(rowIndex, item.month, selectedYear)}\r\n                              onKeyDown={e => {\r\n                                if (e.key === 'Enter') {\r\n                                  handleSaveStartingCapital(rowIndex, item.month, selectedYear);\r\n                                } else if (e.key === 'Escape') {\r\n                                  setEditingCell(null);\r\n                                  setEditingValue(\"\");\r\n                                }\r\n                              }}\r\n                              classNames={{\r\n                                inputWrapper: \"h-8 min-h-0 bg-background dark:bg-gray-900 border-default-300 dark:border-primary focus-within:border-primary dark:focus-within:border-primary\",\r\n                                input: \"text-sm text-foreground dark:text-white text-right placeholder:text-gray-400 dark:placeholder:text-gray-500\"\r\n                              }}\r\n                              style={{ width: 120 }}\r\n                              startContent={\r\n                                <span className=\"text-foreground-500 text-sm pr-1\">₹</span>\r\n                              }\r\n                            />\r\n                            <MobileTooltip content=\"Click to save starting capital\" placement=\"top\">\r\n                              <Button\r\n                                isIconOnly\r\n                                size=\"sm\"\r\n                                variant=\"light\"\r\n                                onPress={() => handleSaveStartingCapital(rowIndex, item.month, selectedYear)}\r\n                              >\r\n                                <Icon icon=\"lucide:check\" className=\"h-4 w-4 text-success-500\" />\r\n                              </Button>\r\n                            </MobileTooltip>\r\n                          </div>\r\n                        </TableCell>\r\n                      );\r\n                    }\r\n\r\n                    let tooltipDerivation = '';\r\n\r\n                    if (hasCustomSize) {\r\n                        tooltipDerivation = `Manually overridden starting capital for ${item.month} ${selectedYear}.`;\r\n                    } else if (item.month === 'Jan') {\r\n                        tooltipDerivation = `Derived from Yearly Starting Capital: ₹${yearlyStartingCapital.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\r\n                    } else {\r\n                        const prevMonthIndex = monthOrder.indexOf(item.month) - 1;\r\n                        if (prevMonthIndex >= 0 && computedData[prevMonthIndex]) {\r\n                            const prevMonthItem = computedData[prevMonthIndex];\r\n                            const prevMonthFinalCapital = typeof prevMonthItem.finalCapital === 'number' ? Number(prevMonthItem.finalCapital) : null;\r\n                            const currentMonthAddedWithdrawn = typeof item.addedWithdrawn === 'number' ? Number(item.addedWithdrawn) : null;\r\n\r\n                            if (prevMonthFinalCapital !== null && currentMonthAddedWithdrawn !== null) {\r\n                                tooltipDerivation = `Derived from: ₹${prevMonthFinalCapital.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })} (Prev Month Final Capital) + ₹${currentMonthAddedWithdrawn.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })} (Current Month Added/Withdrawn) = ₹${Number(item.startingCapital).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\r\n                            } else if (prevMonthFinalCapital !== null) {\r\n                                tooltipDerivation = `Derived from: ₹${prevMonthFinalCapital.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })} (Previous Month Final Capital)`;\r\n                            } else {\r\n                                tooltipDerivation = `Calculation details unavailable.`;\r\n                            }\r\n                        } else {\r\n                            tooltipDerivation = `Calculation details unavailable for previous month.`;\r\n                        }\r\n                    }\r\n\r\n                    return (\r\n                      <TableCell\r\n                        key={`${item.month}-${String(columnKey)}`}\r\n                        className=\"cursor-pointer group rounded-md\"\r\n                        onClick={() => {\r\n                          setEditingCell({ row: rowIndex, col: columnKey });\r\n                          setEditingValue(value === '-' ? '' : String(value));\r\n                        }}\r\n                      >\r\n                        <div className=\"flex items-center justify-end gap-1.5\">\r\n                          <span className=\"text-foreground-500 text-sm\">₹</span>\r\n                          <span className={`${hasCustomSize ? 'font-medium text-primary-600 dark:text-primary-400' : 'text-foreground dark:text-foreground-200'}`}>\r\n                            {value === '-' ? '-' : Number(value).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\r\n                          </span>\r\n                          <MobileTooltip\r\n                            content={<div className=\"max-w-xs text-xs p-1\">{tooltipDerivation}</div>}\r\n                            placement=\"top\"\r\n                            radius=\"sm\"\r\n                            shadow=\"md\"\r\n                            classNames={{ content: \"bg-content1 border border-divider z-50 max-w-xs\" }}\r\n                          >\r\n                            <Icon icon=\"lucide:info\" className=\"h-2.5 w-2.5 text-foreground-400 cursor-help\" />\r\n                          </MobileTooltip>\r\n                          <span className=\"text-foreground-400\">\r\n                            <Icon icon=\"lucide:edit-2\" className=\"h-2.5 w-2.5\" />\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'finalCapital') {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        <span className=\"text-foreground dark:text-foreground-200\">{value === '-' ? '-' : Number(value).toLocaleString()}</span>\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'avgHoldingDays') {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        {value === '-' ? '-' : Number(value).toFixed(2)}\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  if (columnKey === 'trades') {\r\n                    return (\r\n                      <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                        {value === '-' ? '-' : value}\r\n                      </TableCell>\r\n                    );\r\n                  }\r\n\r\n                  return (\r\n                    <TableCell key={`${item.month}-${String(columnKey)}`}>\r\n                      <span className=\"text-foreground dark:text-foreground-200\">{value}</span>\r\n                    </TableCell>\r\n                  );\r\n                }}\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["MonthlyPerformanceTable","trades","useTrades","accountingMethod","useAccountingMethod","filter","useGlobalFilter","useCashBasis","portfolioSize","getPortfolioSize","getAllMonthlyTruePortfolios","setMonthlyStartingCapitalOverride","getMonthlyStartingCapitalOverride","capitalChanges","addCapitalChange","updateCapitalChange","deleteCapitalChange","useTruePortfolioWithTrades","monthlyPortfolios","yearlyStartingCapital","setYearlyStartingCapitalState","React","useState","editingCell","setEditingCell","editingValue","setEditingValue","currentYear","Date","getFullYear","selectedYear","setSelectedYear","monthOrder","filteredTrades","useMemo","trade","date","monthlyMap","map","forEach","month","monthTrades","getTradesForMonth","length","firstTradeDate","getTradeDateForAccounting","sort","a","b","dateA","dateB","getTime","filteredMonthlyPortfolios","mp","year","initialMonthlyData","i","monthData","tradesCount","tradesWithPL","accountingPL","calculateTradePL","winTrades","t","lossTrades","winPercentage","avgGain","reduce","sum","stockMove","avgLoss","avgRR","Math","abs","avgHoldingDays","holdingDays","monthPortfolio","find","startingCapital","pl","finalCapital","monthCapitalChanges","change","changeDate","getMonth","indexOf","netAddedWithdrawn","type","amount","adjustedStartingCapital","hasMonthlyPL","shouldShowPL","addedWithdrawn","plPercentage","yearPlPercentage","biggestImpact","smallestLoss","cagr","rollingReturn1M","rollingReturn3M","rollingReturn6M","rollingReturn12M","useEffect","computedData","row","monthIndex","currentDate","relevantChanges","startOfYear","xirrYTD","calcXIRR","xirr1M","xirr3M","xirr6M","xirr12M","prevMonth","c","prev3Month","prev6Month","prev12Month","className","children","_jsx","Icon","icon","handleSaveAddedWithdrawn","rowIndex","value","Number","isNaN","formattedDate","toISOString","existingChange","d","description","id","handleSaveStartingCapital","parseFloat","columns","key","label","MobileTooltip","content","placement","Tooltip","_jsxs","prevEditingCell","useRef","col","current","item","sign","String","override","htmlFor","onChange","e","target","style","height","borderRadius","border","padding","fontSize","getYearOptions","years","y","push","Table","classNames","base","wrapper","table","thead","th","td","removeWrapper","TableHeader","TableColumn","column","TableBody","items","TableRow","columnKey","findIndex","isEditing","TableCell","Input","autoFocus","size","variant","onBlur","onKeyDown","startContent","numValue","onClick","toLocaleString","startsWith","toFixed","_Fragment","hasCustomSize","inputWrapper","input","width","Button","isIconOnly","onPress","tooltipDerivation","undefined","minimumFractionDigits","maximumFractionDigits","prevMonthIndex","prevMonthItem","prevMonthFinalCapital","currentMonthAddedWithdrawn","radius","shadow"],"mappings":"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"}