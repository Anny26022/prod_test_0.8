import{S as e,D as t,J as a}from"./index-CCg2rRgv.js";const r=()=>Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15),o=async(t,a,r)=>{try{const o=await e.getMiscData(t);return null==o?a:r?r(o):o}catch(o){return a}},s=async(t,a,r)=>{try{const o=r?r(a):a;return await e.saveMiscData(t,o)}catch(o){return!1}},n=[];for(let I=0;I<256;++I)n.push((I+256).toString(16).slice(1));let i;const l=new Uint8Array(16);const c={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function d(e,t,a){var r;if(c.randomUUID&&!e)return c.randomUUID();const o=(e=e||{}).random??(null==(r=e.rng)?void 0:r.call(e))??function(){if(!i){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");i=crypto.getRandomValues.bind(crypto)}return i(l)}();if(o.length<16)throw new Error("Random bytes length must be >= 16");return o[6]=15&o[6]|64,o[8]=63&o[8]|128,function(e,t=0){return(n[e[t+0]]+n[e[t+1]]+n[e[t+2]]+n[e[t+3]]+"-"+n[e[t+4]]+n[e[t+5]]+"-"+n[e[t+6]]+n[e[t+7]]+"-"+n[e[t+8]]+n[e[t+9]]+"-"+n[e[t+10]]+n[e[t+11]]+n[e[t+12]]+n[e[t+13]]+n[e[t+14]]+n[e[t+15]]).toLowerCase()}(o)}const g={MAX_FILE_SIZE:10485760,INLINE_THRESHOLD:0,COMPRESSION_QUALITY:.7,WEBP_QUALITY:.65,HIGH_COMPRESSION_QUALITY:.6,ULTRA_COMPRESSION_QUALITY:.5,MAX_DIMENSION:1920,LARGE_FILE_MAX_DIMENSION:1600,HUGE_FILE_MAX_DIMENSION:1280,AGGRESSIVE_COMPRESSION_THRESHOLD:307200,HIGH_COMPRESSION_THRESHOLD:1048576,ULTRA_COMPRESSION_THRESHOLD:3145728,ALLOWED_TYPES:["image/png","image/jpeg","image/webp"],ALLOWED_EXTENSIONS:[".png",".jpg",".jpeg",".webp"],PROGRESSIVE_JPEG:!0,TARGET_SIZE_SMALL:102400,TARGET_SIZE_MEDIUM:204800,TARGET_SIZE_LARGE:409600};function m(e){var t;const a={isValid:!0,warnings:[]};if(e.size>g.MAX_FILE_SIZE)return a.isValid=!1,a.error=`File size (${f(e.size)}) exceeds maximum allowed size (${f(g.MAX_FILE_SIZE)})`,a;if(!g.ALLOWED_TYPES.includes(e.type))return a.isValid=!1,a.error=`File type "${e.type}" is not supported. Allowed types: ${g.ALLOWED_TYPES.join(", ")}`,a;const r=e.name.toLowerCase().substring(e.name.lastIndexOf("."));return g.ALLOWED_EXTENSIONS.includes(r)?(e.size>g.INLINE_THRESHOLD&&(null==(t=a.warnings)||t.push(`Large file (${f(e.size)}) will be stored separately for better performance`)),a):(a.isValid=!1,a.error=`File extension "${r}" is not supported. Allowed extensions: ${g.ALLOWED_EXTENSIONS.join(", ")}`,a)}function p(){const e=document.createElement("canvas");return e.width=1,e.height=1,0===e.toDataURL("image/webp").indexOf("data:image/webp")}async function u(e,t=!0){const a=m(e);if(!a.isValid)throw new Error(a.error);let o=e,s=!1,n=e.size;if(!t||"image/webp"===e.type&&e.size<51200)console.log(`⏭️ Skipping compression for small ${e.type} file: ${f(e.size)}`);else try{console.log(`🔄 Starting compression for ${f(e.size)} ${e.type} image...`);const t=await async function(e,t=g.MAX_DIMENSION,a){return new Promise((r,o)=>{const s=document.createElement("canvas"),n=s.getContext("2d"),i=new Image;i.onload=()=>{try{let l,c,{width:d,height:m}=i,u=t;if(e.size>g.ULTRA_COMPRESSION_THRESHOLD?u=Math.min(t,g.HUGE_FILE_MAX_DIMENSION):e.size>g.HIGH_COMPRESSION_THRESHOLD&&(u=Math.min(t,g.LARGE_FILE_MAX_DIMENSION)),d>u||m>u){const t=Math.min(u/d,u/m);d=Math.round(d*t),m=Math.round(m*t),console.log(`📐 Resizing image: ${i.width}x${i.height} → ${d}x${m} (${u}px limit for ${f(e.size)} file)`)}s.width=d,s.height=m,n&&(n.imageSmoothingEnabled=!0,n.imageSmoothingQuality="high",n.drawImage(i,0,0,d,m));const h=e.size>g.ULTRA_COMPRESSION_THRESHOLD,b=e.size>g.HIGH_COMPRESSION_THRESHOLD,y=e.size>g.AGGRESSIVE_COMPRESSION_THRESHOLD;"image/png"!==e.type||function(e,t,a){if(!e)return!1;try{const r=e.getImageData(0,0,t,a).data;for(let e=3;e<r.length;e+=4)if(r[e]<255)return!0;return!1}catch{return!0}}(n,d,m)?"image/png"===e.type?p()?(l="image/webp",c=h?.4:b?.5:g.WEBP_QUALITY):(l="image/png",c=1):p()?(l="image/webp",void 0!==a||(c=h?.4:b?.5:g.WEBP_QUALITY)):(l="image/jpeg",void 0!==a||(c=h?g.ULTRA_COMPRESSION_QUALITY:b?g.HIGH_COMPRESSION_QUALITY:y?g.COMPRESSION_QUALITY:.8)):(l="image/jpeg",void 0!==a||(c=h?g.ULTRA_COMPRESSION_QUALITY:b?g.HIGH_COMPRESSION_QUALITY:y?g.COMPRESSION_QUALITY:.8));const I=(t,a=1)=>{s.toBlob(s=>{if(!s)return void o(new Error("Failed to compress image"));const n=new File([s],e.name,{type:l,lastModified:Date.now()});let i;if(i=e.size>g.ULTRA_COMPRESSION_THRESHOLD?g.TARGET_SIZE_LARGE:e.size>g.HIGH_COMPRESSION_THRESHOLD?g.TARGET_SIZE_MEDIUM:g.TARGET_SIZE_SMALL,n.size>i&&t>.3&&a<4&&"image/png"!==l){const e=Math.max(.3,t-.15);return console.log(`🔄 File still ${f(n.size)} (target: ${f(i)}), trying quality ${e.toFixed(2)} (attempt ${a+1})`),void I(e,a+1)}const c=e.size/n.size;console.log(`✅ Compression complete: ${f(e.size)} → ${f(n.size)} (${c.toFixed(2)}x) [${l}] quality: ${t.toFixed(2)}`),r({compressedFile:n,originalSize:e.size,compressedSize:n.size,compressionRatio:c,outputFormat:l})},l,t)};I(c)}catch(l){o(l)}},i.onerror=()=>o(new Error("Failed to load image")),i.src=URL.createObjectURL(e)})}(e);t.compressedSize<e.size?(o=t.compressedFile,s=!0,console.log(`📸 Image optimized: ${f(n)} → ${f(o.size)} (${t.compressionRatio.toFixed(2)}x) [${t.outputFormat}]`)):console.log(`📸 Original file is already optimal: ${f(e.size)}`)}catch(l){console.warn("⚠️ Image compression failed, using original:",l)}const i=await async function(e){return new Promise((t,a)=>{const r=new Image;r.onload=()=>{t({width:r.naturalWidth,height:r.naturalHeight}),URL.revokeObjectURL(r.src)},r.onerror=()=>a(new Error("Failed to load image")),r.src=URL.createObjectURL(e)})}(o);return{chartImage:{id:r(),filename:e.name,mimeType:o.type,size:o.size,uploadedAt:new Date,storage:"blob",dimensions:i,compressed:s,originalSize:s?n:void 0,blobId:d()},processedFile:o}}function f(e){if(0===e)return"0 Bytes";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["Bytes","KB","MB","GB"][t]}function h(e){if(!e.compressed||!e.originalSize)return{isCompressed:!1};const t=e.originalSize/e.size,a=e.originalSize-e.size,r=(a/e.originalSize*100).toFixed(0);return{isCompressed:!0,originalSize:e.originalSize,compressionRatio:t,savedSpace:a,compressionText:`${r}% smaller (${f(a)} saved)`}}class b{static ensureValidBlobId(e){return/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)?e:(console.log(`🔄 Converting non-UUID blob ID to UUID: ${e} -> generating new UUID`),d())}static async testBlobFunctionality(e){console.log("🧪 Testing blob functionality...");const t=new Blob([e],{type:e.type});console.log(`✅ Test 1 - Blob created: size=${t.size}, type=${t.type}`);const a=URL.createObjectURL(t);console.log(`✅ Test 2 - Object URL created: ${a}`);const r=new Image;r.onload=()=>{console.log("✅ Test 3 - Image loads successfully from blob URL"),URL.revokeObjectURL(a)},r.onerror=e=>{console.error("❌ Test 3 - Image failed to load from blob URL:",e),URL.revokeObjectURL(a)},r.src=a}static async debugIndexedDBContents(){var e,a;try{console.log("🔍 Debugging IndexedDB contents...");const o=await t.getAllChartImageBlobs();console.log(`📦 Found ${o.length} chart image blobs in IndexedDB`);for(const t of o)if(console.log(`🔍 Blob: ${t.filename}`),console.log(`  - ID: ${t.id}`),console.log(`  - Trade ID: ${t.tradeId}`),console.log(`  - Type: ${t.imageType}`),console.log(`  - Size: ${t.size} bytes`),console.log(`  - MIME: ${t.mimeType}`),console.log(`  - Data type: ${null==(e=t.data)?void 0:e.constructor.name}`),console.log(`  - Data size: ${null==(a=t.data)?void 0:a.size} bytes`),console.log(`  - Compressed: ${t.compressed}`),t.data&&t.data instanceof Blob)try{const e=URL.createObjectURL(t.data);console.log(`  - Object URL: ${e.substring(0,50)}...`),URL.revokeObjectURL(e)}catch(r){console.error("  - Failed to create object URL:",r)}else console.error("  - Invalid blob data!")}catch(r){console.error("❌ Failed to debug IndexedDB contents:",r)}}static async attachChartImage(t,r,o,s=!0,n=!0){try{console.log(`📸 [${r.toUpperCase()}] Attaching chart image to trade ${t}: ${o.name} (${o.size} bytes)`);const{chartImage:l,processedFile:c}=await u(o,s),d=await new Promise((e,t)=>{const a=new FileReader;a.onload=()=>{if("string"==typeof a.result){const t=a.result.split(",")[1];e(t)}else t(new Error("Failed to convert file to base64"))},a.onerror=()=>t(new Error("Failed to read file")),a.readAsDataURL(c)}),g="new"===t||t.startsWith("temp_");if(console.log(`🔍 [${r.toUpperCase()}] Upload parameters:`,{tradeId:t,allowTemporary:n,isTemporaryUpload:g,shouldCreateTemporary:g&&n}),g&&n)return console.log(`📦 [${r.toUpperCase()}] Creating temporary chart image for new trade`),{success:!0,chartImage:l,isTemporary:!0};if(!(await a.isAuthenticated()))return{success:!1,error:"User must be authenticated to upload chart images"};const m=await e.getTrade(t);if(!m){if(n){console.log(`📦 [${r.toUpperCase()}] Trade not found in cloud storage, creating temporary chart image`);const e={...l,dataUrl:`data:${l.mimeType};base64,${d}`,isTemporary:!0};return console.log(`📷 [${r.toUpperCase()}] Temporary chart created with dataUrl for preview: ${l.filename}`),{success:!0,chartImage:e,isTemporary:!0}}return{success:!1,error:"Trade not found in cloud storage"}}let p;if(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(t))p=t;else{const e=t.split("").reduce((e,t)=>(e=(e<<5)-e+t.charCodeAt(0))&e,0),a=Math.abs(e).toString(16).padStart(8,"0");p=`${a.slice(0,8)}-${a.slice(0,4)}-4${a.slice(1,4)}-8${a.slice(0,3)}-${a.slice(0,12).padEnd(12,"0")}`}console.log(`🔍 [${r.toUpperCase()}] Converted trade ID: ${t} → ${p}`),console.log(`🔍 [${r.toUpperCase()}] Verifying trade exists in Supabase with UUID: ${p}`);const f=await e.getTradeFromSupabaseOnly(p);if(!f){if(n){console.log(`📦 [${r.toUpperCase()}] Trade not found in Supabase trades table, creating temporary chart image`);const e={...l,dataUrl:`data:${l.mimeType};base64,${d}`,isTemporary:!0};return console.log(`📷 [${r.toUpperCase()}] Temporary chart created with dataUrl for preview: ${l.filename}`),{success:!0,chartImage:e,isTemporary:!0}}return{success:!1,error:"Trade not found in Supabase trades table"}}console.log(`✅ [${r.toUpperCase()}] Trade verified in Supabase:`,f.name||f.id);try{if(!(await e.saveTrade(m)))return{success:!1,error:"Failed to save trade to cloud storage"}}catch(i){return{success:!1,error:"Failed to save trade to cloud storage"}}const h={id:l.blobId,trade_id:p,image_type:r,filename:l.filename,mime_type:l.mimeType,size_bytes:l.size,data:d,uploaded_at:l.uploadedAt.toISOString(),compressed:l.compressed||!1,original_size:l.originalSize};console.log(`🔍 [${r.toUpperCase()}] Supabase blob data:`,{id:h.id,trade_id:h.trade_id,image_type:h.image_type,filename:h.filename,size_bytes:h.size_bytes,dataLength:d.length});if(!(await e.saveChartImageBlob(h)))return{success:!1,error:"Failed to save image to cloud storage"};console.log(`✅ [${r.toUpperCase()}] Chart image attached successfully: ${l.storage} storage, ${l.size} bytes`),console.log(`🧪 [${r.toUpperCase()}] Testing immediate retrieval...`),console.log(`🔍 [${r.toUpperCase()}] Chart image blob ID for retrieval: ${l.blobId}`),console.log(`🔍 [${r.toUpperCase()}] Chart image storage type: ${l.storage}`),await new Promise(e=>setTimeout(e,1e3)),console.log(`🧪 [${r.toUpperCase()}] Testing direct Supabase retrieval...`);const y=await e.getChartImageBlob(l.blobId);y?console.log(`✅ [${r.toUpperCase()}] Direct Supabase retrieval successful: ${y.filename}`):console.error(`❌ [${r.toUpperCase()}] Direct Supabase retrieval failed!`);const I=await b.getChartImageDataUrl(l);return I?console.log(`✅ [${r.toUpperCase()}] Service retrieval successful: ${I.substring(0,50)}...`):(console.error(`❌ [${r.toUpperCase()}] Service retrieval failed!`),console.error(`❌ [${r.toUpperCase()}] Blob ID mismatch? Saved: ${h.id}, Retrieving: ${l.blobId}`)),console.log(`🔍 [${r.toUpperCase()}] Checking for cleanup processes...`),setTimeout(async()=>{const t=await e.getChartImageBlob(l.blobId);t?console.log(`✅ [${r.toUpperCase()}] Image still exists after 5 seconds: ${t.filename}`):console.error(`❌ [${r.toUpperCase()}] Image was deleted within 5 seconds! Cleanup process detected.`)},5e3),{success:!0,chartImage:l,isTemporary:!1}}catch(l){return console.error("❌ Failed to attach chart image:",l),{success:!1,error:l instanceof Error?l.message:"Unknown error"}}}static async saveTemporaryChartImages(e,t){try{if(!t)return{success:!0};console.log(`💾 [TEMP_SAVE] Saving temporary chart images for trade ${e}`);if(!(await a.isAuthenticated()))return{success:!1,error:"User must be authenticated to save chart images"};if(t.beforeEntry){const a=await this.saveTemporaryChartImage(e,"beforeEntry",t.beforeEntry);if(!a.success)return a}if(t.afterExit){const a=await this.saveTemporaryChartImage(e,"afterExit",t.afterExit);if(!a.success)return a}return console.log(`✅ [TEMP_SAVE] All temporary chart images saved successfully for trade ${e}`),{success:!0}}catch(r){return console.error("❌ Failed to save temporary chart images:",r),{success:!1,error:r instanceof Error?r.message:"Unknown error"}}}static async saveTemporaryChartImage(t,a,r){try{if("blob"===r.storage&&r.blobId&&!r.isTemporary)return console.log(`⏭️ [TEMP_SAVE] Chart image already saved to Supabase: ${r.filename}`),{success:!0};let o;if(console.log(`💾 [TEMP_SAVE] Saving ${a} chart image: ${r.filename}`),!r.data)return console.error(`❌ [TEMP_SAVE] No data found for chart image: ${r.filename}`),{success:!1,error:"No image data found"};o=r.data.replace(/^data:image\/[a-z]+;base64,/,"");let s;if(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(t))s=t;else{const e=t.split("").reduce((e,t)=>(e=(e<<5)-e+t.charCodeAt(0))&e,0),a=Math.abs(e).toString(16).padStart(8,"0");s=`${a.slice(0,8)}-${a.slice(0,4)}-4${a.slice(1,4)}-8${a.slice(0,3)}-${a.slice(0,12).padEnd(12,"0")}`}const n={id:r.blobId||r.id,trade_id:s,image_type:a,filename:r.filename,mime_type:r.mimeType,size_bytes:r.size,data:o,uploaded_at:r.uploadedAt.toISOString(),compressed:r.compressed||!1,original_size:r.originalSize};return await e.saveChartImageBlob(n)?(console.log(`✅ [TEMP_SAVE] Chart image saved to Supabase: ${r.filename}`),{success:!0}):{success:!1,error:"Failed to save image to cloud storage"}}catch(o){return console.error("❌ [TEMP_SAVE] Failed to save temporary chart image:",o),{success:!1,error:o instanceof Error?o.message:"Unknown error"}}}static async getChartImageDataUrl(t){var r,o,s;try{if("inline"===t.storage&&t.data)return function(e){return"inline"===e.storage&&e.data?`data:${e.mimeType};base64,${e.data}`:null}(t);if(t.blobId){if(!(await a.isAuthenticated()))return console.warn("🔐 User not authenticated, cannot load chart image from Supabase"),null;try{const a=await e.getChartImageBlob(t.blobId);if(!a)return console.warn(`📷 Chart image blob not found in Supabase: ${t.blobId}`),null;try{let e;if(console.log("🔍 [RETRIEVAL] Supabase data type:",typeof a.data),console.log("🔍 [RETRIEVAL] Supabase data constructor:",null==(o=null==(r=a.data)?void 0:r.constructor)?void 0:o.name),console.log("🔍 [RETRIEVAL] Is Array:",Array.isArray(a.data)),console.log("🔍 [RETRIEVAL] Data length:",null==(s=a.data)?void 0:s.length),console.log("🔍 [RETRIEVAL] First 10 bytes:",Array.isArray(a.data)?a.data.slice(0,10):"N/A"),"string"==typeof a.data&&console.log("🔍 [RETRIEVAL] String data sample:",a.data.substring(0,100)),a.data instanceof Uint8Array)console.log("✅ [RETRIEVAL] Using Uint8Array directly"),e=a.data;else if(Array.isArray(a.data))console.log("✅ [RETRIEVAL] Converting array to Uint8Array"),e=new Uint8Array(a.data);else{if("string"!=typeof a.data)throw new Error("Unsupported data format from Supabase: "+typeof a.data);if(console.log(`⚠️ [RETRIEVAL] String data detected, length: ${a.data.length}`),console.log(`🔍 [RETRIEVAL] First 50 chars: ${a.data.substring(0,50)}`),a.data.startsWith("\\x")){console.log("✅ [RETRIEVAL] Converting hex string to bytes");const t=a.data.substring(2);let r="";for(let e=0;e<t.length;e+=2){const a=t.substr(e,2);r+=String.fromCharCode(parseInt(a,16))}if(r.startsWith("{")||r.startsWith("["))try{const t=JSON.parse(r);if(!(Array.isArray(t)||"object"==typeof t&&null!==t))throw new Error("Parsed data is not an array or object");{const a=Array.isArray(t)?t:Object.values(t);e=new Uint8Array(a)}}catch(n){e=new Uint8Array(r.length);for(let t=0;t<r.length;t++)e[t]=r.charCodeAt(t)}else{e=new Uint8Array(r.length);for(let t=0;t<r.length;t++)e[t]=r.charCodeAt(t)}}else try{const t=JSON.parse(a.data);if(!(Array.isArray(t)||"object"==typeof t&&null!==t))throw new Error("Parsed data is not an array or object");{const a=Array.isArray(t)?t:Object.values(t);e=new Uint8Array(a)}}catch(n){try{const t=atob(a.data);e=new Uint8Array(t.length);for(let a=0;a<t.length;a++)e[a]=t.charCodeAt(a)}catch(i){e=new Uint8Array(a.data.length);for(let t=0;t<a.data.length;t++)e[t]=a.data.charCodeAt(t)}}}const t=new Blob([e],{type:a.mime_type});if(!t||0===t.size)return null;let l="";const c=8192;for(let a=0;a<e.length;a+=c){const t=e.slice(a,a+c);l+=String.fromCharCode.apply(null,Array.from(t))}const d=btoa(l);return`data:${a.mime_type};base64,${d}`}catch(l){return null}}catch(c){return console.error("❌ Error loading chart image from Supabase:",c),null}}return null}catch(c){return null}}static async deleteChartImage(t,r,o){try{if("blob"===o.storage&&o.blobId){await a.isAuthenticated()&&await e.deleteChartImageBlob(o.blobId)}return!0}catch(s){return!1}}static async deleteTradeChartImages(e){try{return await t.deleteTradeChartImageBlobs(e),!0}catch(a){return!1}}static async getStorageStats(){try{const e=await t.getAllChartImageBlobs(),a=e.reduce((e,t)=>e+t.size,0);return{totalImages:e.length,totalSize:a,inlineImages:0,inlineSize:0,blobImages:e.length,blobSize:a}}catch(e){return{totalImages:0,totalSize:0,inlineImages:0,inlineSize:0,blobImages:0,blobSize:0}}}static async cleanupOrphanedBlobs(){try{if(!(await a.isAuthenticated()))return{cleaned:0,errors:0};const[t,r]=await Promise.all([e.getAllChartImageBlobs(),e.getAllTrades()]),o=new Set;for(const e of r){o.add(e.id);const t=this.convertTradeIdToUUID(e.id);t!==e.id&&o.add(t)}let s=0,n=0;for(const e of t)o.has(e.trade_id);return{cleaned:s,errors:n}}catch(t){return{cleaned:0,errors:1}}}static convertTradeIdToUUID(e){if(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(e))return e;const t=e.split("").reduce((e,t)=>(e=(e<<5)-e+t.charCodeAt(0))&e,0),a=Math.abs(t).toString(16).padStart(8,"0");return`${a.slice(0,8)}-${a.slice(0,4)}-4${a.slice(1,4)}-8${a.slice(0,3)}-${a.slice(0,12).padEnd(12,"0")}`}static async cleanupOrphanedAttachments(){var t,r;try{if(!(await a.isAuthenticated()))return{cleaned:0,errors:0};const[o,s]=await Promise.all([e.getAllTrades(),e.getAllChartImageBlobs()]),n=new Set(s.map(e=>e.id));let i=0,l=0;for(const a of o){if(!a.chartAttachments)continue;let o=!1;const s={...a.chartAttachments};if(s.beforeEntry){const e=s.beforeEntry;"blob"===e.storage&&e.blobId&&!n.has(e.blobId)&&(delete s.beforeEntry,o=!0)}if(s.afterExit){const e=s.afterExit;"blob"===e.storage&&e.blobId&&!n.has(e.blobId)&&(delete s.afterExit,o=!0)}if(o){const o=s.beforeEntry||s.afterExit,n={...a,chartAttachments:o?{...s,metadata:{...s.metadata,updatedAt:new Date,totalSize:((null==(t=s.beforeEntry)?void 0:t.size)||0)+((null==(r=s.afterExit)?void 0:r.size)||0)}}:void 0};await e.saveTrade(n)?i++:l++}}return{cleaned:i,errors:l}}catch(o){return{cleaned:0,errors:1}}}static async cleanupAllOrphanedData(){try{const e=await this.cleanupOrphanedBlobs(),t=await this.cleanupOrphanedAttachments(),a=e.errors+t.errors;return{blobsCleaned:e.cleaned,attachmentsCleaned:t.cleaned,errors:a}}catch(e){return{blobsCleaned:0,attachmentsCleaned:0,errors:1}}}static validateChartAttachments(e){return!(!e||"object"!=typeof e)&&(!(e.beforeEntry&&!this.validateChartImage(e.beforeEntry))&&!(e.afterExit&&!this.validateChartImage(e.afterExit)))}static validateChartImage(e){return e&&"object"==typeof e&&"string"==typeof e.id&&"string"==typeof e.filename&&"string"==typeof e.mimeType&&"number"==typeof e.size&&e.uploadedAt instanceof Date&&("inline"===e.storage||"blob"===e.storage)&&g.ALLOWED_TYPES.includes(e.mimeType)}}const y=Object.freeze(Object.defineProperty({__proto__:null,ChartImageService:b},Symbol.toStringTag,{value:"Module"}));export{b as C,g as a,r as b,o as c,y as d,f,h as g,s,m as v};
//# sourceMappingURL=chartImageService-D0un2IL8.js.map
