{"version":3,"file":"top-performers-DOkiAECZ.js","sources":["../../src/components/analytics/top-performers.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Tooltip,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n  Button\n} from \"@heroui/react\";\nimport { Icon } from \"@iconify/react\";\nimport { motion } from \"framer-motion\";\nimport { Trade } from \"../../types/trade\";\nimport { calcWeightedRewardRisk } from '../../utils/tradeCalculations';\nimport { metricVariants } from \"../../utils/animations\";\nimport { useAccountingCalculations, useAccountingMethodDisplay } from \"../../hooks/use-accounting-calculations\";\nimport { useGlobalFilter } from \"../../context/GlobalFilterContext\";\nimport { useAccountingMethod } from \"../../context/AccountingMethodContext\";\nimport { isTradeInGlobalFilter } from \"../../utils/dateFilterUtils\";\n\ninterface TopPerformerProps {\n  label: string;\n  value: string | number;\n  stock?: string;\n  date?: string;\n  isPercentage?: boolean;\n  isPositive?: boolean;\n  isNegative?: boolean;\n  index?: number;\n}\n\n// Format a date string to a readable format\nfunction formatDate(dateString: string) {\n  if (!dateString) return \"-\";\n  try {\n    const d = new Date(dateString);\n    return d.toLocaleDateString(\"en-IN\", {\n      day: \"numeric\",\n      month: \"numeric\",\n      year: \"numeric\"\n    });\n  } catch {\n    return dateString;\n  }\n}\n\nconst TopPerformer: React.FC<TopPerformerProps> = ({\n  label,\n  value,\n  stock,\n  date,\n  isPercentage,\n  isPositive,\n  isNegative,\n  index = 0\n}) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: index * 0.1 }}\n    >\n      <motion.div\n        className=\"relative flex flex-col gap-2 p-3 bg-content2 dark:bg-gray-900 border border-foreground-200/10 dark:border-gray-800 rounded-lg\"\n        variants={metricVariants}\n        whileHover={{ x: 4 }}\n        transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium text-foreground-700 dark:text-gray-300\">\n              {label}\n            </span>\n          </div>\n          <motion.div\n            className={`font-semibold text-sm ${\n              isPositive ? 'text-success-600 dark:text-success-400' :\n              isNegative ? 'text-danger-600 dark:text-danger-400' :\n              'text-foreground-800 dark:text-white'\n            }`}\n            layout\n          >\n            {isPercentage ? `${value}%` : value}\n          </motion.div>\n        </div>\n\n        {(stock || date) && (\n          <div className=\"flex items-center justify-between text-xs\">\n            {stock && (\n              <span className=\"text-foreground-600 dark:text-gray-400\">\n                {stock}\n              </span>\n            )}\n            {date && (\n              <span className=\"text-foreground-500 dark:text-gray-500\">\n                {date}\n              </span>\n            )}\n          </div>\n        )}\n      </motion.div>\n    </motion.div>\n  );\n};\n\ninterface TopPerformersProps {\n  trades: Trade[];\n}\n\ntype MetricFilter = \"stockMove\" | \"pfImpact\" | \"rewardRisk\" | \"plRs\";\n\nexport const TopPerformers: React.FC<TopPerformersProps> = ({ trades }) => {\n  const { accountingMethod } = useAccountingMethod();\n  const useCashBasis = accountingMethod === 'cash';\n  const { filter: globalFilter } = useGlobalFilter();\n\n  // Filter trades based on global filter and accounting method\n  const filteredTrades = React.useMemo(() => {\n    if (globalFilter.type === 'all') {\n      return trades; // No filtering for \"All Time\"\n    }\n\n    return trades.filter(trade => isTradeInGlobalFilter(trade, globalFilter, useCashBasis));\n  }, [trades, globalFilter, useCashBasis]);\n\n  const { tradesWithAccountingPL } = useAccountingCalculations(filteredTrades);\n  const { displayName } = useAccountingMethodDisplay();\n  const [metricFilter, setMetricFilter] = React.useState<MetricFilter>(\"stockMove\");\n\n  // Helper function to get the correct PF Impact value based on accounting method and filter\n  const getPfImpactValue = React.useCallback((trade: any) => {\n    if (metricFilter !== 'pfImpact') return 0;\n\n    if (useCashBasis && globalFilter.type === 'all') {\n      // For \"All Time\" in cash basis, sum up all PF impacts from expanded trades\n      if (trade._expandedTrades && trade._expandedTrades.length > 0) {\n        return trade._expandedTrades.reduce((sum: number, expandedTrade: any) => {\n          return sum + (expandedTrade._cashPfImpact ?? 0);\n        }, 0);\n      }\n      return trade.cummPf ?? trade._cashPfImpact ?? 0;\n    } else if (useCashBasis) {\n      // For specific periods in cash basis, use individual exit impact\n      return trade._cashPfImpact ?? 0;\n    } else {\n      // In accrual basis, use individual PF impact\n      return trade._accrualPfImpact ?? trade.pfImpact ?? 0;\n    }\n  }, [metricFilter, useCashBasis, globalFilter.type]);\n\n  // Get top and bottom performers based on selected metric\n  const { top, bottom } = React.useMemo(() => {\n    if (!tradesWithAccountingPL || !tradesWithAccountingPL.length) return { top: null, bottom: null };\n\n    // CRITICAL FIX: For cash basis, deduplicate trades to avoid showing same trade multiple times\n    let uniqueTrades = tradesWithAccountingPL;\n    if (useCashBasis) {\n      const seenTradeIds = new Set();\n      uniqueTrades = tradesWithAccountingPL.filter(trade => {\n        const originalId = trade.id.split('_exit_')[0];\n        if (seenTradeIds.has(originalId)) return false;\n        seenTradeIds.add(originalId);\n        return true;\n      });\n    }\n\n    const sortedTrades = [...uniqueTrades].sort((a, b) => {\n      let aValue, bValue;\n      if (metricFilter === 'rewardRisk') {\n        aValue = calcWeightedRewardRisk(a);\n        bValue = calcWeightedRewardRisk(b);\n      } else if (metricFilter === 'plRs') {\n        // Use accounting method P/L from shared calculations\n        aValue = a.accountingPL;\n        bValue = b.accountingPL;\n      } else if (metricFilter === 'pfImpact') {\n        // CRITICAL FIX: For cash basis with \"All Time\" filter, calculate total PF impact\n        // For specific periods or accrual basis, use individual PF impact\n        if (useCashBasis && globalFilter.type === 'all') {\n          // For \"All Time\" in cash basis, sum up all PF impacts from expanded trades\n          const getTotalPfImpact = (trade: any) => {\n            if (trade._expandedTrades && trade._expandedTrades.length > 0) {\n              return trade._expandedTrades.reduce((sum: number, expandedTrade: any) => {\n                return sum + (expandedTrade._cashPfImpact ?? 0);\n              }, 0);\n            }\n            return trade.cummPf ?? trade._cashPfImpact ?? 0;\n          };\n\n          aValue = getTotalPfImpact(a);\n          bValue = getTotalPfImpact(b);\n        } else if (useCashBasis) {\n          // For specific periods in cash basis, use individual exit impact\n          aValue = a._cashPfImpact ?? 0;\n          bValue = b._cashPfImpact ?? 0;\n        } else {\n          // In accrual basis, use individual PF impact\n          aValue = a._accrualPfImpact ?? a.pfImpact ?? 0;\n          bValue = b._accrualPfImpact ?? b.pfImpact ?? 0;\n        }\n      } else {\n        aValue = a[metricFilter] || 0;\n        bValue = b[metricFilter] || 0;\n      }\n      return bValue - aValue;\n    });\n\n    return {\n      top: sortedTrades[0],\n      bottom: sortedTrades[sortedTrades.length - 1]\n    };\n  }, [tradesWithAccountingPL, metricFilter]);\n\n  // Format metric value based on type\n  const formatMetricValue = (value: number, trade?: any) => {\n    if (metricFilter === 'plRs') {\n      // For P/L, use accounting method value from shared calculations\n      const plValue = trade?.accountingPL ?? value;\n      return new Intl.NumberFormat('en-IN', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n        useGrouping: true\n      }).format(plValue);\n    }\n    if (metricFilter === 'rewardRisk' && trade) {\n      const rr = calcWeightedRewardRisk(trade);\n      const rrStr = rr % 1 === 0 ? rr.toFixed(0) : rr.toFixed(2);\n      return `${rrStr}R`;\n    }\n    if (metricFilter === 'pfImpact' && trade) {\n      // CRITICAL FIX: For cash basis with \"All Time\", calculate total PF impact\n      let pfImpactValue = 0;\n\n      if (useCashBasis && globalFilter.type === 'all') {\n        // For \"All Time\" in cash basis, sum up all PF impacts from expanded trades\n        if (trade._expandedTrades && trade._expandedTrades.length > 0) {\n          pfImpactValue = trade._expandedTrades.reduce((sum: number, expandedTrade: any) => {\n            return sum + (expandedTrade._cashPfImpact ?? 0);\n          }, 0);\n        } else {\n          pfImpactValue = trade.cummPf ?? trade._cashPfImpact ?? 0;\n        }\n      } else if (useCashBasis) {\n        // For specific periods in cash basis, use individual exit impact\n        pfImpactValue = trade._cashPfImpact ?? 0;\n      } else {\n        // In accrual basis, use individual PF impact\n        pfImpactValue = trade._accrualPfImpact ?? trade.pfImpact ?? 0;\n      }\n\n      const formatted = pfImpactValue.toFixed(2);\n      return formatted.replace(/\\.?0+$/, '');\n    }\n    // For percentage values, remove trailing zeros\n    const formatted = value.toFixed(2);\n    return formatted.replace(/\\.?0+$/, '');\n  };\n\n  // Get metric label\n  const getMetricLabel = () => {\n    switch (metricFilter) {\n      case \"stockMove\":\n        return \"Move\";\n      case \"pfImpact\":\n        return \"pf Impact\";\n      case \"rewardRisk\":\n        return \"R:R\";\n      case \"plRs\":\n        return \"P/L\";\n      default:\n        return \"\";\n    }\n  };\n\n  if (!trades || trades.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center p-4 text-default-500\">\n        No data available\n      </div>\n    );\n  }\n\n  if (!top || !bottom) {\n    return (\n      <div className=\"flex items-center justify-center p-4 text-default-500\">\n        No trades found for the selected period\n      </div>\n    );\n  }\n\n  // Check if we only have one unique trade\n  const hasOnlyOneTrade = top.id === bottom.id ||\n    (useCashBasis && top.id.split('_exit_')[0] === bottom.id.split('_exit_')[0]);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Accounting Method Indicator */}\n      <div className=\"flex items-center gap-2 text-sm text-default-600\">\n        <Icon icon=\"lucide:trophy\" className=\"w-4 h-4\" />\n        <span>Top performers using {displayName} Accounting</span>\n      </div>\n\n      <div className=\"flex justify-end\">\n        <Dropdown>\n          <DropdownTrigger>\n            <Button\n              variant=\"flat\"\n              size=\"sm\"\n              className=\"bg-content2 dark:bg-gray-900 text-foreground dark:text-white min-w-[120px] h-9\"\n              endContent={<Icon icon=\"lucide:chevron-down\" className=\"text-sm dark:text-gray-400\" />}\n            >\n              {getMetricLabel()}\n            </Button>\n          </DropdownTrigger>\n          <DropdownMenu\n            aria-label=\"Metric selection\"\n            className=\"dark:bg-gray-900\"\n            selectedKeys={[metricFilter]}\n            selectionMode=\"single\"\n            onSelectionChange={(keys) => setMetricFilter(Array.from(keys)[0] as MetricFilter)}\n          >\n            <DropdownItem key=\"stockMove\" textValue=\"Move %\" className=\"dark:text-white dark:hover:bg-gray-800\">Move %</DropdownItem>\n            <DropdownItem key=\"pfImpact\" textValue=\"Portfolio Impact\" className=\"dark:text-white dark:hover:bg-gray-800\">Portfolio Impact</DropdownItem>\n            <DropdownItem key=\"rewardRisk\" textValue=\"Risk:Reward\" className=\"dark:text-white dark:hover:bg-gray-800\">Risk:Reward</DropdownItem>\n            <DropdownItem key=\"plRs\" textValue=\"P/L (₹)\" className=\"dark:text-white dark:hover:bg-gray-800\">P/L (₹)</DropdownItem>\n          </DropdownMenu>\n        </Dropdown>\n      </div>\n\n      <div className=\"space-y-2\">\n        {hasOnlyOneTrade ? (\n          // Show single trade information\n          <TopPerformer\n            label={getMetricLabel()}\n            value={formatMetricValue(\n              metricFilter === 'rewardRisk' ? calcWeightedRewardRisk(top) :\n              metricFilter === 'plRs' ? top.accountingPL :\n              metricFilter === 'pfImpact' ? getPfImpactValue(top) :\n              top[metricFilter] || 0,\n              top\n            )}\n            stock={top.name}\n            date={top.date}\n            isPercentage={metricFilter !== \"plRs\" && metricFilter !== \"rewardRisk\"}\n            index={0}\n          />\n        ) : (\n          // Show highest and lowest when multiple trades exist\n          <>\n            <TopPerformer\n              label={`Highest ${getMetricLabel()}`}\n              value={formatMetricValue(\n                metricFilter === 'rewardRisk' ? calcWeightedRewardRisk(top) :\n                metricFilter === 'plRs' ? top.accountingPL :\n                metricFilter === 'pfImpact' ? getPfImpactValue(top) :\n                top[metricFilter] || 0,\n                top\n              )}\n              stock={top.name}\n              date={top.date}\n              isPercentage={metricFilter !== \"plRs\" && metricFilter !== \"rewardRisk\"}\n              isPositive\n              index={0}\n            />\n            <TopPerformer\n              label={`Lowest ${getMetricLabel()}`}\n              value={formatMetricValue(\n                metricFilter === 'rewardRisk' ? calcWeightedRewardRisk(bottom) :\n                metricFilter === 'plRs' ? bottom.accountingPL :\n                metricFilter === 'pfImpact' ? getPfImpactValue(bottom) :\n                bottom[metricFilter] || 0,\n                bottom\n              )}\n              stock={bottom.name}\n              date={bottom.date}\n              isPercentage={metricFilter !== \"plRs\" && metricFilter !== \"rewardRisk\"}\n              isNegative\n              index={1}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};"],"names":["TopPerformer","label","value","stock","date","isPercentage","isPositive","isNegative","index","_jsx","motion","div","initial","opacity","y","animate","transition","delay","children","className","variants","metricVariants","whileHover","x","type","stiffness","damping","_jsxs","layout","TopPerformers","trades","accountingMethod","useAccountingMethod","useCashBasis","filter","globalFilter","useGlobalFilter","filteredTrades","React","useMemo","trade","isTradeInGlobalFilter","tradesWithAccountingPL","useAccountingCalculations","displayName","useAccountingMethodDisplay","metricFilter","setMetricFilter","useState","getPfImpactValue","useCallback","_expandedTrades","length","reduce","sum","expandedTrade","_cashPfImpact","cummPf","_accrualPfImpact","pfImpact","top","bottom","uniqueTrades","seenTradeIds","Set","originalId","id","split","has","add","sortedTrades","sort","a","b","aValue","bValue","calcWeightedRewardRisk","accountingPL","getTotalPfImpact","formatMetricValue","plValue","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","useGrouping","format","rr","toFixed","pfImpactValue","formatted","replace","getMetricLabel","hasOnlyOneTrade","Icon","icon","Dropdown","DropdownTrigger","Button","variant","size","endContent","DropdownMenu","selectedKeys","selectionMode","onSelectionChange","Array","from","keys","DropdownItem","textValue","name","_Fragment"],"mappings":"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"}