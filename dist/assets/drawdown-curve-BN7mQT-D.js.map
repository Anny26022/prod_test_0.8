{"version":3,"file":"drawdown-curve-BN7mQT-D.js","sources":["../../src/components/analytics/drawdown-curve.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  LineChart,\r\n  Line\r\n} from \"recharts\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Card, CardBody, CardHeader, Button, Tabs, Tab, Chip, Modal, ModalContent, ModalHeader, ModalBody, Table, TableHeader, TableColumn, TableBody, TableRow, TableCell, Divider } from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { Trade } from \"../../types/trade\";\r\nimport { useAccountingMethod } from \"../../context/AccountingMethodContext\";\r\nimport { useGlobalFilter } from \"../../context/GlobalFilterContext\";\r\nimport { isTradeInGlobalFilter } from \"../../utils/dateFilterUtils\";\r\nimport { useTruePortfolioWithTrades } from \"../../hooks/use-true-portfolio-with-trades\";\r\nimport { useAccountingCalculations } from \"../../hooks/use-accounting-calculations\";\r\n\r\nexport interface DrawdownDataPoint {\r\n  month: string;\r\n  drawdown: number;\r\n  volatility: number;\r\n  capital: number;\r\n  plPercentage: number;\r\n  maxDrawdown: number;\r\n  recovery: number;\r\n}\r\n\r\ninterface DrawdownCurveProps {\r\n  trades: Trade[];\r\n  className?: string;\r\n}\r\n\r\nexport const DrawdownCurve: React.FC<DrawdownCurveProps> = ({ trades, className }) => {\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n  const { filter: globalFilter } = useGlobalFilter();\r\n  const [selectedView, setSelectedView] = React.useState<\"drawdown\" | \"volatility\">(\"drawdown\");\r\n  const [isDetailModalOpen, setIsDetailModalOpen] = React.useState(false);\r\n  const [selectedPeriod, setSelectedPeriod] = React.useState(\"YTD\");\r\n\r\n  // CRITICAL FIX: Use the same data source as main dashboard\r\n  // Get portfolio data using the same hook as the main dashboard\r\n  const { getAllMonthlyTruePortfolios } = useTruePortfolioWithTrades(trades);\r\n  const monthlyPortfolios = getAllMonthlyTruePortfolios();\r\n\r\n  // Also get the same accounting calculations as the main dashboard\r\n  const { tradesWithAccountingPL, totalTrades, grossPL } = useAccountingCalculations(trades);\r\n\r\n  // Filter trades based on global filter and accounting method\r\n  const filteredTrades = React.useMemo(() => {\r\n    if (globalFilter.type === 'all') {\r\n      return trades;\r\n    }\r\n    return trades.filter(trade => isTradeInGlobalFilter(trade, globalFilter, useCashBasis));\r\n  }, [trades, globalFilter, useCashBasis]);\r\n\r\n  // Calculate drawdown and volatility data\r\n  const drawdownData = React.useMemo(() => {\r\n    // Handle case where monthlyPortfolios is undefined or empty\r\n    if (!monthlyPortfolios || monthlyPortfolios.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Calculate cumulative profit factor (cummPf) for each month\r\n    // This matches the tax analytics logic where cummPf is cumulative portfolio impact\r\n    let cummPf = 0; // Start at 0% cumulative profit factor\r\n\r\n    const processedData = monthlyPortfolios\r\n      .map(monthData => {\r\n        const monthlyReturn = monthData.startingCapital !== 0 ? (monthData.pl / monthData.startingCapital) * 100 : 0;\r\n        cummPf += monthlyReturn; // Add this month's return to cumulative PF\r\n\r\n        return {\r\n          month: `${monthData.month} ${monthData.year}`,\r\n          capital: monthData.finalCapital,\r\n          pl: monthData.pl,\r\n          plPercentage: monthlyReturn,\r\n          cummPf: cummPf // Cumulative profit factor in percentage points\r\n        };\r\n      });\r\n\r\n    if (processedData.length === 0) return [];\r\n\r\n    // Track running maximum of cumulative PF (like tax analytics)\r\n    let runningMax = processedData[0]?.cummPf || 0;\r\n    let maxDrawdownSeen = 0;\r\n\r\n    return processedData.map((d, index) => {\r\n      // Check if this is a new peak (drawdown reset)\r\n      const isNewPeak = d.cummPf > runningMax;\r\n\r\n      // Update running maximum of cumulative PF\r\n      if (d.cummPf > runningMax) runningMax = d.cummPf;\r\n\r\n      // Calculate DD From Peak (absolute percentage points down from peak)\r\n      // This exactly matches tax analytics logic: runningMax - currentPF\r\n      const ddFromPeak = runningMax > 0 ? runningMax - d.cummPf : 0;\r\n\r\n      // Track maximum drawdown seen so far\r\n      if (ddFromPeak > maxDrawdownSeen) maxDrawdownSeen = ddFromPeak;\r\n\r\n      // Calculate recovery (how close cumulative PF is to its peak)\r\n      const recovery = runningMax !== 0 ? (d.cummPf / runningMax) * 100 : 100;\r\n\r\n      // Calculate rolling volatility (3-month window)\r\n      let volatility = 0;\r\n      if (index >= 2) {\r\n        const window = processedData.slice(Math.max(0, index - 2), index + 1);\r\n        const returns = window.map(w => w.plPercentage);\r\n        const mean = returns.reduce((a, b) => a + b, 0) / returns.length;\r\n        const variance = returns.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / returns.length;\r\n        volatility = Math.sqrt(variance);\r\n      }\r\n\r\n      return {\r\n        month: d.month,\r\n        drawdown: -ddFromPeak, // Negative for visual representation (chart shows downward)\r\n        ddFromPeak, // Positive value for display (absolute percentage points down from peak)\r\n        isNewPeak, // Flag to show when drawdown resets\r\n        volatility,\r\n        capital: d.capital,\r\n        plPercentage: d.plPercentage,\r\n        cummPf: d.cummPf, // Cumulative profit factor\r\n        maxDrawdown: -maxDrawdownSeen,\r\n        recovery\r\n      };\r\n    });\r\n  }, [monthlyPortfolios]);\r\n\r\n  // Calculate summary statistics\r\n  const summaryStats = React.useMemo(() => {\r\n    if (drawdownData.length === 0) return { maxDrawdown: 0, avgVolatility: 0, currentDrawdown: 0, recoveryTime: 0, newPeaks: 0 };\r\n\r\n    const maxDrawdown = Math.min(...drawdownData.map(d => d.drawdown));\r\n    const avgVolatility = drawdownData.reduce((sum, d) => sum + d.volatility, 0) / drawdownData.length;\r\n    const currentDrawdown = drawdownData[drawdownData.length - 1]?.drawdown || 0;\r\n\r\n    // Count number of new peaks (drawdown resets)\r\n    const newPeaks = drawdownData.filter(d => d.isNewPeak).length;\r\n\r\n    // Calculate average recovery time (simplified)\r\n    let recoveryPeriods = 0;\r\n    let inDrawdown = false;\r\n    let drawdownStart = 0;\r\n\r\n    drawdownData.forEach((d, i) => {\r\n      if (d.drawdown < -0.5 && !inDrawdown) {\r\n        inDrawdown = true;\r\n        drawdownStart = i;\r\n      } else if (d.drawdown >= -0.1 && inDrawdown) {\r\n        inDrawdown = false;\r\n        recoveryPeriods += i - drawdownStart;\r\n      }\r\n    });\r\n\r\n    return {\r\n      maxDrawdown: Math.abs(maxDrawdown),\r\n      avgVolatility,\r\n      currentDrawdown: Math.abs(currentDrawdown),\r\n      recoveryTime: recoveryPeriods,\r\n      newPeaks\r\n    };\r\n  }, [drawdownData]);\r\n\r\n  // Custom tooltip\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0].payload;\r\n      return (\r\n        <div className=\"bg-content1 border border-divider rounded-lg p-3 shadow-lg\">\r\n          <p className=\"font-medium text-sm mb-2\">{label}</p>\r\n          {selectedView === \"drawdown\" ? (\r\n            <>\r\n              <p className=\"text-danger text-sm\">\r\n                DD From Peak: {data.ddFromPeak.toFixed(2)}%\r\n              </p>\r\n              <p className=\"text-default-600 text-sm\">\r\n                Recovery: {data.recovery.toFixed(1)}%\r\n              </p>\r\n              {data.isNewPeak && (\r\n                <p className=\"text-success text-sm font-medium flex items-center gap-1\">\r\n                  <span>üèÜ</span> New Peak! (DD Reset)\r\n                </p>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <p className=\"text-warning text-sm\">\r\n                Volatility: {data.volatility.toFixed(2)}%\r\n              </p>\r\n              <p className=\"text-default-600 text-sm\">\r\n                P&L: {data.plPercentage >= 0 ? '+' : ''}{data.plPercentage.toFixed(2)}%\r\n              </p>\r\n            </>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Show loading or empty state if no data\r\n  if (!drawdownData || drawdownData.length === 0) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader className=\"flex flex-col gap-3\">\r\n          <div className=\"flex justify-between items-center w-full\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"p-1.5 rounded-lg bg-danger/10\">\r\n                <Icon icon=\"lucide:trending-down\" className=\"text-danger text-sm\" />\r\n              </div>\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold\">Drawdown Analysis</h3>\r\n                <p className=\"text-xs text-default-500\">Risk and volatility metrics</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        <Divider />\r\n        <CardBody>\r\n          <div className=\"flex flex-col items-center justify-center h-[280px] text-center\">\r\n            <Icon icon=\"lucide:bar-chart-3\" className=\"w-12 h-12 text-default-300 mb-3\" />\r\n            <p className=\"text-default-500 text-sm\">No data available for drawdown analysis</p>\r\n            <p className=\"text-default-400 text-xs mt-1\">\r\n              {totalTrades > 0\r\n                ? `${totalTrades} trades found, but no monthly portfolio data available`\r\n                : \"Add some trades to see risk metrics\"\r\n              }\r\n            </p>\r\n            {/* Debug info to show connection to main dashboard */}\r\n            <div className=\"mt-3 p-2 bg-default-100 rounded text-xs text-left\">\r\n              <p><strong>Debug Info:</strong></p>\r\n              <p>‚Ä¢ Total Trades: {totalTrades}</p>\r\n              <p>‚Ä¢ Gross P/L: ‚Çπ{grossPL.toFixed(2)}</p>\r\n              <p>‚Ä¢ Monthly Portfolios: {monthlyPortfolios?.length || 0}</p>\r\n              <p>‚Ä¢ Accounting: {useCashBasis ? 'Cash' : 'Accrual'}</p>\r\n            </div>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader className=\"flex flex-col gap-3\">\r\n        <div className=\"flex justify-between items-center w-full\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"p-1.5 rounded-lg bg-danger/10\">\r\n              <Icon icon=\"lucide:trending-down\" className=\"text-danger text-sm\" />\r\n            </div>\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold\">Drawdown Analysis</h3>\r\n              <p className=\"text-xs text-default-500\">Risk and volatility metrics</p>\r\n            </div>\r\n          </div>\r\n          <Button\r\n            isIconOnly\r\n            variant=\"light\"\r\n            size=\"sm\"\r\n            onPress={() => setIsDetailModalOpen(true)}\r\n            className=\"text-default-400 hover:text-primary\"\r\n            isDisabled={drawdownData.length === 0}\r\n          >\r\n            <Icon icon=\"lucide:maximize-2\" className=\"w-4 h-4\" />\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Toggle between Drawdown and Volatility */}\r\n        <Tabs\r\n          selectedKey={selectedView}\r\n          onSelectionChange={(key) => setSelectedView(key as \"drawdown\" | \"volatility\")}\r\n          size=\"sm\"\r\n          variant=\"underlined\"\r\n          classNames={{\r\n            tabList: \"gap-6 w-full relative rounded-none p-0 border-b border-divider\",\r\n            cursor: \"w-full bg-primary-500\",\r\n            tab: \"max-w-fit px-0 h-8\",\r\n            tabContent: \"group-data-[selected=true]:text-primary-500\"\r\n          }}\r\n        >\r\n          <Tab\r\n            key=\"drawdown\"\r\n            title={\r\n              <div className=\"flex items-center gap-2\">\r\n                <Icon icon=\"lucide:trending-down\" className=\"w-4 h-4\" />\r\n                <span>Drawdown</span>\r\n              </div>\r\n            }\r\n          />\r\n          <Tab\r\n            key=\"volatility\"\r\n            title={\r\n              <div className=\"flex items-center gap-2\">\r\n                <Icon icon=\"lucide:activity\" className=\"w-4 h-4\" />\r\n                <span>Volatility</span>\r\n              </div>\r\n            }\r\n          />\r\n        </Tabs>\r\n\r\n        {/* Summary Stats */}\r\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3\">\r\n          <div className=\"text-center\">\r\n            <p className=\"text-xs text-default-500\">Max DD</p>\r\n            <p className=\"text-sm font-semibold text-danger\">\r\n              {summaryStats.maxDrawdown.toFixed(2)}%\r\n            </p>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <p className=\"text-xs text-default-500\">Current DD</p>\r\n            <p className=\"text-sm font-semibold text-warning\">\r\n              {summaryStats.currentDrawdown.toFixed(2)}%\r\n            </p>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <p className=\"text-xs text-default-500\">Avg Volatility</p>\r\n            <p className=\"text-sm font-semibold text-primary\">\r\n              {summaryStats.avgVolatility.toFixed(2)}%\r\n            </p>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <p className=\"text-xs text-default-500\">New Peaks</p>\r\n            <p className=\"text-sm font-semibold text-success\">\r\n              {summaryStats.newPeaks}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n      <Divider />\r\n      <CardBody>\r\n        <div className=\"h-[280px]\">\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <AnimatePresence mode=\"wait\">\r\n              {selectedView === \"drawdown\" ? (\r\n                <AreaChart\r\n                  data={drawdownData}\r\n                  margin={{ top: 10, right: 30, left: 20, bottom: 20 }}\r\n                >\r\n                  <defs>\r\n                    <linearGradient id=\"colorDrawdown\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                      <stop offset=\"5%\" stopColor=\"hsl(var(--heroui-danger-500))\" stopOpacity={0.3} />\r\n                      <stop offset=\"95%\" stopColor=\"hsl(var(--heroui-danger-500))\" stopOpacity={0} />\r\n                    </linearGradient>\r\n                  </defs>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"hsl(var(--heroui-divider))\" />\r\n                  <XAxis \r\n                    dataKey=\"month\" \r\n                    axisLine={false}\r\n                    tickLine={false}\r\n                    tick={{ fontSize: 11 }}\r\n                    dy={10}\r\n                  />\r\n                  <YAxis \r\n                    axisLine={false}\r\n                    tickLine={false}\r\n                    tick={{ fontSize: 11 }}\r\n                    tickFormatter={(value) => `${Math.abs(value).toFixed(1)}%`}\r\n                    domain={['dataMin', 0]}\r\n                  />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Area\r\n                    type=\"monotone\"\r\n                    dataKey=\"drawdown\"\r\n                    name=\"Drawdown\"\r\n                    stroke=\"hsl(var(--heroui-danger))\"\r\n                    fillOpacity={1}\r\n                    fill=\"url(#colorDrawdown)\"\r\n                    strokeWidth={2}\r\n                    activeDot={{ r: 4, strokeWidth: 2 }}\r\n                    dot={(props: any) => {\r\n                      const { payload } = props;\r\n                      if (payload?.isNewPeak) {\r\n                        return (\r\n                          <circle\r\n                            cx={props.cx}\r\n                            cy={props.cy}\r\n                            r={6}\r\n                            fill=\"hsl(var(--heroui-success))\"\r\n                            stroke=\"white\"\r\n                            strokeWidth={2}\r\n                          />\r\n                        );\r\n                      }\r\n                      return null;\r\n                    }}\r\n                  />\r\n                </AreaChart>\r\n              ) : (\r\n                <LineChart\r\n                  data={drawdownData}\r\n                  margin={{ top: 10, right: 30, left: 20, bottom: 20 }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" vertical={false} stroke=\"hsl(var(--heroui-divider))\" />\r\n                  <XAxis \r\n                    dataKey=\"month\" \r\n                    axisLine={false}\r\n                    tickLine={false}\r\n                    tick={{ fontSize: 11 }}\r\n                    dy={10}\r\n                  />\r\n                  <YAxis \r\n                    axisLine={false}\r\n                    tickLine={false}\r\n                    tick={{ fontSize: 11 }}\r\n                    tickFormatter={(value) => `${value.toFixed(1)}%`}\r\n                  />\r\n                  <Tooltip content={<CustomTooltip />} />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"volatility\" \r\n                    name=\"Volatility\"\r\n                    stroke=\"hsl(var(--heroui-warning))\" \r\n                    strokeWidth={2}\r\n                    dot={{ r: 3 }}\r\n                    activeDot={{ r: 5, strokeWidth: 2 }}\r\n                  />\r\n                </LineChart>\r\n              )}\r\n            </AnimatePresence>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </CardBody>\r\n\r\n      {/* Detailed Modal */}\r\n      <Modal\r\n        isOpen={isDetailModalOpen}\r\n        onOpenChange={setIsDetailModalOpen}\r\n        size=\"4xl\"\r\n        scrollBehavior=\"inside\"\r\n        classNames={{\r\n          base: \"transform-gpu backdrop-blur-sm\",\r\n          wrapper: \"transform-gpu\",\r\n          backdrop: \"bg-black/40\",\r\n          closeButton: \"text-foreground/60 hover:bg-white/10\"\r\n        }}\r\n        backdrop=\"blur\"\r\n      >\r\n        <ModalContent className=\"bg-white/95 dark:bg-gray-900/95 backdrop-blur-2xl border border-gray-200 dark:border-gray-700 shadow-2xl max-h-[90vh]\">\r\n          {(onClose) => (\r\n            <>\r\n              <ModalHeader className=\"flex flex-col gap-1 border-b border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-900/80 px-4 py-3\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"p-1.5 rounded-lg bg-danger/10\">\r\n                    <Icon icon=\"lucide:trending-down\" className=\"text-danger text-sm\" />\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"text-base font-semibold\">Detailed Drawdown Analysis</span>\r\n                    <p className=\"text-xs text-default-500 mt-0.5\">\r\n                      {useCashBasis ? 'Cash Basis' : 'Accrual Basis'} ‚Ä¢ Risk metrics breakdown\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </ModalHeader>\r\n              <ModalBody className=\"p-4\">\r\n                <div className=\"space-y-4\">\r\n                  {/* Enhanced Chart */}\r\n                  <div className=\"h-[300px]\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <AreaChart\r\n                        data={drawdownData}\r\n                        margin={{ top: 10, right: 30, left: 30, bottom: 30 }}\r\n                      >\r\n                        <defs>\r\n                          <linearGradient id=\"colorDrawdownModal\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor=\"hsl(var(--heroui-danger-500))\" stopOpacity={0.4} />\r\n                            <stop offset=\"95%\" stopColor=\"hsl(var(--heroui-danger-500))\" stopOpacity={0} />\r\n                          </linearGradient>\r\n                        </defs>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--heroui-divider))\" />\r\n                        <XAxis \r\n                          dataKey=\"month\" \r\n                          axisLine={false}\r\n                          tickLine={false}\r\n                          tick={{ fontSize: 12 }}\r\n                        />\r\n                        <YAxis \r\n                          axisLine={false}\r\n                          tickLine={false}\r\n                          tick={{ fontSize: 12 }}\r\n                          tickFormatter={(value) => `${Math.abs(value).toFixed(1)}%`}\r\n                          domain={['dataMin', 0]}\r\n                        />\r\n                        <Tooltip content={<CustomTooltip />} />\r\n                        <Legend />\r\n                        <Area \r\n                          type=\"monotone\" \r\n                          dataKey=\"drawdown\" \r\n                          name=\"Drawdown %\"\r\n                          stroke=\"hsl(var(--heroui-danger))\" \r\n                          fillOpacity={1}\r\n                          fill=\"url(#colorDrawdownModal)\" \r\n                          strokeWidth={2}\r\n                          activeDot={{ r: 6, strokeWidth: 2 }}\r\n                        />\r\n                      </AreaChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n\r\n                  {/* Detailed Statistics Table */}\r\n                  <Table\r\n                    aria-label=\"Drawdown analysis table\"\r\n                    classNames={{\r\n                      wrapper: \"max-h-[300px] border border-divider/30 rounded-lg overflow-hidden\",\r\n                      table: \"border-collapse\",\r\n                      th: \"bg-content1/50 text-sm font-medium text-default-600 border-b border-divider/30 px-3 py-2.5\",\r\n                      td: \"py-2.5 px-3 text-sm border-b border-divider/20\",\r\n                      tr: \"hover:bg-content1/20 transition-colors\"\r\n                    }}\r\n                  >\r\n                    <TableHeader>\r\n                      <TableColumn key=\"date\" align=\"start\" width={90}>Date</TableColumn>\r\n                      <TableColumn key=\"plPercentage\" align=\"center\" width={100}>Monthly P&L</TableColumn>\r\n                      <TableColumn key=\"cummPf\" align=\"center\" width={110}>Cum PF Impact</TableColumn>\r\n                      <TableColumn key=\"ddFromPeak\" align=\"center\" width={110}>DD From Peak</TableColumn>\r\n                      <TableColumn key=\"volatility\" align=\"center\" width={100}>Volatility</TableColumn>\r\n                      <TableColumn key=\"recovery\" align=\"center\" width={100}>Recovery</TableColumn>\r\n                    </TableHeader>\r\n                    <TableBody>\r\n                      {drawdownData.map((item, index) => (\r\n                        <TableRow\r\n                          key={index}\r\n                          className={`${item.isNewPeak ? \"bg-success/10 border-l-4 border-l-success\" : \"hover:bg-content1/50\"} transition-all duration-200`}\r\n                        >\r\n                          <TableCell>\r\n                            <div className=\"flex items-center gap-1\">\r\n                              {item.isNewPeak && (\r\n                                <Icon icon=\"lucide:crown\" className=\"w-3 h-3 text-warning\" />\r\n                              )}\r\n                              <span className=\"text-sm\">{item.month}</span>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <span className={item.plPercentage >= 0 ? \"text-success font-medium\" : \"text-danger font-medium\"}>\r\n                              {item.plPercentage >= 0 ? '+' : ''}{item.plPercentage.toFixed(2)}%\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <span className=\"text-sm font-medium\">\r\n                              {item.cummPf.toFixed(2)}%\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <span className={`text-sm font-medium ${item.ddFromPeak > 0 ? \"text-danger\" : \"text-success\"}`}>\r\n                              {item.ddFromPeak === 0 ? \"0.00%\" : `${item.ddFromPeak.toFixed(2)}%`}\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <span className=\"text-warning\">\r\n                              {item.volatility.toFixed(2)}%\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <span className={item.recovery >= 95 ? \"text-success\" : \"text-warning\"}>\r\n                              {item.recovery.toFixed(1)}%\r\n                            </span>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </div>\r\n              </ModalBody>\r\n            </>\r\n          )}\r\n        </ModalContent>\r\n      </Modal>\r\n    </Card>\r\n  );\r\n};\r\n"],"names":["DrawdownCurve","trades","className","accountingMethod","useAccountingMethod","useCashBasis","filter","globalFilter","useGlobalFilter","selectedView","setSelectedView","React","useState","isDetailModalOpen","setIsDetailModalOpen","selectedPeriod","setSelectedPeriod","getAllMonthlyTruePortfolios","useTruePortfolioWithTrades","monthlyPortfolios","tradesWithAccountingPL","totalTrades","grossPL","useAccountingCalculations","useMemo","type","trade","isTradeInGlobalFilter","drawdownData","length","cummPf","processedData","map","monthData","monthlyReturn","startingCapital","pl","month","year","capital","finalCapital","plPercentage","runningMax","maxDrawdownSeen","d","index","isNewPeak","ddFromPeak","recovery","volatility","window","returns","slice","Math","max","w","mean","reduce","a","b","variance","pow","sqrt","drawdown","maxDrawdown","summaryStats","avgVolatility","currentDrawdown","recoveryTime","newPeaks","min","sum","recoveryPeriods","inDrawdown","drawdownStart","forEach","i","abs","CustomTooltip","active","payload","label","data","children","_jsx","_Fragment","_jsxs","toFixed","Card","CardHeader","Icon","icon","Button","isIconOnly","variant","size","onPress","isDisabled","Tabs","selectedKey","onSelectionChange","key","classNames","tabList","cursor","tab","tabContent","Tab","title","Divider","CardBody","ResponsiveContainer","width","height","AnimatePresence","mode","AreaChart","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","vertical","stroke","XAxis","dataKey","axisLine","tickLine","tick","fontSize","dy","YAxis","tickFormatter","value","domain","Tooltip","content","Area","name","fillOpacity","fill","strokeWidth","activeDot","r","dot","props","cx","cy","LineChart","Line","Modal","isOpen","onOpenChange","scrollBehavior","base","wrapper","backdrop","closeButton","ModalContent","ModalHeader","ModalBody","Legend","Table","table","th","td","tr","TableHeader","TableColumn","align","TableBody","item","TableRow","TableCell"],"mappings":"qjBAsCO,MAAMA,EAA8CA,EAAGC,SAAQC,gBAC9D,MAAAC,iBAAEA,GAAqBC,IACvBC,EAAoC,SAArBF,GACbG,OAAQC,GAAiBC,KAC1BC,EAAcC,GAAmBC,EAAMC,SAAoC,aAC3EC,EAAmBC,GAAwBH,EAAMC,UAAS,IAC1DG,EAAgBC,GAAqBL,EAAMC,SAAS,QAIrDK,4BAAEA,GAAgCC,EAA2BjB,GAC7DkB,EAAoBF,KAGpBG,uBAAEA,EAAAA,YAAwBC,EAAAA,QAAaC,GAAYC,EAA0BtB,GAG5DU,EAAMa,QAAQ,IACT,QAAtBjB,EAAakB,KACRxB,EAEFA,EAAOK,OAAOoB,GAASC,EAAsBD,EAAOnB,EAAcF,IACxE,CAACJ,EAAQM,EAAcF,IAGpBuB,MAAAA,EAAejB,EAAMa,QAAQ,WAEjC,IAAKL,GAAkD,IAA7BA,EAAkBU,OAC1C,MAAO,GAKT,IAAIC,EAAS,EAEPC,MAAAA,EAAgBZ,EACnBa,IAAiBC,IACVC,MAAAA,EAA8C,IAA9BD,EAAUE,gBAAyBF,EAAUG,GAAKH,EAAUE,gBAAmB,IAAM,EAGpG,OAFGD,GAAAA,EAEH,CACLG,MAAO,GAAGJ,EAAUI,SAASJ,EAAUK,OACvCC,QAASN,EAAUO,aACnBJ,GAAIH,EAAUG,GACdK,aAAcP,EACdJ,YAIN,GAA6B,IAAzBC,EAAcF,OAAc,MAAO,GAGvC,IAAIa,GAAaX,OAAAA,EAAAA,EAAc,aAAID,SAAU,EACzCa,EAAkB,EAEtB,OAAOZ,EAAcC,IAAI,CAACY,EAAGC,KAErBC,MAAAA,EAAYF,EAAEd,OAASY,EAGzBE,EAAEd,OAASY,IAAYA,EAAaE,EAAEd,QAI1C,MAAMiB,EAAaL,EAAa,EAAIA,EAAaE,EAAEd,OAAS,EAGxDiB,EAAaJ,IAAmCI,EAAAA,GAGpD,MAAMC,EAA0B,IAAfN,EAAoBE,EAAEd,OAASY,EAAc,IAAM,IAGpE,IAAIO,EAAa,EACjB,GAAIJ,GAAS,EAAG,CACRK,MACAC,EADSpB,EAAcqB,MAAMC,KAAKC,IAAI,EAAGT,EAAQ,GAAIA,EAAQ,GAC5Cb,IAAIuB,GAAKA,EAAEd,cAC5Be,EAAOL,EAAQM,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAAKR,EAAQtB,OACpD+B,EAAWT,EAAQM,OAAO,CAACC,EAAGC,IAAMD,EAAIL,KAAKQ,IAAIF,EAAIH,EAAM,GAAI,GAAKL,EAAQtB,OACrEwB,EAAAA,KAAKS,KAAKF,EAAQ,CAG1B,MAAA,CACLvB,MAAOO,EAAEP,MACT0B,UAAWhB,EACXA,aACAD,YACAG,aACAV,QAASK,EAAEL,QACXE,aAAcG,EAAEH,aAChBX,OAAQc,EAAEd,OACVkC,aAAcrB,EACdK,eAGH,CAAC7B,IAGE8C,EAAetD,EAAMa,QAAQ,WAC7BI,GAAwB,IAAxBA,EAAaC,OAAqB,MAAA,CAAEmC,YAAa,EAAGE,cAAe,EAAGC,gBAAiB,EAAGC,aAAc,EAAGC,SAAU,GAEnHL,MAAAA,EAAcX,KAAKiB,OAAO1C,EAAaI,IAAIY,GAAKA,EAAEmB,WAClDG,EAAgBtC,EAAa6B,OAAO,CAACc,EAAK3B,IAAM2B,EAAM3B,EAAEK,WAAY,GAAKrB,EAAaC,OACtFsC,GAAkBvC,OAAAA,EAAaA,EAAAA,EAAaC,OAAS,aAAIkC,WAAY,EAGrEM,EAAWzC,EAAatB,OAAYsC,GAAAA,EAAEE,WAAWjB,OAGvD,IAAI2C,EAAkB,EAClBC,GAAa,EACbC,EAAgB,EAYb,OAVMC,EAAAA,QAAQ,CAAC/B,EAAGgC,KACnBhC,EAAEmB,UAAmB,KAACU,GACXA,GAAA,EACGG,EAAAA,GACPhC,EAAEmB,WAAY,IAAQU,IAClBA,GAAA,EACbD,GAAmBI,EAAIF,KAIpB,CACLV,YAAaX,KAAKwB,IAAIb,GACtBE,gBACAC,gBAAiBd,KAAKwB,IAAIV,GAC1BC,aAAcI,EACdH,aAED,CAACzC,IAGEkD,GAAgBA,EAAGC,SAAQC,UAASC,YACpCF,GAAAA,GAAUC,GAAWA,EAAQnD,OAAQ,CACjCqD,MAAAA,EAAOF,EAAQ,GAAGA,sBAEtB,MAAA,CAAK9E,UAAU,6DAA4D,eAAA,8HAAAiF,UACzEC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAEF,IACvB,aAAjBxE,SACC4E,EAAAA,SAAA,CAAAF,UACEG,EAAAA,KAAA,IAAA,CAAGpF,UAAU,sBAAqB,eAAA,6HAAAiF,SAAC,CAAA,iBAClBD,EAAKnC,WAAWwC,QAAQ,GAAG,OAE5CD,EAAAA,KAAA,IAAA,CAAGpF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAC,CAAA,aAC3BD,EAAKlC,SAASuC,QAAQ,GAAG,OAErCL,EAAKpC,kBACJ,IAAA,CAAG5C,UAAU,2DAA0D,eAAA,6HAAAiF,UACrEC,EAAAA,IAAA,OAAA,CAAA,eAAA,gIAAAD,SAAM,OACR,8BAIJG,EAAAA,KAAAD,WAAA,CAAAF,UACEG,EAAAA,KAAA,IAAA,CAAGpF,UAAU,uBAAsB,eAAA,6HAAAiF,SAAC,CAAA,eACrBD,EAAKjC,WAAWsC,QAAQ,GAAG,OAE1CD,EAAAA,KAAA,IAAA,CAAGpF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAA,CAAC,QAChCD,EAAKzC,cAAgB,EAAI,IAAM,GAAIyC,EAAKzC,aAAa8C,QAAQ,GAAG,YAIzE,CAGF,OAAA,MAIT,OAAK3D,GAAwC,IAAxBA,EAAaC,cA0C/B2D,EAAI,CAACtF,YAAqB,eAAA,+HAAAiF,SAAA,CACzBG,EAAAA,KAACG,EAAU,CAACvF,UAAU,sBAAqB,eAAA,qIAAAiF,UACzCG,EAAAA,KAAA,MAAA,CAAKpF,UAAU,2CAA0C,eAAA,8HAAAiF,UACvDG,EAAAA,KAAA,MAAA,CAAKpF,UAAU,0BAAyB,eAAA,+HAAAiF,UACtCC,EAAAA,IAAA,MAAA,CAAKlF,UAAU,gCAA+B,eAAA,+HAAAiF,eAC3CO,EAAI,CAACC,KAAK,uBAAuBzF,UAAU,sBAAqB,eAAA,oIAEnEoF,EAAAA,KAAA,MAAA,CAAA,eAAA,+HAAAH,UACEC,EAAAA,IAAA,KAAA,CAAIlF,UAAU,wBAAuB,eAAA,8HAAAiF,SAAC,sBACtCC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAC,sCAG5CC,EAAAA,IAACQ,EAAM,CACLC,YAAU,EACVC,QAAQ,QACRC,KAAK,KACLC,QAASA,IAAMlF,GAAqB,GACpCZ,UAAU,sCACV+F,WAAoC,IAAxBrE,EAAaC,OAAa,eAAA,kIAAAsD,eAErCO,EAAI,CAACC,KAAK,oBAAoBzF,UAAU,UAAS,eAAA,uIAKtDoF,EAAAA,KAACY,EAAI,CACHC,YAAa1F,EACb2F,kBAA4B1F,GAAAA,EAAgB2F,GAC5CN,KAAK,KACLD,QAAQ,aACRQ,WAAY,CACVC,QAAS,iEACTC,OAAQ,wBACRC,IAAK,qBACLC,WAAY,+CACZ,eAAA,+HAAAvB,SAAA,CAEFC,EAAAA,IAACuB,EAAG,CAEFC,aACE,MAAA,CAAK1G,UAAU,0BAAyB,eAAA,+HAAAiF,SAAA,CACtCC,EAAAA,IAACM,EAAI,CAACC,KAAK,uBAAuBzF,UAAU,UAAS,eAAA,kIACrDkF,EAAAA,IAAA,OAAA,CAAA,eAAA,gIAAAD,SAAM,gBAET,eAAA,gIANG,YAQNC,EAAAA,IAACuB,EAAG,CAEFC,aACE,MAAA,CAAK1G,UAAU,0BAAyB,eAAA,+HAAAiF,SAAA,CACtCC,EAAAA,IAACM,EAAI,CAACC,KAAK,kBAAkBzF,UAAU,UAAS,eAAA,kIAChDkF,EAAAA,IAAA,OAAA,CAAA,eAAA,gIAAAD,SAAM,kBAET,eAAA,gIANG,iBAWRG,EAAAA,KAAA,MAAA,CAAKpF,UAAU,wCAAuC,eAAA,8HAAAiF,UACpDG,EAAAA,KAAA,MAAA,CAAKpF,UAAU,cAAa,eAAA,+HAAAiF,UAC1BC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAC,WACxCG,EAAAA,KAAA,IAAA,CAAGpF,UAAU,oCAAmC,eAAA,6HAAAiF,SAAA,CAC7ClB,EAAaD,YAAYuB,QAAQ,GAAG,UAGzCD,EAAAA,KAAA,MAAA,CAAKpF,UAAU,cAAa,eAAA,+HAAAiF,UAC1BC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAC,eACxCG,EAAAA,KAAA,IAAA,CAAGpF,UAAU,qCAAoC,eAAA,6HAAAiF,SAAA,CAC9ClB,EAAaE,gBAAgBoB,QAAQ,GAAG,UAG7CD,EAAAA,KAAA,MAAA,CAAKpF,UAAU,cAAa,eAAA,+HAAAiF,UAC1BC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAC,mBACxCG,EAAAA,KAAA,IAAA,CAAGpF,UAAU,qCAAoC,eAAA,6HAAAiF,SAAA,CAC9ClB,EAAaC,cAAcqB,QAAQ,GAAG,UAG3CD,EAAAA,KAAA,MAAA,CAAKpF,UAAU,cAAa,eAAA,+HAAAiF,UAC1BC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAC,cACxCC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,qCAAoC,eAAA,6HAAAiF,SAC9ClB,EAAaI,oBAKtBe,EAAAA,IAACyB,EAAO,CAAA,eAAA,oIACRzB,EAAAA,IAAC0B,EAAQ,CAAA,eAAA,mIAAA3B,eACP,MAAA,CAAKjF,UAAU,YAAW,eAAA,8HAAAiF,eACvB4B,EAAmB,CAACC,MAAM,OAAOC,OAAO,OAAM,eAAA,+IAAA9B,eAC5C+B,EAAe,CAACC,KAAK,OAAM,eAAA,2IAAAhC,SACR,aAAjB1E,EACC6E,EAAAA,KAAC8B,EAAS,CACRlC,KAAMtD,EACNyF,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAAK,eAAA,qIAAAtC,UAErDC,EAAAA,IAAA,OAAA,CAAA,eAAA,gIAAAD,gBACE,iBAAA,CAAgBuC,GAAG,gBAAgBC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAG,eAAA,0IAAA3C,UAC5DC,EAAAA,IAAA,OAAA,CAAM2C,OAAO,KAAKC,UAAU,gCAAgCC,YAAa,GAAI,eAAA,kIAC7E7C,EAAAA,IAAA,OAAA,CAAM2C,OAAO,MAAMC,UAAU,gCAAgCC,YAAa,EAAE,eAAA,uIAGhF7C,EAAAA,IAAC8C,EAAa,CAACC,gBAAgB,MAAMC,UAAU,EAAOC,OAAO,6BAA4B,eAAA,2IACzFjD,EAAAA,IAACkD,EAAK,CACJC,QAAQ,QACRC,UAAU,EACVC,UAAU,EACVC,KAAM,CAAEC,SAAU,IAClBC,GAAI,GAAG,eAAA,mIAETxD,EAAAA,IAACyD,EAAK,CACJL,UAAU,EACVC,UAAU,EACVC,KAAM,CAAEC,SAAU,IAClBG,iBAA0B,GAAGzF,KAAKwB,IAAIkE,GAAOxD,QAAQ,MACrDyD,OAAQ,CAAC,UAAW,GAAG,eAAA,mIAEzB5D,EAAAA,IAAC6D,EAAO,CAACC,cAAUpE,GAAa,CAAA,eAAA,2IAAI,eAAA,qIACpCM,EAAAA,IAAC+D,EAAI,CACH1H,KAAK,WACL8G,QAAQ,WACRa,KAAK,WACLf,OAAO,4BACPgB,YAAa,EACbC,KAAK,sBACLC,YAAa,EACbC,UAAW,CAAEC,EAAG,EAAGF,YAAa,GAChCG,IAAqBC,IACb,MAAA3E,QAAEA,GAAY2E,EACpB,aAAI3E,WAASlC,iBAET,SAAA,CACE8G,GAAID,EAAMC,GACVC,GAAIF,EAAME,GACVJ,EAAG,EACHH,KAAK,6BACLjB,OAAO,QACPkB,YAAa,EAAE,eAAA,oIAId,MACP,eAAA,qIAINjE,EAAAA,KAACwE,EAAS,CACR5E,KAAMtD,EACNyF,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAAK,eAAA,qIAAAtC,SAAA,CAErDC,EAAAA,IAAC8C,EAAa,CAACC,gBAAgB,MAAMC,UAAU,EAAOC,OAAO,6BAA4B,eAAA,2IACzFjD,EAAAA,IAACkD,EAAK,CACJC,QAAQ,QACRC,UAAU,EACVC,UAAU,EACVC,KAAM,CAAEC,SAAU,IAClBC,GAAI,GAAG,eAAA,mIAETxD,EAAAA,IAACyD,EAAK,CACJL,UAAU,EACVC,UAAU,EACVC,KAAM,CAAEC,SAAU,IAClBG,cAA0BC,GAAA,GAAGA,EAAMxD,QAAQ,MAAM,eAAA,mIAEnDH,EAAAA,IAAC6D,EAAO,CAACC,cAAUpE,GAAa,CAAA,eAAA,2IAAI,eAAA,qIACpCM,EAAAA,IAAC2E,EAAI,CACHtI,KAAK,WACL8G,QAAQ,aACRa,KAAK,aACLf,OAAO,6BACPkB,YAAa,EACbG,IAAK,CAAED,EAAG,GACVD,UAAW,CAAEC,EAAG,EAAGF,YAAa,GAAI,eAAA,6IAUlDnE,EAAAA,IAAC4E,EAAK,CACJC,OAAQpJ,EACRqJ,aAAcpJ,EACdiF,KAAK,MACLoE,eAAe,SACf7D,WAAY,CACV8D,KAAM,iCACNC,QAAS,gBACTC,SAAU,cACVC,YAAa,wCAEfD,SAAS,OAAM,eAAA,gIAAAnF,eAEdqF,EAAY,CAACtK,UAAU,wHAAuH,eAAA,uIAAAiF,SAE3IG,GAAAA,EAAAA,KAAAD,WAAA,CAAAF,SAAA,CACEC,EAAAA,IAACqF,EAAW,CAACvK,UAAU,8GAA6G,eAAA,uIAAAiF,gBAClI,MAAA,CAAKjF,UAAU,0BAAyB,eAAA,+HAAAiF,UACtCC,EAAAA,IAAA,MAAA,CAAKlF,UAAU,gCAA+B,eAAA,+HAAAiF,eAC3CO,EAAI,CAACC,KAAK,uBAAuBzF,UAAU,sBAAqB,eAAA,oIAEnEoF,EAAAA,KAAA,MAAA,CAAA,eAAA,+HAAAH,UACEC,EAAAA,IAAA,OAAA,CAAMlF,UAAU,0BAAyB,eAAA,gIAAAiF,SAAC,+BAC1CG,EAAAA,KAAA,IAAA,CAAGpF,UAAU,kCAAiC,eAAA,6HAAAiF,UAC3C9E,EAAe,aAAe,gBAAgB,uCAKvD+E,EAAAA,IAACsF,EAAS,CAACxK,UAAU,MAAK,eAAA,qIAAAiF,gBACxB,MAAA,CAAKjF,UAAU,YAAW,eAAA,+HAAAiF,UAExBC,EAAAA,IAAA,MAAA,CAAKlF,UAAU,YAAW,eAAA,+HAAAiF,eACvB4B,EAAmB,CAACC,MAAM,OAAOC,OAAO,OAAM,eAAA,+IAAA9B,gBAC5CiC,EAAS,CACRlC,KAAMtD,EACNyF,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAAK,eAAA,qIAAAtC,UAErDC,EAAAA,IAAA,OAAA,CAAA,eAAA,gIAAAD,gBACE,iBAAA,CAAgBuC,GAAG,qBAAqBC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAG,eAAA,0IAAA3C,UACjEC,EAAAA,IAAA,OAAA,CAAM2C,OAAO,KAAKC,UAAU,gCAAgCC,YAAa,GAAI,eAAA,kIAC7E7C,EAAAA,IAAA,OAAA,CAAM2C,OAAO,MAAMC,UAAU,gCAAgCC,YAAa,EAAE,eAAA,uIAGhF7C,EAAAA,IAAC8C,EAAa,CAACC,gBAAgB,MAAME,OAAO,6BAA4B,eAAA,2IACxEjD,EAAAA,IAACkD,EAAK,CACJC,QAAQ,QACRC,UAAU,EACVC,UAAU,EACVC,KAAM,CAAEC,SAAU,IAAK,eAAA,mIAEzBvD,EAAAA,IAACyD,EAAK,CACJL,UAAU,EACVC,UAAU,EACVC,KAAM,CAAEC,SAAU,IAClBG,iBAA0B,GAAGzF,KAAKwB,IAAIkE,GAAOxD,QAAQ,MACrDyD,OAAQ,CAAC,UAAW,GAAG,eAAA,mIAEzB5D,EAAAA,IAAC6D,EAAO,CAACC,cAAUpE,GAAa,CAAA,eAAA,2IAAI,eAAA,qIACpCM,EAAAA,IAACuF,EAAM,CAAA,eAAA,oIACPvF,EAAAA,IAAC+D,EAAI,CACH1H,KAAK,WACL8G,QAAQ,WACRa,KAAK,aACLf,OAAO,4BACPgB,YAAa,EACbC,KAAK,2BACLC,YAAa,EACbC,UAAW,CAAEC,EAAG,EAAGF,YAAa,GAAI,eAAA,yIAO5CjE,EAAAA,KAACsF,EAAK,CACJ,aAAW,0BACXtE,WAAY,CACV+D,QAAS,oEACTQ,MAAO,kBACPC,GAAI,6FACJC,GAAI,iDACJC,GAAI,0CACJ,eAAA,iIAAA7F,SAAA,CAEFG,EAAAA,KAAC2F,EAAW,CAAA,eAAA,uIAAA9F,SAAA,CACVC,EAAAA,IAAC8F,EAAW,CAAYC,MAAM,QAAQnE,MAAO,GAAG,eAAA,uIAAA7B,SAAC,QAAhC,QACjBC,EAAAA,IAAC8F,EAAW,CAAoBC,MAAM,SAASnE,MAAO,IAAI,eAAA,uIAAA7B,SAAC,eAA1C,gBACjBC,EAAAA,IAAC8F,EAAW,CAAcC,MAAM,SAASnE,MAAO,IAAI,eAAA,uIAAA7B,SAAC,iBAApC,UACjBC,EAAAA,IAAC8F,EAAW,CAAkBC,MAAM,SAASnE,MAAO,IAAI,eAAA,uIAAA7B,SAAC,gBAAxC,cACjBC,EAAAA,IAAC8F,EAAW,CAAkBC,MAAM,SAASnE,MAAO,IAAI,eAAA,uIAAA7B,SAAC,cAAxC,cACjBC,EAAAA,IAAC8F,EAAW,CAAgBC,MAAM,SAASnE,MAAO,IAAI,eAAA,uIAAA7B,SAAC,YAAtC,eAEnBC,EAAAA,IAACgG,EAAS,CAAA,eAAA,qIAAAjG,SACPvD,EAAaI,IAAI,CAACqJ,EAAMxI,WACtByI,EAAQ,CAEPpL,WAAcmL,EAAKvI,UAAY,4CAA8C,wBAAlE,+BAAuH,eAAA,oIAAAqC,SAAA,CAElIC,EAAAA,IAACmG,EAAS,CAAA,eAAA,qIAAApG,gBACR,MAAA,CAAKjF,UAAU,0BAAyB,eAAA,+HAAAiF,UACrCkG,EAAKvI,iBACH4C,EAAI,CAACC,KAAK,eAAezF,UAAU,uBAAsB,eAAA,kIAE5DkF,EAAAA,IAAA,OAAA,CAAMlF,UAAU,UAAS,eAAA,gIAAAiF,SAAEkG,EAAKhJ,aAGpC+C,EAAAA,IAACmG,EAAS,CAAA,eAAA,qIAAApG,gBACR,OAAA,CAAMjF,UAAWmL,EAAK5I,cAAgB,EAAI,2BAA6B,0BAA0B,eAAA,gIAAA0C,SAAA,CAC9FkG,EAAK5I,cAAgB,EAAI,IAAM,GAAI4I,EAAK5I,aAAa8C,QAAQ,GAAG,SAGrEH,EAAAA,IAACmG,EAAS,CAAA,eAAA,qIAAApG,gBACR,OAAA,CAAMjF,UAAU,sBAAqB,eAAA,gIAAAiF,SAAA,CAClCkG,EAAKvJ,OAAOyD,QAAQ,GAAG,SAG5BH,EAAAA,IAACmG,EAAS,CAAA,eAAA,qIAAApG,eACR,OAAA,CAAMjF,UAAW,wBAAuBmL,EAAKtI,WAAa,EAAI,cAAgB,gBAAiB,eAAA,gIAAAoC,SACxE,IAApBkG,EAAKtI,WAAmB,QAAU,GAAGsI,EAAKtI,WAAWwC,QAAQ,UAGlEH,EAAAA,IAACmG,EAAS,CAAA,eAAA,qIAAApG,gBACR,OAAA,CAAMjF,UAAU,eAAc,eAAA,gIAAAiF,SAAA,CAC3BkG,EAAKpI,WAAWsC,QAAQ,GAAG,SAGhCH,EAAAA,IAACmG,EAAS,CAAA,eAAA,qIAAApG,gBACR,OAAA,CAAMjF,UAAWmL,EAAKrI,UAAY,GAAK,eAAiB,eAAe,eAAA,gIAAAmC,SAAA,CACpEkG,EAAKrI,SAASuC,QAAQ,GAAG,WAjCzB1C,+BA7TxB2C,EAAI,CAACtF,YAAqB,eAAA,+HAAAiF,SAAA,CACzBC,EAAAA,IAACK,EAAU,CAACvF,UAAU,sBAAqB,eAAA,qIAAAiF,eACzC,MAAA,CAAKjF,UAAU,2CAA0C,eAAA,+HAAAiF,gBACvD,MAAA,CAAKjF,UAAU,0BAAyB,eAAA,+HAAAiF,UACtCC,EAAAA,IAAA,MAAA,CAAKlF,UAAU,gCAA+B,eAAA,+HAAAiF,eAC3CO,EAAI,CAACC,KAAK,uBAAuBzF,UAAU,sBAAqB,eAAA,oIAEnEoF,EAAAA,KAAA,MAAA,CAAA,eAAA,+HAAAH,UACEC,EAAAA,IAAA,KAAA,CAAIlF,UAAU,wBAAuB,eAAA,8HAAAiF,SAAC,sBACtCC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAC,0CAKhDC,EAAAA,IAACyB,EAAO,CAAA,eAAA,oIACRzB,EAAAA,IAAC0B,EAAQ,CAAA,eAAA,mIAAA3B,gBACP,MAAA,CAAKjF,UAAU,kEAAiE,eAAA,+HAAAiF,SAAA,CAC9EC,EAAAA,IAACM,EAAI,CAACC,KAAK,qBAAqBzF,UAAU,kCAAiC,eAAA,kIAC3EkF,EAAAA,IAAA,IAAA,CAAGlF,UAAU,2BAA0B,eAAA,6HAAAiF,SAAC,4CACxCC,EAAAA,IAAA,IAAA,CAAGlF,UAAU,gCAA+B,eAAA,6HAAAiF,SACzC9D,EAAc,EACX,GAAGA,0DACH,wCAINiE,EAAAA,KAAA,MAAA,CAAKpF,UAAU,oDAAmD,eAAA,+HAAAiF,UAChEC,EAAAA,IAAA,IAAA,CAAA,eAAA,6HAAAD,eAAG,SAAA,CAAA,eAAA,kIAAAA,SAAQ,kBACXG,EAAAA,KAAA,IAAA,CAAA,eAAA,6HAAAH,SAAA,CAAG,mBAAiB9D,KACpBiE,EAAAA,KAAA,IAAA,CAAA,eAAA,6HAAAH,SAAA,CAAG,iBAAe7D,EAAQiE,QAAQ,MAClCD,EAAAA,KAAA,IAAA,CAAA,eAAA,6HAAAH,UAAG,0BAAuBhE,MAAAA,OAAAA,EAAAA,EAAmBU,SAAU,KACvDyD,EAAAA,KAAA,IAAA,CAAA,eAAA,6HAAAH,UAAG,iBAAe9E,EAAe,OAAS"}