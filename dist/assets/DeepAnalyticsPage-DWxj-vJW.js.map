{"version":3,"file":"DeepAnalyticsPage-DWxj-vJW.js","sources":["../../src/components/analytics/SetupFrequencyChart.tsx","../../src/utils/industrySectorMap.ts","../../src/components/analytics/IndustryDistributionChart.tsx","../../src/components/analytics/PnLDistributionCharts.tsx","../../node_modules/react-calendar-heatmap/dist/react-calendar-heatmap.esm.js","../../src/components/analytics/TradeHeatmap.tsx","../../src/pages/DeepAnalyticsPage.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { Trade } from '../../types/trade';\r\nimport { Card, CardBody, CardHeader, Divider } from '@heroui/react';\r\nimport { Icon } from '@iconify/react';\r\nimport { motion } from 'framer-motion';\r\nimport { useAccountingMethod } from '../../context/AccountingMethodContext';\r\nimport {\r\n  ResponsiveContainer,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip as RechartsTooltip,\r\n  Cell\r\n} from 'recharts';\r\n\r\ninterface SetupFrequencyChartProps {\r\n  trades: Trade[];\r\n}\r\n\r\nconst chartColors = [\r\n  '#4A8DFF', '#34D399', '#FF6B6B', '#FFC107', '#A78BFA',\r\n  '#56B4E9', '#009E73', '#F0E442', '#E69F00', '#D55E00'\r\n];\r\n\r\nconst CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"p-2.5 bg-background border border-divider shadow-lg rounded-lg\">\r\n          <p className=\"text-sm font-bold text-foreground\">{label}</p>\r\n          <p className=\"text-xs text-foreground-600\">Frequency: {payload[0].value}</p>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n};\r\n\r\nconst SetupFrequencyChart: React.FC<SetupFrequencyChartProps> = ({ trades }) => {\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n\r\n  const chartData = useMemo(() => {\r\n    // For cash basis, deduplicate trades to avoid double counting\r\n    let uniqueTrades = trades;\r\n    if (useCashBasis) {\r\n      const seenTradeIds = new Set();\r\n      uniqueTrades = trades.filter(trade => {\r\n        const originalId = trade.id.split('_exit_')[0];\r\n        if (seenTradeIds.has(originalId)) return false;\r\n        seenTradeIds.add(originalId);\r\n        return true;\r\n      });\r\n    }\r\n\r\n    const setupCounts: { [key: string]: number } = {};\r\n    uniqueTrades.forEach(trade => {\r\n      if (trade.setup) {\r\n        setupCounts[trade.setup] = (setupCounts[trade.setup] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    return Object.entries(setupCounts)\r\n      .map(([name, count], index) => ({\r\n        name,\r\n        count,\r\n        fill: chartColors[index % chartColors.length]\r\n      }))\r\n      .sort((a, b) => b.count - a.count);\r\n\r\n  }, [trades, useCashBasis]);\r\n\r\n  return (\r\n    <Card className=\"border-divider bg-background\">\r\n      <CardHeader>\r\n          <h2 className=\"text-lg font-bold text-foreground flex items-center gap-2\">\r\n            <Icon icon=\"lucide:pie-chart\" className=\"text-primary\" />\r\n            Trade Setup Analysis\r\n          </h2>\r\n      </CardHeader>\r\n      <Divider/>\r\n      <CardBody className=\"p-4 sm:p-6\">\r\n        {chartData.length > 0 ? (\r\n             <motion.div\r\n                style={{ height: '350px' }}\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ duration: 0.5 }}\r\n             >\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <BarChart data={chartData} layout=\"vertical\" margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                        <XAxis type=\"number\" hide />\r\n                        <YAxis\r\n                            dataKey=\"name\"\r\n                            type=\"category\"\r\n                            width={80}\r\n                            tick={{ fontSize: 12, fill: '#11181C' }} // Light mode foreground\r\n                            tickLine={false}\r\n                            axisLine={false}\r\n                            interval={0}\r\n                        />\r\n                        <RechartsTooltip\r\n                            cursor={{ fill: 'transparent' }}\r\n                            content={<CustomTooltip />}\r\n                            trigger=\"click\"\r\n                        />\r\n                        <Bar dataKey=\"count\" radius={[0, 8, 8, 0]} barSize={20}>\r\n                            {chartData.map((entry) => (\r\n                                <Cell key={`cell-${entry.name}`} fill={entry.fill} />\r\n                            ))}\r\n                        </Bar>\r\n                    </BarChart>\r\n                </ResponsiveContainer>\r\n             </motion.div>\r\n        ) : (\r\n            <div className=\"text-center text-foreground-500 h-[350px] flex items-center justify-center\">\r\n                No setup data available from trades.\r\n            </div>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SetupFrequencyChart;","import Papa from 'papaparse';\r\n\r\nexport interface IndustrySectorInfo {\r\n  name: string;\r\n  industry: string;\r\n  sector: string;\r\n}\r\n\r\nlet mapping: Record<string, IndustrySectorInfo> = {};\r\nlet loaded = false;\r\n\r\nexport async function loadIndustrySectorMapping(): Promise<void> {\r\n  if (loaded) return;\r\n  return new Promise((resolve, reject) => {\r\n    Papa.parse('/name_sector_industry.csv', {\r\n      download: true,\r\n      header: true,\r\n      complete: (results) => {\r\n        mapping = {};\r\n        for (const row of results.data as any[]) {\r\n          if (!row['Stock Name']) continue;\r\n          mapping[row['Stock Name'].toUpperCase()] = {\r\n            name: row['Stock Name'],\r\n            industry: row['Basic Industry'] || '',\r\n            sector: row['Sector'] || '',\r\n          };\r\n        }\r\n        loaded = true;\r\n        resolve();\r\n      },\r\n      error: (err) => reject(err),\r\n    });\r\n  });\r\n}\r\n\r\nexport function getIndustrySectorByName(name: string): IndustrySectorInfo | undefined {\r\n  return mapping[name.toUpperCase()];\r\n}\r\n\r\nexport function getAllIndustrySectorMappings(): IndustrySectorInfo[] {\r\n  return Object.values(mapping);\r\n}","import React from 'react';\r\nimport {\r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  Tooltip as RechartsTooltip,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid\r\n} from 'recharts';\r\nimport { Card, CardBody, CardHeader } from \"@heroui/react\";\r\nimport { motion } from 'framer-motion';\r\n\r\ninterface ChartData {\r\n  name: string;\r\n  trades: number;\r\n  stockNames?: string[];\r\n}\r\n\r\ninterface Props {\r\n  data: ChartData[];\r\n  colors: string[];\r\n  title: string;\r\n}\r\n\r\nconst CustomLegend = ({ payload }: { payload: any[] }) => (\r\n    <div className=\"flex flex-wrap justify-center items-center gap-x-4 sm:gap-x-6 gap-y-2 mb-4\">\r\n        {payload.map((entry, index) => (\r\n            <div key={`item-${index}`} className=\"flex items-center gap-2\">\r\n                <div className=\"w-2.5 h-2.5 rounded-full\" style={{ backgroundColor: entry.color }} />\r\n                <span className=\"text-xs font-medium text-foreground-600\">{entry.value}</span>\r\n            </div>\r\n        ))}\r\n    </div>\r\n);\r\n\r\nconst IndustryDistributionChart: React.FC<Props> = ({ data, colors, title }) => {\r\n  const chartData = React.useMemo(() => {\r\n    const totalTrades = data.reduce((sum, item) => sum + item.trades, 0);\r\n    return data.map((item, index) => ({\r\n      ...item,\r\n      percentage: totalTrades > 0 ? (item.trades / totalTrades) * 100 : 0,\r\n      fill: colors[index % colors.length],\r\n    })).sort((a,b) => b.percentage - a.percentage).slice(0, 5); // Take top 5\r\n  }, [data, colors]);\r\n\r\n  const CustomTooltip = ({ active, payload }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0].payload;\r\n      const stockNames = data.stockNames || [];\r\n      return (\r\n        <div className=\"p-3 bg-background border border-divider shadow-xl rounded-lg max-w-xs\">\r\n          <p className=\"text-sm font-semibold text-foreground\">{data.name}</p>\r\n          {stockNames.length > 0 && (\r\n            <>\r\n              <div className=\"border-t border-divider my-2\" />\r\n              <p className=\"text-xs text-foreground-600 leading-snug break-words\">\r\n                {stockNames.join(', ')}\r\n              </p>\r\n            </>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const RADIAN = Math.PI / 180;\r\n  const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\r\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.6;\r\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n    if (percent * 100 < 5) return null;\r\n\r\n    return (\r\n      <text x={x} y={y} fill=\"var(--foreground)\" textAnchor=\"middle\" dominantBaseline=\"central\" className=\"text-[10px] font-bold pointer-events-none\">\r\n        {`${(percent * 100).toFixed(1)}%`}\r\n      </text>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5, ease: \"easeOut\" }}\r\n      className=\"will-change-transform\"\r\n    >\r\n      <Card className=\"border-divider bg-background\">\r\n        <CardHeader>\r\n            <h2 className=\"text-lg font-bold text-foreground\">{title} Analysis</h2>\r\n        </CardHeader>\r\n        <CardBody className=\"p-4 sm:p-6\">\r\n            <CustomLegend payload={chartData.map(item => ({ value: item.name, type: 'circle', color: item.fill }))} />\r\n\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center mt-6\">\r\n                <div className=\"w-full\">\r\n                    <h3 className=\"text-md font-semibold text-center text-foreground-600 mb-2\">{title} Distribution</h3>\r\n                     <ResponsiveContainer width=\"100%\" height={280}>\r\n                        <PieChart>\r\n                            <RechartsTooltip content={<CustomTooltip />} />\r\n                            <Pie\r\n                                data={chartData}\r\n                                cx=\"50%\"\r\n                                cy=\"50%\"\r\n                                labelLine={false}\r\n                                label={renderCustomizedLabel}\r\n                                innerRadius=\"60%\"\r\n                                outerRadius=\"85%\"\r\n                                dataKey=\"trades\"\r\n                                stroke=\"none\"\r\n                                paddingAngle={2}\r\n                            >\r\n                                {chartData.map((entry, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={entry.fill} />\r\n                                ))}\r\n                            </Pie>\r\n                        </PieChart>\r\n                     </ResponsiveContainer>\r\n                </div>\r\n                <div className=\"w-full\">\r\n                    <h3 className=\"text-md font-semibold text-center text-foreground-600 mb-4\">Top {title}s</h3>\r\n                     <ResponsiveContainer width=\"100%\" height={280}>\r\n                        <BarChart\r\n                            data={chartData}\r\n                            layout=\"vertical\"\r\n                            margin={{ top: 0, right: 30, left: 10, bottom: 0 }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--divider)\" horizontal={false} />\r\n                            <XAxis\r\n                                type=\"number\"\r\n                                tickFormatter={(tick) => `${Math.round(tick)}%`}\r\n                                domain={[0, 'dataMax']}\r\n                                tick={{ fontSize: 11, fill: 'var(--foreground)' }}\r\n                                axisLine={false}\r\n                                tickLine={false}\r\n                                tickCount={5}\r\n                            />\r\n                            <YAxis\r\n                              dataKey=\"name\"\r\n                              type=\"category\"\r\n                              width={120}\r\n                              tick={{ fontSize: 12, fill: 'var(--foreground)', fontWeight: 600 }}\r\n                              axisLine={false}\r\n                              tickLine={false}\r\n                              interval={0}\r\n                              tickFormatter={(value) => value.length > 18 ? `${value.substring(0, 17)}...` : value}\r\n                            />\r\n                            <RechartsTooltip cursor={{ fill: 'transparent' }} content={<CustomTooltip />} />\r\n                            <Bar dataKey=\"percentage\" barSize={15} radius={[0, 8, 8, 0]}>\r\n                               {chartData.map((entry) => (\r\n                                    <Cell key={`cell-${entry.name}`} fill={entry.fill} />\r\n                                ))}\r\n                            </Bar>\r\n                        </BarChart>\r\n                     </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n        </CardBody>\r\n      </Card>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default IndustryDistributionChart;","import React, { useMemo } from 'react';\r\nimport { Card, CardBody, CardHeader, Divider } from \"@heroui/react\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\r\nimport { Trade } from '../../types/trade';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { useAccountingCalculations, useAccountingMethodDisplay } from '../../hooks/use-accounting-calculations';\r\n\r\ninterface PnLDistributionChartsProps {\r\n    trades: Trade[];\r\n}\r\n\r\nconst PnLDistributionCharts: React.FC<PnLDistributionChartsProps> = ({ trades }) => {\r\n    const { tradesWithAccountingPL } = useAccountingCalculations(trades);\r\n    const { displayName } = useAccountingMethodDisplay();\r\n\r\n    // Calculate PnL by Symbol using accounting method\r\n    const symbolPnLData = useMemo(() => {\r\n        const pnlBySymbol = tradesWithAccountingPL.reduce((acc, trade) => {\r\n            if (trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial') {\r\n                const symbol = trade.name;\r\n                acc[symbol] = (acc[symbol] || 0) + trade.accountingPL;\r\n            }\r\n            return acc;\r\n        }, {} as Record<string, number>);\r\n\r\n        // Convert to array and sort by PnL descending\r\n        return Object.entries(pnlBySymbol)\r\n            .map(([symbol, pnl]) => ({ symbol, pnl }))\r\n            .sort((a, b) => (b.pnl as number) - (a.pnl as number))\r\n            .slice(0, 10); // Top 10 symbols\r\n    }, [tradesWithAccountingPL]);\r\n\r\n    // Calculate PnL by Day of Week using accounting method\r\n    const dayPnLData = useMemo(() => {\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        const pnlByDay = tradesWithAccountingPL.reduce((acc, trade) => {\r\n            if ((trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial') && trade.date) {\r\n                const dayIndex = new Date(trade.date).getDay();\r\n                const day = days[dayIndex];\r\n                acc[day] = (acc[day] || 0) + trade.accountingPL;\r\n            }\r\n            return acc;\r\n        }, {} as Record<string, number>);\r\n\r\n        // Convert to array maintaining day order\r\n        return days.map(day => ({\r\n            day,\r\n            pnl: pnlByDay[day] || 0\r\n        }));\r\n    }, [tradesWithAccountingPL]);\r\n\r\n    const formatCurrency = (value: number) => {\r\n        return new Intl.NumberFormat('en-IN', {\r\n            style: 'currency',\r\n            currency: 'INR',\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 0\r\n        }).format(value);\r\n    };\r\n\r\n    const CustomTooltip = ({ active, payload, label }: any) => {\r\n        if (active && payload && payload.length) {\r\n            return (\r\n                <motion.div\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    exit={{ opacity: 0, y: -10 }}\r\n                    className=\"bg-background border border-divider p-4 rounded-lg shadow-lg\"\r\n                >\r\n                    <p className=\"text-sm font-medium text-foreground\">{label}</p>\r\n                    <p className={`text-sm font-semibold mt-1.5 ${payload[0].value >= 0 ? 'text-emerald-600 dark:text-emerald-400' : 'text-red-600 dark:text-red-400'}`}>\r\n                        {formatCurrency(payload[0].value)}\r\n                    </p>\r\n                </motion.div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // Common chart configurations\r\n    const chartConfig = {\r\n        barSize: 28,\r\n        barGap: 0.2,\r\n        style: {\r\n            fontFamily: 'var(--font-sans)',\r\n            backgroundColor: 'transparent'\r\n        }\r\n    };\r\n\r\n    const getBarColor = (value: number) => {\r\n        return value >= 0 ? \"#10b981\" : \"#ef4444\";\r\n    };\r\n\r\n    // Animation variants for Framer Motion\r\n    const containerVariants = {\r\n        hidden: { opacity: 0 },\r\n        visible: {\r\n            opacity: 1,\r\n            transition: {\r\n                staggerChildren: 0.1\r\n            }\r\n        }\r\n    };\r\n\r\n    const cardVariants = {\r\n        hidden: { opacity: 0, y: 20 },\r\n        visible: {\r\n            opacity: 1,\r\n            y: 0,\r\n            transition: {\r\n                type: \"spring\",\r\n                stiffness: 100,\r\n                damping: 15\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <motion.div\r\n            className=\"space-y-8\"\r\n            variants={containerVariants}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n        >\r\n            {/* Accounting Method Indicator */}\r\n            <div className=\"flex items-center gap-2 text-sm text-default-600 bg-default-50 p-3 rounded-lg\">\r\n                <Icon icon=\"lucide:bar-chart-3\" className=\"w-4 h-4\" />\r\n                <span>P/L distributions calculated using {displayName} Accounting</span>\r\n            </div>\r\n            {/* Symbol-wise PnL Chart */}\r\n            <motion.div variants={cardVariants}>\r\n                <Card className=\"border border-divider shadow-sm hover:shadow-md transition-shadow duration-200 bg-background\">\r\n                    <CardHeader className=\"px-6 py-5\">\r\n                        <div className=\"flex flex-col\">\r\n                            <h3 className=\"text-lg font-semibold text-foreground\">Aggregate PnL vs Symbol</h3>\r\n                            <p className=\"text-sm text-default-500 mt-1\">Top 10 symbols by P&L (Descending)</p>\r\n                        </div>\r\n                    </CardHeader>\r\n                    <Divider/>\r\n                    <CardBody className=\"px-6 py-5\">\r\n                        <div className=\"h-[320px] bg-background\">\r\n                            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                                <BarChart\r\n                                    data={symbolPnLData}\r\n                                    margin={{ top: 20, right: 30, left: 40, bottom: 60 }}\r\n                                    barSize={chartConfig.barSize}\r\n                                    barGap={chartConfig.barGap}\r\n                                    style={chartConfig.style}\r\n                                >\r\n                                    <CartesianGrid\r\n                                        strokeDasharray=\"3 3\"\r\n                                        vertical={false}\r\n                                        stroke=\"hsl(var(--heroui-divider))\"\r\n                                        opacity={0.5}\r\n                                    />\r\n                                    <XAxis\r\n                                        dataKey=\"symbol\"\r\n                                        angle={-45}\r\n                                        textAnchor=\"end\"\r\n                                        height={60}\r\n                                        interval={0}\r\n                                        tick={{ fill: 'hsl(var(--heroui-foreground))', fontSize: 12 }}\r\n                                        axisLine={{ stroke: 'hsl(var(--heroui-divider))' }}\r\n                                    />\r\n                                    <YAxis\r\n                                        tickFormatter={formatCurrency}\r\n                                        tick={{ fill: 'hsl(var(--heroui-foreground))', fontSize: 12 }}\r\n                                        axisLine={{ stroke: 'hsl(var(--heroui-divider))' }}\r\n                                    />\r\n                                    <Tooltip\r\n                                        content={<CustomTooltip />}\r\n                                        cursor={{ fill: 'hsl(var(--heroui-content2))', opacity: 0.1 }}\r\n                                    />\r\n                                    <Bar\r\n                                        dataKey=\"pnl\"\r\n                                        name=\"P&L\"\r\n                                        radius={[4, 4, 0, 0]}\r\n                                        animationDuration={1000}\r\n                                        animationBegin={0}\r\n                                    >\r\n                                        {symbolPnLData.map((entry, index) => (\r\n                                            <Cell\r\n                                                key={`cell-${index}`}\r\n                                                fill={getBarColor(entry.pnl as number)}\r\n                                                fillOpacity={0.9}\r\n                                            />\r\n                                        ))}\r\n                                    </Bar>\r\n                                </BarChart>\r\n                            </ResponsiveContainer>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </motion.div>\r\n\r\n            {/* Day-wise PnL Chart */}\r\n            <motion.div variants={cardVariants}>\r\n                <Card className=\"border border-divider shadow-sm hover:shadow-md transition-shadow duration-200 bg-background\">\r\n                    <CardHeader className=\"px-6 py-5\">\r\n                        <div className=\"flex flex-col\">\r\n                            <h3 className=\"text-lg font-semibold text-foreground\">Aggregate PnL vs Day</h3>\r\n                            <p className=\"text-sm text-default-500 mt-1\">P&L distribution across weekdays</p>\r\n                        </div>\r\n                    </CardHeader>\r\n                    <Divider/>\r\n                    <CardBody className=\"px-6 py-5\">\r\n                        <div className=\"h-[320px] bg-background\">\r\n                            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                                <BarChart\r\n                                    data={dayPnLData}\r\n                                    margin={{ top: 20, right: 30, left: 40, bottom: 5 }}\r\n                                    barSize={chartConfig.barSize}\r\n                                    barGap={chartConfig.barGap}\r\n                                    style={chartConfig.style}\r\n                                >\r\n                                    <CartesianGrid\r\n                                        strokeDasharray=\"3 3\"\r\n                                        vertical={false}\r\n                                        stroke=\"hsl(var(--heroui-divider))\"\r\n                                        opacity={0.5}\r\n                                    />\r\n                                    <XAxis\r\n                                        dataKey=\"day\"\r\n                                        tick={{ fill: 'hsl(var(--heroui-foreground))', fontSize: 12 }}\r\n                                        axisLine={{ stroke: 'hsl(var(--heroui-divider))' }}\r\n                                    />\r\n                                    <YAxis\r\n                                        tickFormatter={formatCurrency}\r\n                                        tick={{ fill: 'hsl(var(--heroui-foreground))', fontSize: 12 }}\r\n                                        axisLine={{ stroke: 'hsl(var(--heroui-divider))' }}\r\n                                    />\r\n                                    <Tooltip\r\n                                        content={<CustomTooltip />}\r\n                                        cursor={{ fill: 'hsl(var(--heroui-content2))', opacity: 0.1 }}\r\n                                    />\r\n                                    <Bar\r\n                                        dataKey=\"pnl\"\r\n                                        name=\"P&L\"\r\n                                        radius={[4, 4, 0, 0]}\r\n                                        animationDuration={1000}\r\n                                        animationBegin={0}\r\n                                    >\r\n                                        {dayPnLData.map((entry, index) => (\r\n                                            <Cell\r\n                                                key={`cell-${index}`}\r\n                                                fill={getBarColor(entry.pnl)}\r\n                                                fillOpacity={0.9}\r\n                                            />\r\n                                        ))}\r\n                                    </Bar>\r\n                                </BarChart>\r\n                            </ResponsiveContainer>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </motion.div>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default PnLDistributionCharts;","import React from 'react';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret;\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nvar factoryWithThrowingShims = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret_1) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  }  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  }  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\nvar propTypes = createCommonjsModule(function (module) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n{\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = factoryWithThrowingShims();\n}\n});\n\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (newInputs[i] !== lastInputs[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n\nvar MILLISECONDS_IN_ONE_DAY = 24 * 60 * 60 * 1000;\nvar DAYS_IN_WEEK = 7;\nvar MONTH_LABELS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nvar DAY_LABELS = ['', 'Mon', '', 'Wed', '', 'Fri', ''];\n\n// returns a new date shifted a certain number of days (can be negative)\nfunction shiftDate(date, numDays) {\n  var newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + numDays);\n  return newDate;\n}\nfunction getBeginningTimeForDate(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n} // obj can be a parseable string, a millisecond timestamp, or a Date object\n\nfunction convertToDate(obj) {\n  return obj instanceof Date ? obj : new Date(obj);\n}\nfunction dateNDaysAgo(numDaysAgo) {\n  return shiftDate(new Date(), -numDaysAgo);\n}\nfunction getRange(count) {\n  var arr = [];\n\n  for (var idx = 0; idx < count; idx += 1) {\n    arr.push(idx);\n  }\n\n  return arr;\n}\n\nvar SQUARE_SIZE = 10;\nvar MONTH_LABEL_GUTTER_SIZE = 4;\nvar CSS_PSEDUO_NAMESPACE = 'react-calendar-heatmap-';\n\nvar CalendarHeatmap =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalendarHeatmap, _React$Component);\n\n  function CalendarHeatmap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CalendarHeatmap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CalendarHeatmap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getValueCache\", memoizeOne(function (props) {\n      return props.values.reduce(function (memo, value) {\n        var date = convertToDate(value.date);\n        var index = Math.floor((date - _this.getStartDateWithEmptyDays()) / MILLISECONDS_IN_ONE_DAY); // eslint-disable-next-line no-param-reassign\n\n        memo[index] = {\n          value: value,\n          className: _this.props.classForValue(value),\n          title: _this.props.titleForValue ? _this.props.titleForValue(value) : null,\n          tooltipDataAttrs: _this.getTooltipDataAttrsForValue(value)\n        };\n        return memo;\n      }, {});\n    }));\n\n    return _this;\n  }\n\n  _createClass(CalendarHeatmap, [{\n    key: \"getDateDifferenceInDays\",\n    value: function getDateDifferenceInDays() {\n      var _this$props = this.props,\n          startDate = _this$props.startDate,\n          numDays = _this$props.numDays;\n\n      if (numDays) {\n        // eslint-disable-next-line no-console\n        console.warn('numDays is a deprecated prop. It will be removed in the next release. Consider using the startDate prop instead.');\n        return numDays;\n      }\n\n      var timeDiff = this.getEndDate() - convertToDate(startDate);\n      return Math.ceil(timeDiff / MILLISECONDS_IN_ONE_DAY);\n    }\n  }, {\n    key: \"getSquareSizeWithGutter\",\n    value: function getSquareSizeWithGutter() {\n      return SQUARE_SIZE + this.props.gutterSize;\n    }\n  }, {\n    key: \"getMonthLabelSize\",\n    value: function getMonthLabelSize() {\n      if (!this.props.showMonthLabels) {\n        return 0;\n      }\n\n      if (this.props.horizontal) {\n        return SQUARE_SIZE + MONTH_LABEL_GUTTER_SIZE;\n      }\n\n      return 2 * (SQUARE_SIZE + MONTH_LABEL_GUTTER_SIZE);\n    }\n  }, {\n    key: \"getWeekdayLabelSize\",\n    value: function getWeekdayLabelSize() {\n      if (!this.props.showWeekdayLabels) {\n        return 0;\n      }\n\n      if (this.props.horizontal) {\n        return 30;\n      }\n\n      return SQUARE_SIZE * 1.5;\n    }\n  }, {\n    key: \"getStartDate\",\n    value: function getStartDate() {\n      return shiftDate(this.getEndDate(), -this.getDateDifferenceInDays() + 1); // +1 because endDate is inclusive\n    }\n  }, {\n    key: \"getEndDate\",\n    value: function getEndDate() {\n      return getBeginningTimeForDate(convertToDate(this.props.endDate));\n    }\n  }, {\n    key: \"getStartDateWithEmptyDays\",\n    value: function getStartDateWithEmptyDays() {\n      return shiftDate(this.getStartDate(), -this.getNumEmptyDaysAtStart());\n    }\n  }, {\n    key: \"getNumEmptyDaysAtStart\",\n    value: function getNumEmptyDaysAtStart() {\n      return this.getStartDate().getDay();\n    }\n  }, {\n    key: \"getNumEmptyDaysAtEnd\",\n    value: function getNumEmptyDaysAtEnd() {\n      return DAYS_IN_WEEK - 1 - this.getEndDate().getDay();\n    }\n  }, {\n    key: \"getWeekCount\",\n    value: function getWeekCount() {\n      var numDaysRoundedToWeek = this.getDateDifferenceInDays() + this.getNumEmptyDaysAtStart() + this.getNumEmptyDaysAtEnd();\n      return Math.ceil(numDaysRoundedToWeek / DAYS_IN_WEEK);\n    }\n  }, {\n    key: \"getWeekWidth\",\n    value: function getWeekWidth() {\n      return DAYS_IN_WEEK * this.getSquareSizeWithGutter();\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.getWeekCount() * this.getSquareSizeWithGutter() - (this.props.gutterSize - this.getWeekdayLabelSize());\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.getWeekWidth() + (this.getMonthLabelSize() - this.props.gutterSize) + this.getWeekdayLabelSize();\n    }\n  }, {\n    key: \"getValueForIndex\",\n    value: function getValueForIndex(index) {\n      if (this.valueCache[index]) {\n        return this.valueCache[index].value;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getClassNameForIndex\",\n    value: function getClassNameForIndex(index) {\n      if (this.valueCache[index]) {\n        return this.valueCache[index].className;\n      }\n\n      return this.props.classForValue(null);\n    }\n  }, {\n    key: \"getTitleForIndex\",\n    value: function getTitleForIndex(index) {\n      if (this.valueCache[index]) {\n        return this.valueCache[index].title;\n      }\n\n      return this.props.titleForValue ? this.props.titleForValue(null) : null;\n    }\n  }, {\n    key: \"getTooltipDataAttrsForIndex\",\n    value: function getTooltipDataAttrsForIndex(index) {\n      if (this.valueCache[index]) {\n        return this.valueCache[index].tooltipDataAttrs;\n      }\n\n      return this.getTooltipDataAttrsForValue({\n        date: null,\n        count: null\n      });\n    }\n  }, {\n    key: \"getTooltipDataAttrsForValue\",\n    value: function getTooltipDataAttrsForValue(value) {\n      var tooltipDataAttrs = this.props.tooltipDataAttrs;\n\n      if (typeof tooltipDataAttrs === 'function') {\n        return tooltipDataAttrs(value);\n      }\n\n      return tooltipDataAttrs;\n    }\n  }, {\n    key: \"getTransformForWeek\",\n    value: function getTransformForWeek(weekIndex) {\n      if (this.props.horizontal) {\n        return \"translate(\".concat(weekIndex * this.getSquareSizeWithGutter(), \", 0)\");\n      }\n\n      return \"translate(0, \".concat(weekIndex * this.getSquareSizeWithGutter(), \")\");\n    }\n  }, {\n    key: \"getTransformForWeekdayLabels\",\n    value: function getTransformForWeekdayLabels() {\n      if (this.props.horizontal) {\n        return \"translate(\".concat(SQUARE_SIZE, \", \").concat(this.getMonthLabelSize(), \")\");\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getTransformForMonthLabels\",\n    value: function getTransformForMonthLabels() {\n      if (this.props.horizontal) {\n        return \"translate(\".concat(this.getWeekdayLabelSize(), \", 0)\");\n      }\n\n      return \"translate(\".concat(this.getWeekWidth() + MONTH_LABEL_GUTTER_SIZE, \", \").concat(this.getWeekdayLabelSize(), \")\");\n    }\n  }, {\n    key: \"getTransformForAllWeeks\",\n    value: function getTransformForAllWeeks() {\n      if (this.props.horizontal) {\n        return \"translate(\".concat(this.getWeekdayLabelSize(), \", \").concat(this.getMonthLabelSize(), \")\");\n      }\n\n      return \"translate(0, \".concat(this.getWeekdayLabelSize(), \")\");\n    }\n  }, {\n    key: \"getViewBox\",\n    value: function getViewBox() {\n      if (this.props.horizontal) {\n        return \"0 0 \".concat(this.getWidth(), \" \").concat(this.getHeight());\n      }\n\n      return \"0 0 \".concat(this.getHeight(), \" \").concat(this.getWidth());\n    }\n  }, {\n    key: \"getSquareCoordinates\",\n    value: function getSquareCoordinates(dayIndex) {\n      if (this.props.horizontal) {\n        return [0, dayIndex * this.getSquareSizeWithGutter()];\n      }\n\n      return [dayIndex * this.getSquareSizeWithGutter(), 0];\n    }\n  }, {\n    key: \"getWeekdayLabelCoordinates\",\n    value: function getWeekdayLabelCoordinates(dayIndex) {\n      if (this.props.horizontal) {\n        return [0, (dayIndex + 1) * SQUARE_SIZE + dayIndex * this.props.gutterSize];\n      }\n\n      return [dayIndex * SQUARE_SIZE + dayIndex * this.props.gutterSize, SQUARE_SIZE];\n    }\n  }, {\n    key: \"getMonthLabelCoordinates\",\n    value: function getMonthLabelCoordinates(weekIndex) {\n      if (this.props.horizontal) {\n        return [weekIndex * this.getSquareSizeWithGutter(), this.getMonthLabelSize() - MONTH_LABEL_GUTTER_SIZE];\n      }\n\n      var verticalOffset = -2;\n      return [0, (weekIndex + 1) * this.getSquareSizeWithGutter() + verticalOffset];\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(value) {\n      if (this.props.onClick) {\n        this.props.onClick(value);\n      }\n    }\n  }, {\n    key: \"handleMouseOver\",\n    value: function handleMouseOver(e, value) {\n      if (this.props.onMouseOver) {\n        this.props.onMouseOver(e, value);\n      }\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave(e, value) {\n      if (this.props.onMouseLeave) {\n        this.props.onMouseLeave(e, value);\n      }\n    }\n  }, {\n    key: \"renderSquare\",\n    value: function renderSquare(dayIndex, index) {\n      var _this2 = this;\n\n      var indexOutOfRange = index < this.getNumEmptyDaysAtStart() || index >= this.getNumEmptyDaysAtStart() + this.getDateDifferenceInDays();\n\n      if (indexOutOfRange && !this.props.showOutOfRangeDays) {\n        return null;\n      }\n\n      var _this$getSquareCoordi = this.getSquareCoordinates(dayIndex),\n          _this$getSquareCoordi2 = _slicedToArray(_this$getSquareCoordi, 2),\n          x = _this$getSquareCoordi2[0],\n          y = _this$getSquareCoordi2[1];\n\n      var value = this.getValueForIndex(index);\n      var rect = // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n      React.createElement(\"rect\", _extends({\n        key: index,\n        width: SQUARE_SIZE,\n        height: SQUARE_SIZE,\n        x: x,\n        y: y,\n        className: this.getClassNameForIndex(index),\n        onClick: function onClick() {\n          return _this2.handleClick(value);\n        },\n        onMouseOver: function onMouseOver(e) {\n          return _this2.handleMouseOver(e, value);\n        },\n        onMouseLeave: function onMouseLeave(e) {\n          return _this2.handleMouseLeave(e, value);\n        }\n      }, this.getTooltipDataAttrsForIndex(index)), React.createElement(\"title\", null, this.getTitleForIndex(index)));\n      var transformDayElement = this.props.transformDayElement;\n      return transformDayElement ? transformDayElement(rect, value, index) : rect;\n    }\n  }, {\n    key: \"renderWeek\",\n    value: function renderWeek(weekIndex) {\n      var _this3 = this;\n\n      return React.createElement(\"g\", {\n        key: weekIndex,\n        transform: this.getTransformForWeek(weekIndex),\n        className: \"\".concat(CSS_PSEDUO_NAMESPACE, \"week\")\n      }, getRange(DAYS_IN_WEEK).map(function (dayIndex) {\n        return _this3.renderSquare(dayIndex, weekIndex * DAYS_IN_WEEK + dayIndex);\n      }));\n    }\n  }, {\n    key: \"renderAllWeeks\",\n    value: function renderAllWeeks() {\n      var _this4 = this;\n\n      return getRange(this.getWeekCount()).map(function (weekIndex) {\n        return _this4.renderWeek(weekIndex);\n      });\n    }\n  }, {\n    key: \"renderMonthLabels\",\n    value: function renderMonthLabels() {\n      var _this5 = this;\n\n      if (!this.props.showMonthLabels) {\n        return null;\n      }\n\n      var weekRange = getRange(this.getWeekCount() - 1); // don't render for last week, because label will be cut off\n\n      return weekRange.map(function (weekIndex) {\n        var endOfWeek = shiftDate(_this5.getStartDateWithEmptyDays(), (weekIndex + 1) * DAYS_IN_WEEK);\n\n        var _this5$getMonthLabelC = _this5.getMonthLabelCoordinates(weekIndex),\n            _this5$getMonthLabelC2 = _slicedToArray(_this5$getMonthLabelC, 2),\n            x = _this5$getMonthLabelC2[0],\n            y = _this5$getMonthLabelC2[1];\n\n        return endOfWeek.getDate() >= 1 && endOfWeek.getDate() <= DAYS_IN_WEEK ? React.createElement(\"text\", {\n          key: weekIndex,\n          x: x,\n          y: y,\n          className: \"\".concat(CSS_PSEDUO_NAMESPACE, \"month-label\")\n        }, _this5.props.monthLabels[endOfWeek.getMonth()]) : null;\n      });\n    }\n  }, {\n    key: \"renderWeekdayLabels\",\n    value: function renderWeekdayLabels() {\n      var _this6 = this;\n\n      if (!this.props.showWeekdayLabels) {\n        return null;\n      }\n\n      return this.props.weekdayLabels.map(function (weekdayLabel, dayIndex) {\n        var _this6$getWeekdayLabe = _this6.getWeekdayLabelCoordinates(dayIndex),\n            _this6$getWeekdayLabe2 = _slicedToArray(_this6$getWeekdayLabe, 2),\n            x = _this6$getWeekdayLabe2[0],\n            y = _this6$getWeekdayLabe2[1];\n\n        var cssClasses = \"\".concat(_this6.props.horizontal ? '' : \"\".concat(CSS_PSEDUO_NAMESPACE, \"small-text\"), \" \").concat(CSS_PSEDUO_NAMESPACE, \"weekday-label\"); // eslint-disable-next-line no-bitwise\n\n        return dayIndex & 1 ? React.createElement(\"text\", {\n          key: \"\".concat(x).concat(y),\n          x: x,\n          y: y,\n          className: cssClasses\n        }, weekdayLabel) : null;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.valueCache = this.getValueCache(this.props);\n      return React.createElement(\"svg\", {\n        className: \"react-calendar-heatmap\",\n        viewBox: this.getViewBox()\n      }, React.createElement(\"g\", {\n        transform: this.getTransformForMonthLabels(),\n        className: \"\".concat(CSS_PSEDUO_NAMESPACE, \"month-labels\")\n      }, this.renderMonthLabels()), React.createElement(\"g\", {\n        transform: this.getTransformForAllWeeks(),\n        className: \"\".concat(CSS_PSEDUO_NAMESPACE, \"all-weeks\")\n      }, this.renderAllWeeks()), React.createElement(\"g\", {\n        transform: this.getTransformForWeekdayLabels(),\n        className: \"\".concat(CSS_PSEDUO_NAMESPACE, \"weekday-labels\")\n      }, this.renderWeekdayLabels()));\n    }\n  }]);\n\n  return CalendarHeatmap;\n}(React.Component);\n\nCalendarHeatmap.propTypes = {\n  values: propTypes.arrayOf(propTypes.shape({\n    date: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.instanceOf(Date)]).isRequired\n  }).isRequired).isRequired,\n  // array of objects with date and arbitrary metadata\n  numDays: propTypes.number,\n  // number of days back from endDate to show\n  startDate: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.instanceOf(Date)]),\n  // start of date range\n  endDate: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.instanceOf(Date)]),\n  // end of date range\n  gutterSize: propTypes.number,\n  // size of space between squares\n  horizontal: propTypes.bool,\n  // whether to orient horizontally or vertically\n  showMonthLabels: propTypes.bool,\n  // whether to show month labels\n  showWeekdayLabels: propTypes.bool,\n  // whether to show weekday labels\n  showOutOfRangeDays: propTypes.bool,\n  // whether to render squares for extra days in week after endDate, and before start date\n  tooltipDataAttrs: propTypes.oneOfType([propTypes.object, propTypes.func]),\n  // data attributes to add to square for setting 3rd party tooltips, e.g. { 'data-toggle': 'tooltip' } for bootstrap tooltips\n  titleForValue: propTypes.func,\n  // function which returns title text for value\n  classForValue: propTypes.func,\n  // function which returns html class for value\n  monthLabels: propTypes.arrayOf(propTypes.string),\n  // An array with 12 strings representing the text from janurary to december\n  weekdayLabels: propTypes.arrayOf(propTypes.string),\n  // An array with 7 strings representing the text from Sun to Sat\n  onClick: propTypes.func,\n  // callback function when a square is clicked\n  onMouseOver: propTypes.func,\n  // callback function when mouse pointer is over a square\n  onMouseLeave: propTypes.func,\n  // callback function when mouse pointer is left a square\n  transformDayElement: propTypes.func // function to further transform the svg element for a single day\n\n};\nCalendarHeatmap.defaultProps = {\n  numDays: null,\n  startDate: dateNDaysAgo(200),\n  endDate: new Date(),\n  gutterSize: 1,\n  horizontal: true,\n  showMonthLabels: true,\n  showWeekdayLabels: false,\n  showOutOfRangeDays: false,\n  tooltipDataAttrs: null,\n  titleForValue: null,\n  classForValue: function classForValue(value) {\n    return value ? 'color-filled' : 'color-empty';\n  },\n  monthLabels: MONTH_LABELS,\n  weekdayLabels: DAY_LABELS,\n  onClick: null,\n  onMouseOver: null,\n  onMouseLeave: null,\n  transformDayElement: null\n};\n\nexport default CalendarHeatmap;\n//# sourceMappingURL=react-calendar-heatmap.esm.js.map\n","import React from \"react\";\r\nimport CalendarHeatmap from \"react-calendar-heatmap\";\r\nimport \"react-calendar-heatmap/dist/styles.css\";\r\nimport { Card, Tooltip } from \"@heroui/react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { formatCurrency } from \"../../utils/formatters\";\r\nimport { useAccountingMethod } from \"../../context/AccountingMethodContext\";\r\nimport { calculateTradePL, getTradeDateForAccounting } from \"../../utils/accountingUtils\";\r\nimport MobileTooltip from \"../ui/MobileTooltip\";\r\n\r\ninterface TradeHeatmapProps {\r\n  trades: any[];\r\n  startDate: string;\r\n  endDate: string;\r\n  className?: string;\r\n}\r\n\r\nconst TradeHeatmap: React.FC<TradeHeatmapProps> = ({ trades, startDate, endDate, className }) => {\r\n  const { accountingMethod } = useAccountingMethod();\r\n  const useCashBasis = accountingMethod === 'cash';\r\n\r\n  // Aggregate P&L by date using accounting method-aware dates\r\n  const data = trades.reduce((acc, trade) => {\r\n    try {\r\n      // Use accounting method-aware date for aggregation\r\n      const relevantDate = getTradeDateForAccounting(trade, useCashBasis);\r\n      if (!relevantDate) {\r\n        return acc;\r\n      }\r\n\r\n      const day = relevantDate.split(\"T\")[0];\r\n      if (!day.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\r\n        return acc;\r\n      }\r\n\r\n      // Calculate P/L based on accounting method - use the same logic as other working components\r\n      let tradePL = 0;\r\n\r\n      if (!useCashBasis) {\r\n        // Accrual basis: Use multiple fallbacks like other components\r\n        tradePL = trade.plRs ?? trade.realisedAmount ?? 0;\r\n\r\n        // If still 0, try to calculate from trade data for closed positions\r\n        if (tradePL === 0 && (trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial')) {\r\n          const avgEntry = trade.avgEntry || trade.entry || 0;\r\n          const avgExit = trade.avgExitPrice || 0;\r\n          const exitedQty = trade.exitedQty || 0;\r\n\r\n          if (avgEntry > 0 && avgExit > 0 && exitedQty > 0) {\r\n            tradePL = trade.buySell === 'Buy'\r\n              ? (avgExit - avgEntry) * exitedQty\r\n              : (avgEntry - avgExit) * exitedQty;\r\n          }\r\n        }\r\n      } else {\r\n        // Cash basis: Use the existing function\r\n        tradePL = calculateTradePL(trade, useCashBasis);\r\n      }\r\n\r\n      // For cash basis, we want to aggregate all exits on the same date\r\n      // This is intentional behavior - multiple exits on same date should sum up\r\n      // No deduplication needed here as we want the total P/L impact per day\r\n      acc[day] = (acc[day] || 0) + tradePL;\r\n\r\n      return acc;\r\n    } catch (error) {\r\n      return acc;\r\n    }\r\n  }, {} as Record<string, number>);\r\n\r\n  // Convert to heatmap format\r\n  const values = Object.keys(data).map(date => ({\r\n    date,\r\n    count: data[date],\r\n  }));\r\n\r\n  // Convert string dates to Date objects for CalendarHeatmap\r\n  // Handle invalid date formats and provide fallbacks\r\n  let startDateObj: Date;\r\n  let endDateObj: Date;\r\n\r\n  // Helper function to create a valid Date object\r\n  const createValidDate = (dateStr: string, fallback: string): Date => {\r\n    if (dateStr && dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\r\n      const date = new Date(dateStr + 'T00:00:00.000Z');\r\n      if (!isNaN(date.getTime())) {\r\n        return date;\r\n      }\r\n    }\r\n    return new Date(fallback + 'T00:00:00.000Z');\r\n  };\r\n\r\n  // Get fallback dates from actual trade data\r\n  const tradeDatesArray = Object.keys(data).filter(date => date.match(/^\\d{4}-\\d{2}-\\d{2}$/)).sort();\r\n  const earliestTradeDate = tradeDatesArray[0] || '2024-01-01';\r\n  const latestTradeDate = tradeDatesArray[tradeDatesArray.length - 1] || new Date().toISOString().split('T')[0];\r\n\r\n  // Create start date with validation\r\n  startDateObj = createValidDate(startDate, earliestTradeDate);\r\n\r\n  // Create end date with validation\r\n  endDateObj = createValidDate(endDate, latestTradeDate);\r\n\r\n  // Validate the final Date objects before using them\r\n  if (isNaN(startDateObj.getTime())) {\r\n    startDateObj = new Date('2024-01-01T00:00:00.000Z');\r\n  }\r\n\r\n  if (isNaN(endDateObj.getTime())) {\r\n    endDateObj = new Date('2024-12-31T23:59:59.999Z');\r\n  }\r\n\r\n  // Custom transformDayElement to add hover effects and better styling\r\n  const transformDayElement = (element: React.ReactElement, value: any) => {\r\n    if (!value) return element;\r\n\r\n    const formattedDate = new Date(value.date).toLocaleDateString('en-IN', {\r\n      weekday: 'short',\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n\r\n    return (\r\n      <MobileTooltip\r\n        key={value.date}\r\n        content={\r\n          <div className=\"p-2 text-sm\">\r\n            <p className=\"font-medium\">{formattedDate}</p>\r\n            <p className={`mt-1 ${value.count >= 0 ? 'text-success-500' : 'text-danger-500'}`}>\r\n              {formatCurrency(value.count)}\r\n            </p>\r\n          </div>\r\n        }\r\n        delay={0}\r\n        closeDelay={0}\r\n      >\r\n        <motion.g\r\n          whileHover={{ scale: 1.1 }}\r\n          transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\r\n        >\r\n          {React.cloneElement(element, {\r\n            ...element.props,\r\n            key: value ? value.date : `empty-${element.props.x}-${element.props.y}`,\r\n            rx: 2,\r\n            className: `${element.props.className} cursor-pointer`,\r\n          })}\r\n        </motion.g>\r\n      </MobileTooltip>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={`w-full ${className}`}>\r\n      <style>{`\r\n        .react-calendar-heatmap {\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n        .react-calendar-heatmap text {\r\n          font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\r\n          font-size: 0.8rem;\r\n          fill: var(--foreground-500);\r\n        }\r\n        .react-calendar-heatmap rect {\r\n          rx: 2;\r\n          ry: 2;\r\n          height: 15px;\r\n          width: 15px;\r\n          stroke: white;\r\n          stroke-width: 1.5px;\r\n          opacity: 1;\r\n        }\r\n        .react-calendar-heatmap .color-empty {\r\n          fill: #f3f4f6;\r\n        }\r\n        /* Loss colors - from light to dark red */\r\n        .color-scale-1 { fill: #fecaca; }\r\n        .color-scale-2 { fill: #ef4444; }\r\n        /* Profit colors - from light to dark green */\r\n        .color-scale-3 { fill: #bbf7d0; }\r\n        .color-scale-4 { fill: #22c55e; }\r\n        .react-calendar-heatmap-month-label,\r\n        .react-calendar-heatmap-weekday-label {\r\n          font-size: 0.8rem;\r\n          font-weight: 500;\r\n          fill: var(--foreground-500);\r\n        }\r\n        /* Fix spacing and alignment */\r\n        .react-calendar-heatmap .react-calendar-heatmap-all-weeks {\r\n          transform: translateY(35px);\r\n        }\r\n        .react-calendar-heatmap-month-labels {\r\n          transform: translateY(0px);\r\n        }\r\n        .react-calendar-heatmap-weekday-labels {\r\n          transform: translateX(-20px);\r\n        }\r\n        .react-calendar-heatmap-month-label {\r\n          letter-spacing: -0.5px;\r\n        }\r\n      `}</style>\r\n      <div className=\"relative h-[230px] pt-4\">\r\n        <CalendarHeatmap\r\n          startDate={startDateObj}\r\n          endDate={endDateObj}\r\n          values={values}\r\n          classForValue={value => {\r\n            if (!value) return \"color-empty\";\r\n            const count = value.count;\r\n            if (count > 0) {\r\n              return count > 5000 ? \"color-scale-4\" : \"color-scale-3\";\r\n            }\r\n            return count < -5000 ? \"color-scale-2\" : \"color-scale-1\";\r\n          }}\r\n          transformDayElement={transformDayElement}\r\n          showWeekdayLabels={true}\r\n          weekdayLabels={['M', 'W', 'F']}\r\n          horizontal={true}\r\n          gutterSize={5}\r\n          monthLabels={[\r\n            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n            'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n          ]}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradeHeatmap;","import React, { useMemo } from 'react';\r\nimport { Card, CardBody, CardHeader, Divider, Table, TableBody, TableCell, TableColumn, TableHeader, TableRow, Tooltip } from \"@heroui/react\";\r\nimport { useTrades } from '../hooks/use-trades';\r\nimport { useTruePortfolioWithTrades } from '../hooks/use-true-portfolio-with-trades';\r\nimport { Icon } from '@iconify/react';\r\nimport { motion } from \"framer-motion\"; // Import motion for StatsCard animation\r\nimport SetupFrequencyChart from '../components/analytics/SetupFrequencyChart'; // Import the new chart component\r\nimport { loadIndustrySectorMapping, getIndustrySectorByName } from '../utils/industrySectorMap';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer, Cell } from 'recharts';\r\nimport IndustryDistributionChart from '../components/analytics/IndustryDistributionChart';\r\nimport { Accordion, AccordionItem } from \"@heroui/react\";\r\nimport PnLDistributionCharts from '../components/analytics/PnLDistributionCharts';\r\nimport TradeHeatmap from '../components/analytics/TradeHeatmap';\r\nimport { useGlobalFilter } from '../context/GlobalFilterContext';\r\nimport { useAccountingMethod } from '../context/AccountingMethodContext';\r\nimport { calculateTradePL, getTradeDateForAccounting, getExitDatesWithFallback } from '../utils/accountingUtils';\r\nimport {\r\n  getUniqueSortedDates,\r\n  calculateDailyPortfolioValues,\r\n  calculateDailyReturns,\r\n  calculateStandardDeviation,\r\n  calculateMaxDrawdown,\r\n  calculateDownsideDeviation,\r\n  calculateSharpeRatio,\r\n  calculateCalmarRatio,\r\n  calculateSortinoRatio,\r\n  annualizeMetric,\r\n  calcUnrealizedPL // Import calcUnrealizedPL if not already imported\r\n} from '../utils/tradeCalculations';\r\n\r\n// Assuming Trade type is available from useTrades or a common types file\r\n// import { Trade } from '../types/trade';\r\n\r\n// Placeholder type if not explicitly imported (ensure these match your actual Trade type structure)\r\ninterface Trade {\r\n    id: string;\r\n    name: string;\r\n    positionStatus: \"Open\" | \"Closed\" | \"Partial\";\r\n    positionSize: number; // Assuming positionSize is available\r\n    plRs: number; // Add plRs for calculating win/loss stats\r\n    holdingDays: number; // Add holdingDays for hold time stats\r\n    date: string; // Add date for streak calculation\r\n    pfImpact: number; // Add pfImpact for percentage-based calculations\r\n    setup?: string; // Ensure setup is included for the chart\r\n    avgEntry?: number;\r\n    cmp?: number;\r\n    openQty?: number;\r\n    buySell?: 'Buy' | 'Sell';\r\n}\r\n\r\nconst DeepAnalyticsPage: React.FC = () => { // Renamed component\r\n    const { trades, isLoading } = useTrades();\r\n    const { portfolioSize, capitalChanges } = useTruePortfolioWithTrades(trades);\r\n    const { filter } = useGlobalFilter();\r\n    const { accountingMethod } = useAccountingMethod();\r\n    const useCashBasis = accountingMethod === 'cash';\r\n    const [mappingLoaded, setMappingLoaded] = React.useState(false);\r\n\r\n    // Load industry/sector mapping on mount\r\n    React.useEffect(() => {\r\n        loadIndustrySectorMapping().then(() => setMappingLoaded(true));\r\n    }, []);\r\n\r\n    // Augment trades with industry/sector\r\n    const tradesWithIndustry = useMemo(() => {\r\n        if (!mappingLoaded) return [];\r\n        return trades.map(trade => {\r\n            const info = getIndustrySectorByName(trade.name);\r\n            return {\r\n                ...trade,\r\n                industry: info?.industry || 'Unknown',\r\n                sector: info?.sector || 'Unknown',\r\n            };\r\n        });\r\n    }, [trades, mappingLoaded]);\r\n\r\n    // Group trades by industry and sector to get stock names for tooltips\r\n    const tradesByIndustry = useMemo(() => {\r\n        if (!tradesWithIndustry.length) return {};\r\n        return tradesWithIndustry.reduce((acc, trade) => {\r\n            const key = trade.industry;\r\n            if (!acc[key]) acc[key] = [];\r\n            acc[key].push(trade);\r\n            return acc;\r\n        }, {} as Record<string, typeof tradesWithIndustry>);\r\n    }, [tradesWithIndustry]);\r\n\r\n    const industryChartData = useMemo(() => {\r\n        return Object.entries(tradesByIndustry)\r\n            .map(([name, trades]) => ({\r\n                name,\r\n                trades: trades.length,\r\n                stockNames: [...new Set(trades.map(t => t.name))]\r\n            }))\r\n            .sort((a, b) => b.trades - a.trades);\r\n    }, [tradesByIndustry]);\r\n\r\n    const tradesBySector = useMemo(() => {\r\n        if (!tradesWithIndustry.length) return {};\r\n        return tradesWithIndustry.reduce((acc, trade) => {\r\n            const key = trade.sector;\r\n            if (!acc[key]) acc[key] = [];\r\n            acc[key].push(trade);\r\n            return acc;\r\n        }, {} as Record<string, typeof tradesWithIndustry>);\r\n    }, [tradesWithIndustry]);\r\n\r\n    const sectorChartData = useMemo(() => {\r\n        return Object.entries(tradesBySector)\r\n            .map(([name, trades]) => ({\r\n                name,\r\n                trades: trades.length,\r\n                stockNames: [...new Set(trades.map(t => t.name))]\r\n            }))\r\n            .sort((a, b) => b.trades - a.trades);\r\n    }, [tradesBySector]);\r\n\r\n    const industryStats = useMemo(() => {\r\n        if (industryChartData.length === 0) {\r\n            return { most: 'N/A', least: 'N/A', mostStocks: [], leastStocks: [] };\r\n        }\r\n        const most = industryChartData[0];\r\n        const least = industryChartData[industryChartData.length - 1];\r\n        return {\r\n            most: most.name,\r\n            least: least.name,\r\n            mostStocks: most.stockNames || [],\r\n            leastStocks: least.stockNames || []\r\n        };\r\n    }, [industryChartData]);\r\n\r\n    const sectorStats = useMemo(() => {\r\n        if (sectorChartData.length === 0) {\r\n            return { most: 'N/A', least: 'N/A', mostStocks: [], leastStocks: [] };\r\n        }\r\n        const most = sectorChartData[0];\r\n        const least = sectorChartData[sectorChartData.length - 1];\r\n        return {\r\n            most: most.name,\r\n            least: least.name,\r\n            mostStocks: most.stockNames || [],\r\n            leastStocks: least.stockNames || []\r\n        };\r\n    }, [sectorChartData]);\r\n\r\n    const setupPerformance = useMemo(() => {\r\n        // For cash basis, deduplicate trades to avoid double counting\r\n        let uniqueTrades = trades;\r\n        if (useCashBasis) {\r\n            const seenTradeIds = new Set();\r\n            uniqueTrades = trades.filter(trade => {\r\n                const originalId = trade.id.split('_exit_')[0];\r\n                if (seenTradeIds.has(originalId)) return false;\r\n                seenTradeIds.add(originalId);\r\n                return true;\r\n            });\r\n        }\r\n\r\n        const tradesWithSetup = uniqueTrades.filter(t => t.setup && t.setup.trim() !== '');\r\n\r\n        if (tradesWithSetup.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        const tradesBySetup = tradesWithSetup.reduce((acc, trade) => {\r\n            const key = trade.setup!;\r\n            if (!acc[key]) {\r\n                acc[key] = [];\r\n            }\r\n            acc[key].push(trade);\r\n            return acc;\r\n        }, {} as Record<string, typeof tradesWithSetup>);\r\n\r\n        const setupStats = Object.entries(tradesBySetup).map(([setupName, setupTrades]) => {\r\n            const totalTrades = setupTrades.length;\r\n\r\n            // Calculate P/L based on accounting method\r\n            const tradesWithAccountingPL = setupTrades.map(trade => ({\r\n                ...trade,\r\n                accountingPL: calculateTradePL(trade, useCashBasis)\r\n            }));\r\n\r\n            const winningTrades = tradesWithAccountingPL.filter(t => t.accountingPL > 0).length;\r\n            const winRate = totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0;\r\n            // Use accounting-method-aware PF Impact\r\n            const totalPfImpact = setupTrades.reduce((sum, trade) => {\r\n                const pfImpact = useCashBasis\r\n                    ? (trade._cashPfImpact ?? 0)\r\n                    : (trade._accrualPfImpact ?? trade.pfImpact ?? 0);\r\n                return sum + pfImpact;\r\n            }, 0);\r\n\r\n        return {\r\n                id: setupName,\r\n                name: setupName,\r\n                totalTrades,\r\n                winRate,\r\n                totalPfImpact,\r\n        };\r\n        });\r\n\r\n        // Sort by total PF impact to show most impactful setups first\r\n        return setupStats.sort((a, b) => b.totalPfImpact - a.totalPfImpact);\r\n    }, [trades, useCashBasis]);\r\n\r\n    // --- Calculations for Deep Analytics --- //\r\n    const processedTrades = useMemo(() => {\r\n        if (!useCashBasis) {\r\n            return trades;\r\n        }\r\n\r\n        // For cash basis: expand trades into individual exit entries\r\n        const expanded: Trade[] = [];\r\n\r\n        trades.forEach(trade => {\r\n            if (trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial') {\r\n                const exits = getExitDatesWithFallback(trade);\r\n\r\n                if (exits.length > 0) {\r\n                    // Create separate entries for each exit\r\n                    exits.forEach((exit, index) => {\r\n                        const expandedTrade: any = {\r\n                            ...trade,\r\n                            id: `${trade.id}_exit_${index}`, // Unique ID for each exit\r\n                            _cashBasisExit: {\r\n                                date: exit.date,\r\n                                qty: exit.qty,\r\n                                price: exit.price\r\n                            }\r\n                        };\r\n                        expanded.push(expandedTrade);\r\n                    });\r\n                } else {\r\n                    // No exit data, include original trade\r\n                    expanded.push(trade);\r\n                }\r\n            } else {\r\n                // Open positions - include as-is\r\n                expanded.push(trade);\r\n            }\r\n        });\r\n\r\n        return expanded.length > 0 ? expanded : trades; // Fallback to original if expansion failed\r\n    }, [trades, useCashBasis]);\r\n\r\n    const analytics = useMemo(() => {\r\n        let closedTrades = processedTrades.filter(trade => trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial');\r\n        let totalTrades = closedTrades.length;\r\n\r\n        // --- Cash Basis: Group and sum by original trade ID ---\r\n        let groupedTrades = closedTrades;\r\n        if (useCashBasis) {\r\n            // Group by original trade ID (strip _exit_)\r\n            const tradeGroups = new Map();\r\n            closedTrades.forEach(trade => {\r\n                const originalId = trade.id.split('_exit_')[0];\r\n                const pl = calculateTradePL(trade as any, true);\r\n                if (!tradeGroups.has(originalId)) {\r\n                    tradeGroups.set(originalId, { ...trade, accountingPL: 0, exits: [] });\r\n                }\r\n                const group = tradeGroups.get(originalId);\r\n                group.accountingPL += pl;\r\n                group.exits.push(trade);\r\n            });\r\n            groupedTrades = Array.from(tradeGroups.values());\r\n            totalTrades = groupedTrades.length;\r\n\r\n        }\r\n        // Use groupedTrades for all win/loss stats below\r\n\r\n        if (totalTrades === 0) {\r\n            return {\r\n                expectancy: 0,\r\n                profitFactor: 0,\r\n                avgWinHold: 0,\r\n                avgLossHold: 0,\r\n                avgWin: 0,\r\n                avgLoss: 0,\r\n                winStreak: 0,\r\n                lossStreak: 0,\r\n                topWin: 0,\r\n                topLoss: 0,\r\n                avgWinPfImpact: 0,\r\n                avgLossPfImpact: 0,\r\n                totalPositivePfImpact: 0,\r\n                totalAbsoluteNegativePfImpact: 0,\r\n                avgPnLPerDay: 0,\r\n                uniqueTradingDays: 0,\r\n                sharpeRatio: 0,\r\n                calmarRatio: 0,\r\n                sortinoRatio: 0,\r\n                annualizedAverageReturn: 0,\r\n                annualRiskFreeRate: 0,\r\n                annualizedStdDev: 0,\r\n                annualizedDownsideDev: 0,\r\n                maxDrawdown: 0\r\n            };\r\n        }\r\n\r\n        // Calculate P/L based on accounting method\r\n        const tradesWithAccountingPL = groupedTrades.map(trade => ({\r\n            ...trade,\r\n            accountingPL: useCashBasis ? (trade as any).accountingPL : calculateTradePL(trade as any, useCashBasis)\r\n        }));\r\n\r\n        const winningTrades = tradesWithAccountingPL.filter(trade => trade.accountingPL > 0);\r\n        const losingTrades = tradesWithAccountingPL.filter(trade => trade.accountingPL < 0);\r\n        const totalWinningTrades = winningTrades.length;\r\n        const totalLosingTrades = losingTrades.length;\r\n\r\n        // Calculate total P&L and total trading days using accounting method\r\n        const totalPnL = tradesWithAccountingPL.reduce((sum, trade) => sum + trade.accountingPL, 0);\r\n        const uniqueTradingDays = new Set(groupedTrades.map(trade => trade.date.split('T')[0])).size;\r\n        const avgPnLPerDay = uniqueTradingDays > 0 ? totalPnL / uniqueTradingDays : 0;\r\n\r\n        // Calculate total positive and negative PF Impact using accounting-method-aware values\r\n        const totalPositivePfImpact = winningTrades.reduce((sum, trade) => {\r\n            const pfImpact = useCashBasis\r\n                ? ((trade as any)._cashPfImpact ?? 0)\r\n                : ((trade as any)._accrualPfImpact ?? trade.pfImpact ?? 0);\r\n            return sum + pfImpact;\r\n        }, 0);\r\n        const totalAbsoluteNegativePfImpact = losingTrades.reduce((sum, trade) => {\r\n            const pfImpact = useCashBasis\r\n                ? ((trade as any)._cashPfImpact ?? 0)\r\n                : ((trade as any)._accrualPfImpact ?? trade.pfImpact ?? 0);\r\n            return sum + Math.abs(pfImpact);\r\n        }, 0);\r\n\r\n        // Calculate average PF Impact for winning and losing trades\r\n        const avgWinPfImpact = totalWinningTrades > 0 ? totalPositivePfImpact / totalWinningTrades : 0;\r\n        const avgLossPfImpact = totalLosingTrades > 0 ? totalAbsoluteNegativePfImpact / totalLosingTrades : 0;\r\n\r\n        const winRate = totalTrades > 0 ? totalWinningTrades / totalTrades : 0;\r\n        const lossRate = totalTrades > 0 ? totalLosingTrades / totalTrades : 0;\r\n\r\n        // Expectancy (using Average PF Impact and Rates)\r\n        const expectancy = (avgWinPfImpact * winRate) - (avgLossPfImpact * lossRate);\r\n\r\n        // Profit Factor (using Total PF Impact)\r\n        const profitFactor = totalAbsoluteNegativePfImpact > 0 ? totalPositivePfImpact / totalAbsoluteNegativePfImpact : totalPositivePfImpact > 0 ? Infinity : 0; // Handle division by zero\r\n\r\n        // Calculate Avg Win/Loss and Top Win/Loss using accounting method\r\n        const totalProfit = winningTrades.reduce((sum, trade) => sum + trade.accountingPL, 0);\r\n        const totalLoss = losingTrades.reduce((sum, trade) => sum + Math.abs(trade.accountingPL), 0); // Use absolute for total loss\r\n\r\n        const avgWin = totalWinningTrades > 0 ? totalProfit / totalWinningTrades : 0;\r\n        const avgLoss = totalLosingTrades > 0 ? totalLoss / totalLosingTrades : 0; // This will be a positive value\r\n\r\n        const avgWinHold = totalWinningTrades > 0 ? winningTrades.reduce((sum, trade) => sum + trade.holdingDays, 0) / totalWinningTrades : 0;\r\n        const avgLossHold = totalLosingTrades > 0 ? losingTrades.reduce((sum, trade) => sum + trade.holdingDays, 0) / totalLosingTrades : 0;\r\n\r\n        const topWin = totalWinningTrades > 0 ? Math.max(...winningTrades.map(trade => trade.accountingPL)) : 0;\r\n        const topLoss = totalLosingTrades > 0 ? Math.min(...losingTrades.map(trade => trade.accountingPL)) : 0; // Will be a negative value\r\n\r\n        // Calculate Win/Loss Streaks based on accounting method\r\n        let currentWinStreak = 0;\r\n        let maxWinStreak = 0;\r\n        let currentLossStreak = 0;\r\n        let maxLossStreak = 0;\r\n\r\n        // Sort trades chronologically based on accounting method\r\n        let sortedTradesForStreaks;\r\n        if (useCashBasis) {\r\n            // For cash basis, group by original trade ID and calculate total P/L per trade\r\n            const tradeGroups = new Map<string, { trade: any; exits: any[]; totalPL: number; latestExitDate: string }>();\r\n\r\n            closedTrades.forEach(trade => {\r\n                if (trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial') {\r\n                    const originalId = trade.id.split('_exit_')[0];\r\n                    const exits = getExitDatesWithFallback(trade as any);\r\n\r\n                    if (!tradeGroups.has(originalId)) {\r\n                        tradeGroups.set(originalId, {\r\n                            trade,\r\n                            exits: [],\r\n                            totalPL: 0,\r\n                            latestExitDate: ''\r\n                        });\r\n                    }\r\n\r\n                    const group = tradeGroups.get(originalId)!;\r\n\r\n                    // Calculate total P/L for this trade across all exits\r\n                    exits.forEach(exit => {\r\n                        const partialPL = calculateTradePL({\r\n                            ...trade,\r\n                            _cashBasisExit: {\r\n                                date: exit.date,\r\n                                qty: exit.qty,\r\n                                price: exit.price\r\n                            }\r\n                        } as any, true);\r\n\r\n                        group.totalPL += partialPL;\r\n                        group.exits.push(exit);\r\n\r\n                        // Track the latest exit date for sorting\r\n                        if (!group.latestExitDate || new Date(exit.date) > new Date(group.latestExitDate)) {\r\n                            group.latestExitDate = exit.date;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Convert to sorted array using latest exit date for each original trade\r\n            sortedTradesForStreaks = Array.from(tradeGroups.values())\r\n                .map(group => ({\r\n                    trade: group.trade,\r\n                    accountingPL: group.totalPL,\r\n                    exitDate: group.latestExitDate\r\n                }))\r\n                .sort((a, b) => new Date(a.exitDate).getTime() - new Date(b.exitDate).getTime());\r\n        } else {\r\n            // For accrual basis, sort by entry date\r\n            sortedTradesForStreaks = tradesWithAccountingPL\r\n                .filter(trade => trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial')\r\n                .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\r\n                .map(trade => ({ trade, accountingPL: trade.accountingPL, exitDate: trade.date }));\r\n        }\r\n\r\n        for (const entry of sortedTradesForStreaks) {\r\n            if (entry.accountingPL > 0) {\r\n                currentWinStreak++;\r\n                maxLossStreak = Math.max(maxLossStreak, currentLossStreak);\r\n                currentLossStreak = 0;\r\n            } else if (entry.accountingPL < 0) {\r\n                currentLossStreak++;\r\n                maxWinStreak = Math.max(maxWinStreak, currentWinStreak);\r\n                currentWinStreak = 0;\r\n            } else { // breakeven or zero P/L\r\n                maxWinStreak = Math.max(maxWinStreak, currentWinStreak);\r\n                maxLossStreak = Math.max(maxLossStreak, currentLossStreak);\r\n                currentWinStreak = 0;\r\n                currentLossStreak = 0;\r\n            }\r\n        }\r\n\r\n        // Account for streaks ending at the last trade\r\n        maxWinStreak = Math.max(maxWinStreak, currentWinStreak);\r\n        maxLossStreak = Math.max(maxLossStreak, currentLossStreak);\r\n\r\n        // --- Calculate Sharpe, Calmar, Sortino Ratios ---\r\n        const allTradesForMetrics = processedTrades; // Use all trades for portfolio value calculation\r\n        const dailyPortfolioValues = calculateDailyPortfolioValues(allTradesForMetrics, capitalChanges, useCashBasis);\r\n        const dailyReturnsMap = calculateDailyReturns(dailyPortfolioValues);\r\n        const dailyReturnsArray = Array.from(dailyReturnsMap.values());\r\n\r\n        // Define risk-free rate (e.g., 5% annually)\r\n        const annualRiskFreeRate = 0.05; // 5%\r\n        const dailyRiskFreeRate = Math.pow(1 + annualRiskFreeRate, 1/252) - 1; // Convert to daily for comparison\r\n\r\n        // Calculate annualized average return (more robust approach)\r\n        let annualizedAverageReturn = 0;\r\n        if (dailyReturnsArray.length > 0) {\r\n            const averageDailyReturn = dailyReturnsArray.reduce((sum, r) => sum + r, 0) / dailyReturnsArray.length;\r\n            // Use simple annualization for more realistic results\r\n            annualizedAverageReturn = averageDailyReturn * 252;\r\n        }\r\n\r\n        // Calculate annualized standard deviation of daily returns\r\n        const dailyStdDev = calculateStandardDeviation(dailyReturnsArray);\r\n        const annualizedStdDev = annualizeMetric(dailyStdDev, 252); // Use the helper to annualize volatility\r\n\r\n        // Calculate Max Drawdown\r\n        const maxDrawdown = calculateMaxDrawdown(dailyPortfolioValues);\r\n\r\n        // Calculate Downside Deviation (use all returns, not filtered)\r\n        const dailyDownsideDev = calculateDownsideDeviation(dailyReturnsArray, dailyRiskFreeRate);\r\n        const annualizedDownsideDev = annualizeMetric(dailyDownsideDev, 252);\r\n\r\n        // Calculate Ratios (use annualized values consistently)\r\n        const sharpeRatio = calculateSharpeRatio(annualizedAverageReturn, annualRiskFreeRate, annualizedStdDev);\r\n        const calmarRatio = calculateCalmarRatio(annualizedAverageReturn, maxDrawdown);\r\n        const sortinoRatio = calculateSortinoRatio(annualizedAverageReturn, annualRiskFreeRate, annualizedDownsideDev);\r\n\r\n        // Apply realistic bounds to ratios to prevent unrealistic values\r\n        const boundedSharpeRatio = isNaN(sharpeRatio) || !isFinite(sharpeRatio) ? 0 : Math.max(-10, Math.min(10, sharpeRatio));\r\n        const boundedCalmarRatio = isNaN(calmarRatio) || !isFinite(calmarRatio) ? 0 : Math.max(-100, Math.min(100, calmarRatio));\r\n        const boundedSortinoRatio = isNaN(sortinoRatio) || !isFinite(sortinoRatio) ? 0 : Math.max(-10, Math.min(10, sortinoRatio));\r\n\r\n        return {\r\n            expectancy: isFinite(expectancy) ? expectancy : 0,\r\n            profitFactor: isFinite(profitFactor) ? profitFactor : (totalPositivePfImpact > 0 ? Infinity : 0),\r\n            avgWinHold: Math.round(avgWinHold),\r\n            avgLossHold: Math.round(avgLossHold),\r\n            avgWin,\r\n            avgLoss,\r\n            winStreak: maxWinStreak,\r\n            lossStreak: maxLossStreak,\r\n            topWin,\r\n            topLoss,\r\n            avgWinPfImpact: avgWinPfImpact,\r\n            avgLossPfImpact: avgLossPfImpact,\r\n            totalPositivePfImpact: totalPositivePfImpact,\r\n            totalAbsoluteNegativePfImpact: totalAbsoluteNegativePfImpact,\r\n            avgPnLPerDay,\r\n            uniqueTradingDays,\r\n            sharpeRatio: boundedSharpeRatio,\r\n            calmarRatio: boundedCalmarRatio,\r\n            sortinoRatio: boundedSortinoRatio,\r\n            annualizedAverageReturn: Math.max(-1, Math.min(10, annualizedAverageReturn)), // Cap between -100% and 1000%\r\n            annualRiskFreeRate,\r\n            annualizedStdDev: Math.max(0, Math.min(5, annualizedStdDev)), // Cap volatility at 500%\r\n            annualizedDownsideDev: Math.max(0, Math.min(5, annualizedDownsideDev)), // Cap downside volatility at 500%\r\n            maxDrawdown: Math.max(0, Math.min(1, maxDrawdown)) // Cap drawdown between 0% and 100%\r\n        };\r\n\r\n    }, [processedTrades, capitalChanges, useCashBasis]);\r\n    // --- End Calculations ---\r\n\r\n    // Define color palettes for the charts\r\n    const industryColors = ['#4A8DFF', '#34D399', '#FF6B6B', '#FFC107', '#A78BFA', '#64748B'];\r\n    const sectorColors = ['#56B4E9', '#009E73', '#F0E442', '#E69F00', '#D55E00', '#CC79A7'];\r\n\r\n    // Calculate and sort top allocations\r\n    const topAllocations = useMemo(() => {\r\n        if (!processedTrades || processedTrades.length === 0 || !portfolioSize || portfolioSize <= 0) {\r\n            return [];\r\n        }\r\n\r\n        const openAndPartialTrades = processedTrades.filter(trade =>\r\n            trade.positionStatus === 'Open' || trade.positionStatus === 'Partial'\r\n        );\r\n\r\n        // Calculate allocation for each open/partial trade\r\n        // Assuming allocation is (positionSize / portfolioSize) * 100\r\n        const tradesWithAllocation = openAndPartialTrades.map(trade => ({\r\n            ...trade,\r\n            calculatedAllocation: trade.positionSize && portfolioSize > 0\r\n                ? (trade.positionSize / portfolioSize) * 100\r\n                : 0\r\n        }));\r\n\r\n        // Sort by calculatedAllocation descending\r\n        return tradesWithAllocation.sort((a, b) => b.calculatedAllocation - a.calculatedAllocation);\r\n\r\n    }, [processedTrades, portfolioSize]);\r\n\r\n    const columns = [\r\n        { key: \"name\", label: \"Stock/Asset\" },\r\n        { key: \"positionStatus\", label: \"Status\" },\r\n        { key: \"positionSize\", label: \"Position Size (₹)\" },\r\n        { key: \"calculatedAllocation\", label: \"Allocation (%)\" },\r\n    ];\r\n\r\n    const formatCurrency = (value: number) => {\r\n        return new Intl.NumberFormat('en-IN', {\r\n          style: 'currency',\r\n          currency: 'INR',\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2\r\n        }).format(value);\r\n      };\r\n\r\n    const renderCell = (item: Trade & { calculatedAllocation: number }, columnKey: string) => {\r\n        const cellValue = item[columnKey as keyof typeof item];\r\n\r\n        switch (columnKey) {\r\n            case 'positionSize':\r\n                return formatCurrency(cellValue as number);\r\n            case 'calculatedAllocation':\r\n                return `${(cellValue as number).toFixed(2)}%`;\r\n            case 'positionStatus':\r\n                return (\r\n                    <span className={`capitalize px-2 py-0.5 rounded-full text-xs font-medium\r\n                        ${item.positionStatus === 'Open' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' :\r\n                         item.positionStatus === 'Partial' ? 'bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-200' :\r\n                         'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\r\n                        }`}\r\n                    >\r\n                        {cellValue}\r\n                    </span>\r\n                );\r\n            default:\r\n                return String(cellValue);\r\n        }\r\n    };\r\n\r\n    // Custom Tooltip for Charts\r\n    const CustomTooltip = ({ active, payload, label }: any) => {\r\n        if (active && payload && payload.length) {\r\n            return (\r\n                <div className=\"p-2.5 bg-background border border-divider shadow-lg rounded-lg\">\r\n                    <p className=\"text-sm font-bold text-foreground\">{label}</p>\r\n                    <p className=\"text-xs text-foreground-600\">Trades: {payload[0].value}</p>\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // Helper to get date range from global filter\r\n    function getDateRangeFromFilter(filter) {\r\n        const today = new Date();\r\n        let startDate: Date | undefined = undefined;\r\n        let endDate: Date | undefined = undefined;\r\n        if (filter.type === 'all') {\r\n            // Use all trades\r\n            return { startDate: undefined, endDate: undefined };\r\n        } else if (filter.type === 'week') {\r\n            endDate = today;\r\n            startDate = new Date(today);\r\n            startDate.setDate(today.getDate() - 6);\r\n        } else if (filter.type === 'month') {\r\n            const year = filter.year ?? today.getFullYear();\r\n            const month = filter.month ?? today.getMonth();\r\n            startDate = new Date(year, month, 1);\r\n            endDate = new Date(year, month + 1, 0);\r\n        } else if (filter.type === 'fy') {\r\n            // Financial year: April 1st to March 31st\r\n            const year = today.getMonth() < 3 ? today.getFullYear() - 1 : today.getFullYear();\r\n            startDate = new Date(year, 3, 1);\r\n            endDate = new Date(year + 1, 2, 31);\r\n        } else if (filter.type === 'cy') {\r\n            // Calendar year\r\n            const year = today.getFullYear();\r\n            startDate = new Date(year, 0, 1);\r\n            endDate = new Date(year, 11, 31);\r\n        } else if (filter.type === 'custom') {\r\n            startDate = filter.startDate ? new Date(filter.startDate) : undefined;\r\n            endDate = filter.endDate ? new Date(filter.endDate) : undefined;\r\n        }\r\n        return { startDate, endDate };\r\n    }\r\n\r\n    const { startDate: globalStartDate, endDate: globalEndDate } = getDateRangeFromFilter(filter);\r\n\r\n    // Filter trades by date range using accounting method-aware dates\r\n    const filteredTrades = React.useMemo(() => {\r\n        let baseTrades = processedTrades;\r\n\r\n        // For accrual basis, filter out invalid trades\r\n        if (!useCashBasis) {\r\n            baseTrades = baseTrades.filter(trade => {\r\n                // Include all trades that have meaningful data\r\n                if (trade.positionStatus === 'Open') {\r\n                    return true; // Always include open positions\r\n                }\r\n                if (trade.positionStatus === 'Closed' || trade.positionStatus === 'Partial') {\r\n                    // Include closed/partial trades that have P/L data\r\n                    const tradePL = calculateTradePL(trade as any, false); // accrual basis\r\n                    return tradePL !== 0 || trade.plRs !== 0; // Include if there's any P/L\r\n                }\r\n                return true; // Include other trades by default\r\n            });\r\n        }\r\n\r\n        // Apply date filtering\r\n        if (!globalStartDate && !globalEndDate) {\r\n            return baseTrades;\r\n        }\r\n\r\n        const filtered = baseTrades.filter(trade => {\r\n            try {\r\n                const relevantDate = getTradeDateForAccounting(trade as any, useCashBasis);\r\n                if (!relevantDate) {\r\n                    return false;\r\n                }\r\n\r\n                const tradeDate = new Date(relevantDate.split('T')[0]);\r\n                if (isNaN(tradeDate.getTime())) {\r\n                    return false;\r\n                }\r\n\r\n                if (globalStartDate && tradeDate < globalStartDate) return false;\r\n                if (globalEndDate && tradeDate > globalEndDate) return false;\r\n                return true;\r\n            } catch (error) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return filtered;\r\n    }, [processedTrades, globalStartDate, globalEndDate, useCashBasis]);\r\n\r\n    // Calculate min and max trade dates for heatmap (within filtered trades) using accounting method-aware dates\r\n    const tradeDates = filteredTrades.map(t => getTradeDateForAccounting(t as any, useCashBasis).split('T')[0]);\r\n    const minTradeDate = tradeDates.length > 0 ? tradeDates.reduce((a, b) => a < b ? a : b) : '';\r\n    const maxTradeDate = tradeDates.length > 0 ? tradeDates.reduce((a, b) => a > b ? a : b) : '';\r\n\r\n    // Ensure proper date format handling\r\n    let heatmapStartDate = '';\r\n    let heatmapEndDate = '';\r\n\r\n    // Handle start date with validation\r\n    if (globalStartDate && globalStartDate instanceof Date && !isNaN(globalStartDate.getTime())) {\r\n        heatmapStartDate = globalStartDate.toISOString().split('T')[0];\r\n    } else if (minTradeDate && typeof minTradeDate === 'string' && minTradeDate.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\r\n        // Ensure minimum 3-month range for proper heatmap display\r\n        const minDate = new Date(minTradeDate);\r\n        minDate.setMonth(minDate.getMonth() - 1); // Start 1 month before earliest trade\r\n        heatmapStartDate = minDate.toISOString().split('T')[0];\r\n    } else {\r\n        heatmapStartDate = '2024-07-01'; // fallback\r\n    }\r\n\r\n    // Handle end date with validation\r\n    if (globalEndDate && globalEndDate instanceof Date && !isNaN(globalEndDate.getTime())) {\r\n        heatmapEndDate = globalEndDate.toISOString().split('T')[0];\r\n    } else if (maxTradeDate && typeof maxTradeDate === 'string' && maxTradeDate.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\r\n        // Ensure minimum 3-month range for proper heatmap display\r\n        const maxDate = new Date(maxTradeDate);\r\n        maxDate.setMonth(maxDate.getMonth() + 1); // End 1 month after latest trade\r\n        heatmapEndDate = maxDate.toISOString().split('T')[0];\r\n    } else {\r\n        // Use current date + 1 month as fallback to ensure we cover recent trades\r\n        const fallbackEndDate = new Date();\r\n        fallbackEndDate.setMonth(fallbackEndDate.getMonth() + 1);\r\n        heatmapEndDate = fallbackEndDate.toISOString().split('T')[0];\r\n    }\r\n\r\n    // Ensure minimum date range for proper heatmap display\r\n    const startDateObj = new Date(heatmapStartDate);\r\n    const endDateObj = new Date(heatmapEndDate);\r\n    const daysDifference = Math.ceil((endDateObj.getTime() - startDateObj.getTime()) / (1000 * 60 * 60 * 24));\r\n\r\n    if (daysDifference < 90) { // Less than 3 months\r\n        // Expand the range to at least 3 months\r\n        const centerDate = new Date(startDateObj.getTime() + (endDateObj.getTime() - startDateObj.getTime()) / 2);\r\n        centerDate.setMonth(centerDate.getMonth() - 1.5); // 1.5 months before center\r\n        heatmapStartDate = centerDate.toISOString().split('T')[0];\r\n\r\n        centerDate.setMonth(centerDate.getMonth() + 3); // 3 months total range\r\n        heatmapEndDate = centerDate.toISOString().split('T')[0];\r\n    }\r\n\r\n    // Helper function to format percentages\r\n    const formatPercentage = (value: number) => {\r\n        return `${(value).toFixed(2)}%`;\r\n    };\r\n\r\n    const formatRatio = (value: number) => {\r\n      return value.toFixed(2);\r\n    };\r\n\r\n    // StatsCard Component (already exists, but adding for context if it were new)\r\n    interface StatsCardProps {\r\n        title: string;\r\n        value: React.ReactNode;\r\n        icon: string;\r\n        color: \"primary\" | \"success\" | \"warning\" | \"danger\" | \"info\"; // Added info color for new stats\r\n        tooltipContent?: string; // Optional tooltip content\r\n    }\r\n\r\n    const StatsCard: React.FC<StatsCardProps> = ({ title, value, icon, color, tooltipContent }) => {\r\n        const getColors = () => {\r\n            switch (color) {\r\n                case \"primary\": return { bg: \"bg-blue-50 dark:bg-blue-900/10\", text: \"text-blue-700 dark:text-blue-400\", icon: \"text-blue-600 dark:text-blue-400\" };\r\n                case \"success\": return { bg: \"bg-emerald-50 dark:bg-emerald-900/10\", text: \"text-emerald-700 dark:text-emerald-400\", icon: \"text-emerald-600 dark:text-emerald-400\" };\r\n                case \"warning\": return { bg: \"bg-amber-50 dark:bg-amber-900/10\", text: \"text-amber-700 dark:text-amber-400\", icon: \"text-amber-600 dark:text-amber-400\" };\r\n                case \"danger\": return { bg: \"bg-red-50 dark:bg-red-900/10\", text: \"text-red-700 dark:text-red-400\", icon: \"text-red-600 dark:text-red-400\" };\r\n                case \"info\": return { bg: \"bg-sky-50 dark:bg-sky-900/10\", text: \"text-sky-700 dark:text-sky-400\", icon: \"text-sky-600 dark:text-sky-400\" }; // New info color\r\n                default: return { bg: \"bg-gray-50 dark:bg-gray-900/10\", text: \"text-gray-700 dark:text-gray-400\", icon: \"text-gray-600 dark:text-gray-400\" };\r\n            }\r\n        };\r\n\r\n        const colors = getColors();\r\n\r\n        return (\r\n          <div\r\n            className=\"will-change-transform\"\r\n          >\r\n            <Card className=\"border border-gray-100 dark:border-gray-800 shadow-sm bg-background\">\r\n              <CardBody className=\"p-6\">\r\n                <div\r\n                  className=\"flex justify-between items-start will-change-transform\"\r\n                >\r\n                  <div className=\"space-y-2\">\r\n                    <motion.p\r\n                      className=\"text-foreground-500 text-sm font-medium\"\r\n                      initial={{ opacity: 0, x: -20 }}\r\n                      animate={{ opacity: 1, x: 0 }}\r\n                      transition={{ delay: 0.3 }}\r\n                    >\r\n                      {title}\r\n                    </motion.p>\r\n                    <motion.div\r\n                      className={`text-2xl font-semibold tracking-tight ${colors.text}`}\r\n                      initial={{ opacity: 0, x: -20 }}\r\n                      animate={{ opacity: 1, x: 0 }}\r\n                      transition={{ delay: 0.4 }}\r\n                    >\r\n                      {value} {tooltipContent && (\r\n                        <Tooltip\r\n                          content={tooltipContent}\r\n                          placement=\"top\"\r\n                          radius=\"sm\"\r\n                          shadow=\"md\"\r\n                          classNames={{ content: \"bg-content1 border border-divider z-50 max-w-xs text-xs\" }}\r\n                        >\r\n                          <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-help\" />\r\n                        </Tooltip>\r\n                      )}\r\n                    </motion.div>\r\n                  </div>\r\n                  <div\r\n                    className={`p-3 rounded-xl ${colors.bg} ${colors.icon}`}\r\n                  >\r\n                    <Icon icon={icon} className=\"text-xl\" />\r\n                  </div>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        );\r\n      };\r\n\r\n    if (isLoading || !mappingLoaded) {\r\n        return (\r\n            <div className=\"flex items-center justify-center min-h-[400px]\">\r\n                <p className=\"text-foreground\">Loading analytics...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <motion.div\r\n            className=\"p-4 sm:p-6 space-y-6 bg-background\"\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            variants={{\r\n                hidden: { opacity: 0 },\r\n                visible: {\r\n                    opacity: 1,\r\n                    transition: {\r\n                        staggerChildren: 0.1\r\n                    }\r\n                }\r\n            }}\r\n        >\r\n            <motion.div variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <h2 className=\"text-xl font-bold text-default-700 flex items-center gap-2\">\r\n                            <Icon icon=\"lucide:gauge-circle\" className=\"text-primary\" />\r\n                            Key Performance Metrics\r\n                        </h2>\r\n                    </CardHeader>\r\n                    <Divider />\r\n                    <CardBody>\r\n            {!isLoading && (\r\n                             <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4\">\r\n                 <StatsCard\r\n                                    title=\"Avg. PnL/Day\"\r\n                    value={\r\n                        <div className=\"flex items-center gap-1\">\r\n                                            {formatCurrency(analytics.avgPnLPerDay)}\r\n                             <Tooltip\r\n                                                content={\r\n                                                    <div className=\"p-2\">\r\n                                                        <p className=\"font-semibold mb-1\">Trading Days Approach</p>\r\n                                                        <p className=\"text-xs\">Calculated using only days with active trades:</p>\r\n                                                        <p className=\"text-xs mt-1\">Total P&L ÷ Number of Trading Days</p>\r\n                                                        <p className=\"text-xs mt-2 text-default-500\">* Trading days: {analytics.uniqueTradingDays}</p>\r\n                                                    </div>\r\n                                                }\r\n                                placement=\"top\"\r\n                                radius=\"sm\"\r\n                                shadow=\"md\"\r\n                                                classNames={{\r\n                                                    content: \"bg-content1 border border-divider z-50 max-w-xs\"\r\n                                                }}\r\n                            >\r\n                                <Icon icon=\"lucide:info\" className=\"text-base text-foreground-400 cursor-help\" />\r\n                            </Tooltip>\r\n                        </div>\r\n                    }\r\n                                    icon=\"lucide:calendar-clock\"\r\n                                    color={analytics.avgPnLPerDay >= 0 ? \"success\" : \"danger\"}\r\n                />\r\n                                 <StatsCard title=\"Expectancy (%)\" value={<div className=\"flex items-center gap-1\">{analytics.expectancy.toFixed(2)}%</div>} icon=\"lucide:trending-up\" color={analytics.expectancy >= 0 ? \"success\" : \"danger\"} tooltipContent=\"Average amount you can expect to win or lose per trade. (Avg Win PF Impact * Win Rate) - (Avg Loss PF Impact * Loss Rate)\"/>\r\n                                 <StatsCard title=\"Profit Factor\" value={<div className=\"flex items-center gap-1\">{isFinite(analytics.profitFactor) ? analytics.profitFactor.toFixed(2) : \"∞\"}</div>} icon=\"lucide:line-chart\" color={analytics.profitFactor >= 1 ? \"success\" : \"danger\"} tooltipContent=\"Ratio of gross profits to gross losses. Higher than 1 is profitable. Total Positive PF Impact / Total Absolute Negative PF Impact\"/>\r\n                                 <StatsCard title=\"Avg Win Hold\" value={`${analytics.avgWinHold} Day${analytics.avgWinHold !== 1 ? 's' : ''}`} icon=\"lucide:clock\" color=\"success\" tooltipContent=\"Average number of days winning trades were held.\"/>\r\n                                 <StatsCard title=\"Avg Loss Hold\" value={`${analytics.avgLossHold} Day${analytics.avgLossHold !== 1 ? 's' : ''}`} icon=\"lucide:clock\" color=\"danger\" tooltipContent=\"Average number of days losing trades were held.\"/>\r\n                                 <StatsCard title=\"Avg Win (₹)\" value={formatCurrency(analytics.avgWin)} icon=\"lucide:trending-up\" color=\"success\" tooltipContent=\"Average profit from winning trades.\"/>\r\n                                 <StatsCard title=\"Avg Loss (₹)\" value={formatCurrency(-analytics.avgLoss)} icon=\"lucide:trending-down\" color=\"danger\" tooltipContent=\"Average loss from losing trades.\"/>\r\n                                 <StatsCard title=\"Win Streak\" value={analytics.winStreak.toString()} icon=\"lucide:medal\" color=\"primary\" tooltipContent=\"Longest consecutive sequence of winning trades.\"/>\r\n                                 <StatsCard title=\"Loss Streak\" value={analytics.lossStreak.toString()} icon=\"lucide:alert-triangle\" color=\"danger\" tooltipContent=\"Longest consecutive sequence of losing trades.\"/>\r\n                                 <StatsCard title=\"Top Win (₹)\" value={formatCurrency(analytics.topWin)} icon=\"lucide:star\" color=\"success\" tooltipContent=\"Largest profit from a single trade.\"/>\r\n                                 <StatsCard title=\"Top Loss (₹)\" value={formatCurrency(analytics.topLoss)} icon=\"lucide:skull\" color=\"danger\" tooltipContent=\"Largest loss from a single trade.\"/>\r\n                                 <StatsCard\r\n                                    title=\"Sharpe Ratio\"\r\n                                    value={formatRatio(analytics.sharpeRatio)}\r\n                                    icon=\"lucide:trending-up\"\r\n                                    color={analytics.sharpeRatio >= 1 ? \"success\" : analytics.sharpeRatio >= 0 ? \"info\" : \"danger\"}\r\n                                    tooltipContent={\r\n                                        `Measures risk-adjusted return. Higher is better. >1 is good, >2 is excellent.\r\nFormula: (Annualized Return - Risk-Free Rate) / Annualized Standard Deviation\r\nValues: (${(analytics.annualizedAverageReturn * 100).toFixed(1)}% - ${(analytics.annualRiskFreeRate * 100).toFixed(1)}%) / ${(analytics.annualizedStdDev * 100).toFixed(1)}%`\r\n                                    }\r\n                                />\r\n                                <StatsCard\r\n                                    title=\"Calmar Ratio\"\r\n                                    value={formatRatio(analytics.calmarRatio)}\r\n                                    icon=\"lucide:activity\"\r\n                                    color={analytics.calmarRatio >= 1 ? \"success\" : analytics.calmarRatio >= 0 ? \"info\" : \"danger\"}\r\n                                    tooltipContent={\r\n                                        `Measures return relative to maximum drawdown. Higher is better. >1 is good.\r\nFormula: Annualized Return / Max Drawdown\r\nValues: ${(analytics.annualizedAverageReturn * 100).toFixed(1)}% / ${(analytics.maxDrawdown * 100).toFixed(1)}%`\r\n                                    }\r\n                                />\r\n                                <StatsCard\r\n                                    title=\"Sortino Ratio\"\r\n                                    value={formatRatio(analytics.sortinoRatio)}\r\n                                    icon=\"lucide:arrow-down-left\"\r\n                                    color={analytics.sortinoRatio >= 1 ? \"success\" : analytics.sortinoRatio >= 0 ? \"info\" : \"danger\"}\r\n                                    tooltipContent={\r\n                                        `Measures return using only downside risk. Higher is better. >1 is good, >2 is excellent.\r\nFormula: (Annualized Return - Risk-Free Rate) / Annualized Downside Deviation\r\nValues: (${(analytics.annualizedAverageReturn * 100).toFixed(1)}% - ${(analytics.annualRiskFreeRate * 100).toFixed(1)}%) / ${(analytics.annualizedDownsideDev * 100).toFixed(1)}%`\r\n                                    }\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </CardBody>\r\n                </Card>\r\n            </motion.div>\r\n\r\n            <Accordion selectionMode=\"multiple\" defaultExpandedKeys={[\"1\"]} variant=\"bordered\">\r\n                <AccordionItem key=\"1\" aria-label=\"Industry & Sector Analysis\" title={\r\n                    <h2 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\r\n                        <Icon icon=\"lucide:factory\" className=\"text-secondary\" />\r\n                        Industry & Sector Analysis\r\n                    </h2>\r\n                }>\r\n                    <div className=\"space-y-4 p-2\">\r\n                        {mappingLoaded && tradesWithIndustry.length > 0 && industryChartData.length > 0 && sectorChartData.length > 0 ? (\r\n                            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                                <Tooltip content={<p className=\"text-xs break-words p-1\">{industryStats.mostStocks.join(', ')}</p>} placement=\"top\" radius=\"sm\" shadow=\"md\" classNames={{ content: \"bg-content1 border border-divider\" }}>\r\n                                    <div><StatsCard title=\"Most Traded Industry\" value={industryStats.most} icon=\"lucide:trending-up\" color=\"primary\" /></div>\r\n                                </Tooltip>\r\n                                <Tooltip content={<p className=\"text-xs break-words p-1\">{industryStats.leastStocks.join(', ')}</p>} placement=\"top\" radius=\"sm\" shadow=\"md\" classNames={{ content: \"bg-content1 border border-divider\" }}>\r\n                                    <div><StatsCard title=\"Least Traded Industry\" value={industryStats.least} icon=\"lucide:trending-down\" color=\"warning\" /></div>\r\n                                </Tooltip>\r\n                                <Tooltip content={<p className=\"text-xs break-words p-1\">{sectorStats.mostStocks.join(', ')}</p>} placement=\"top\" radius=\"sm\" shadow=\"md\" classNames={{ content: \"bg-content1 border border-divider\" }}>\r\n                                    <div><StatsCard title=\"Most Traded Sector\" value={sectorStats.most} icon=\"lucide:trending-up\" color=\"primary\" /></div>\r\n                                </Tooltip>\r\n                                <Tooltip content={<p className=\"text-xs break-words p-1\">{sectorStats.leastStocks.join(', ')}</p>} placement=\"top\" radius=\"sm\" shadow=\"md\" classNames={{ content: \"bg-content1 border border-divider\" }}>\r\n                                    <div><StatsCard title=\"Least Traded Sector\" value={sectorStats.least} icon=\"lucide:trending-down\" color=\"warning\" /></div>\r\n                            </Tooltip>\r\n                        </div>\r\n                        ) : (\r\n                            <div className=\"text-foreground-400 text-lg font-medium text-center w-full py-12\">No data in this period.</div>\r\n                        )}\r\n                        {mappingLoaded && tradesWithIndustry.length > 0 && industryChartData.length > 0 && sectorChartData.length > 0 ? (\r\n                            <div className=\"space-y-6\">\r\n                                {industryChartData.length > 0 && <IndustryDistributionChart data={industryChartData} colors={industryColors} title=\"Industry\" />}\r\n                                {sectorChartData.length > 0 && <IndustryDistributionChart data={sectorChartData} colors={sectorColors} title=\"Sector\" />}\r\n                            </div>\r\n                        ) : null}\r\n                    </div>\r\n                </AccordionItem>\r\n\r\n                <AccordionItem key=\"2\" aria-label=\"Setup Performance Analysis\" title={\r\n                     <h2 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\r\n                        <Icon icon=\"lucide:settings-2\" className=\"text-success\" />\r\n                        Setup Performance Analysis\r\n                    </h2>\r\n                }>\r\n                     <div className=\"p-2 space-y-6\">\r\n                         {setupPerformance.length > 0 ? (\r\n                            <Card className=\"border-divider\">\r\n                                <CardHeader>\r\n                                    <div className=\"flex flex-col\">\r\n                                        <p className=\"text-md font-semibold\">Performance by Setup</p>\r\n                                        <p className=\"text-sm text-default-500\">Which setups generate the most portfolio impact.</p>\r\n                                    </div>\r\n                                </CardHeader>\r\n                                <Divider/>\r\n                                <CardBody className=\"p-0\">\r\n                                    <Table\r\n                                        aria-label=\"Setup Performance Table\"\r\n                                        classNames={{\r\n                                            th: \"bg-transparent border-b border-divider text-xs font-medium text-default-500 uppercase tracking-wider text-right\",\r\n                                            td: \"py-2.5 text-sm text-right\",\r\n                                            wrapper: \"p-0\"\r\n                                        }}\r\n                                    >\r\n                                        <TableHeader>\r\n                                            <TableColumn className=\"text-left\">Setup</TableColumn>\r\n                                            <TableColumn>Trades</TableColumn>\r\n                                            <TableColumn>Win Rate</TableColumn>\r\n                                            <TableColumn>Total PF Impact</TableColumn>\r\n                                        </TableHeader>\r\n                                        <TableBody\r\n                                            items={setupPerformance}\r\n                                            emptyContent={\"No setup data to display.\"}\r\n                                        >\r\n                                            {(item) => (\r\n                                                <TableRow key={item.id}>\r\n                                                    <TableCell className=\"text-left font-medium\">{item.name}</TableCell>\r\n                                                    <TableCell>{item.totalTrades}</TableCell>\r\n                                                    <TableCell className={`font-semibold ${item.winRate >= 50 ? 'text-success-600' : 'text-danger-600'}`}>{item.winRate.toFixed(1)}%</TableCell>\r\n                                                    <TableCell className={`font-semibold ${item.totalPfImpact >= 0 ? 'text-success-600' : 'text-danger-600'}`}>{item.totalPfImpact > 0 ? '+' : ''}{item.totalPfImpact.toFixed(2)}%</TableCell>\r\n                                                </TableRow>\r\n                                            )}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </CardBody>\r\n                            </Card>\r\n                         ) : (\r\n                            <div className=\"text-foreground-400 text-lg font-medium text-center w-full py-12\">No data in this period.</div>\r\n                         )}\r\n\r\n                        {!isLoading && trades.filter(t=>t.setup).length > 0 && setupPerformance.length > 0 ? (\r\n                            <Card className=\"border-divider\">\r\n                                <CardHeader>\r\n                                     <div className=\"flex flex-col\">\r\n                                        <p className=\"text-md font-semibold\">Setup Frequency</p>\r\n                                        <p className=\"text-sm text-default-500\">How often each setup is traded.</p>\r\n                                    </div>\r\n                                </CardHeader>\r\n                                <Divider/>\r\n                 <SetupFrequencyChart trades={trades} />\r\n                            </Card>\r\n            ) : null}\r\n                     </div>\r\n                </AccordionItem>\r\n\r\n                 <AccordionItem key=\"3\" aria-label=\"Position Analysis\" title={\r\n                     <h2 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\r\n                        <Icon icon=\"lucide:hand-coins\" className=\"text-warning\" />\r\n                        Position Analysis\r\n                    </h2>\r\n                }>\r\n                    <div className=\"p-2 space-y-6\">\r\n                        {!isLoading && trades.length > 0 ? (\r\n                            <>\r\n                                <PnLDistributionCharts trades={trades} />\r\n\r\n            <Card className=\"border border-divider\">\r\n                <CardHeader className=\"flex gap-3 items-center\">\r\n                    <Icon icon=\"lucide:pie-chart\" className=\"text-xl text-primary-500\" />\r\n                                <div>\r\n                                    <p className=\"text-md font-semibold\">Top Allocations</p>\r\n                                    <p className=\"text-sm text-default-500\">Largest open positions by portfolio percentage.</p>\r\n                    </div>\r\n                </CardHeader>\r\n                <Divider/>\r\n                <CardBody className=\"p-0\">\r\n                            <Table aria-label=\"Top Allocations Table\" classNames={{ wrapper: \"min-h-[222px] p-0\", th: \"bg-transparent border-b border-divider text-xs font-medium\", td: \"py-2.5 text-sm\" }}>\r\n                        <TableHeader columns={columns}>\r\n                                    {(column) => <TableColumn key={column.key}>{column.label}</TableColumn>}\r\n                        </TableHeader>\r\n                                <TableBody items={topAllocations} isLoading={isLoading} emptyContent={isLoading ? \" \" : \"No open positions.\"}>\r\n                            {(item) => (\r\n                                <TableRow key={item.id}>\r\n                                            {(columnKey) => <TableCell>{renderCell(item, columnKey as string)}</TableCell>}\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardBody>\r\n            </Card>\r\n                            </>\r\n                        ) : (\r\n                            <div className=\"text-foreground-400 text-lg font-medium text-center w-full py-12\">No data in this period.</div>\r\n                        )}\r\n\r\n            </div>\r\n                </AccordionItem>\r\n            </Accordion>\r\n\r\n            {/* Trading Activity Heatmap Card */}\r\n            <motion.div\r\n                variants={{\r\n                    hidden: { opacity: 0, y: 20 },\r\n                    visible: { opacity: 1, y: 0 }\r\n                }}\r\n                className=\"w-full\"\r\n            >\r\n                <Card className=\"border border-divider bg-background\">\r\n                    <CardHeader className=\"flex justify-between items-center pb-2\">\r\n                        <div className=\"flex items-center gap-3\">\r\n                            <div className=\"p-2 rounded-full bg-primary/10\">\r\n                                <Icon icon=\"lucide:calendar-days\" className=\"text-xl text-primary\" />\r\n                            </div>\r\n                            <div>\r\n                                <h2 className=\"text-xl font-semibold text-foreground\">Trading Activity</h2>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                            <Icon icon=\"lucide:share-2\" className=\"text-lg text-foreground-500 cursor-pointer hover:text-primary transition-colors\" />\r\n                        </div>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <div className=\"overflow-x-auto pb-2 min-h-[180px] flex items-center justify-center\">\r\n                            {filteredTrades.length === 0 ? (\r\n                                <div className=\"text-foreground-400 text-lg font-medium text-center w-full py-12\">\r\n                                    No trades taken in this period.\r\n                                </div>\r\n                            ) : (\r\n                                <TradeHeatmap\r\n                                    trades={filteredTrades}\r\n                                    startDate={heatmapStartDate}\r\n                                    endDate={heatmapEndDate}\r\n                                    className=\"min-w-[750px]\"\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <div className=\"flex flex-wrap gap-4 mt-4 pt-4 border-t border-divider justify-center text-xs text-foreground-500\">\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <span className=\"inline-block w-3 h-3 bg-default-100 rounded border border-divider\"></span>\r\n                                <span>No trades</span>\r\n                            </div>\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <span className=\"inline-block w-3 h-3 bg-[#ff7f7f] rounded border border-divider\"></span>\r\n                                <span>Min. loss</span>\r\n                            </div>\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <span className=\"inline-block w-3 h-3 bg-[#d32f2f] rounded border border-divider\"></span>\r\n                                <span>Max. loss</span>\r\n                            </div>\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <span className=\"inline-block w-3 h-3 bg-[#c6e48b] rounded border border-divider\"></span>\r\n                                <span>Min. profit</span>\r\n                            </div>\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <span className=\"inline-block w-3 h-3 bg-[#7bc96f] rounded border border-divider\"></span>\r\n                                <span>Max. profit</span>\r\n                            </div>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </motion.div>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default DeepAnalyticsPage;"],"names":["chartColors","CustomTooltip","active","payload","label","length","className","children","_jsx","_jsxs","value","SetupFrequencyChart","trades","accountingMethod","useAccountingMethod","useCashBasis","chartData","useMemo","uniqueTrades","seenTradeIds","Set","filter","trade","originalId","id","split","has","add","setupCounts","Object","forEach","setup","entries","map","name","count","index","fill","sort","a","b","Card","CardHeader","Icon","icon","Divider","CardBody","motion","div","style","height","initial","opacity","y","animate","transition","duration","ResponsiveContainer","width","BarChart","data","layout","margin","top","right","left","bottom","XAxis","type","hide","YAxis","dataKey","tick","fontSize","tickLine","axisLine","interval","RechartsTooltip","cursor","content","trigger","Bar","radius","barSize","entry","Cell","mapping","loaded","CustomLegend","backgroundColor","color","IndustryDistributionChart","colors","title","React","totalTrades","reduce","sum","item","percentage","slice","stockNames","_Fragment","join","RADIAN","Math","PI","ease","PieChart","Pie","cx","cy","labelLine","renderCustomizedLabel","midAngle","innerRadius","outerRadius","percent","x","cos","sin","textAnchor","dominantBaseline","toFixed","stroke","paddingAngle","CartesianGrid","strokeDasharray","horizontal","tickFormatter","round","domain","tickCount","fontWeight","substring","PnLDistributionCharts","tradesWithAccountingPL","useAccountingCalculations","displayName","useAccountingMethodDisplay","symbolPnLData","pnlBySymbol","acc","positionStatus","symbol","accountingPL","pnl","dayPnLData","days","pnlByDay","date","dayIndex","Date","getDay","day","formatCurrency","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","format","exit","chartConfig","barGap","fontFamily","getBarColor","cardVariants","hidden","visible","stiffness","damping","variants","staggerChildren","vertical","angle","Tooltip","animationDuration","animationBegin","fillOpacity","_createClass","Constructor","protoProps","staticProps","target","props","i","descriptor","enumerable","configurable","writable","defineProperty","key","_defineProperties","prototype","_extends","assign","arguments","source","hasOwnProperty","call","apply","this","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","p","_assertThisInitialized","self","ReferenceError","_slicedToArray","arr","Array","isArray","_arrayWithHoles","Symbol","iterator","toString","_arr","_n","_d","_e","_s","_i","next","done","push","err","_iterableToArrayLimit","TypeError","_nonIterableRest","emptyFunction","emptyFunctionWithReset","resetWarningCache","fn","module","propTypes","exports","shim","propName","componentName","location","propFullName","secret","Error","getShim","isRequired","ReactPropTypes","array","bool","func","number","object","string","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","factoryWithThrowingShims","areInputsEqual","newInputs","lastInputs","MILLISECONDS_IN_ONE_DAY","shiftDate","numDays","newDate","setDate","getDate","convertToDate","obj","getRange","idx","SQUARE_SIZE","CSS_PSEDUO_NAMESPACE","CalendarHeatmap","_getPrototypeOf2","_this","instance","_classCallCheck","_len","args","_key","concat","resultFn","isEqual","lastThis","lastResult","lastArgs","calledOnce","newArgs","memoizeOne","values","memo","floor","getStartDateWithEmptyDays","classForValue","titleForValue","tooltipDataAttrs","getTooltipDataAttrsForValue","subClass","superClass","create","constructor","_inherits","Component","_this$props","startDate","console","warn","timeDiff","getEndDate","ceil","gutterSize","showMonthLabels","showWeekdayLabels","getDateDifferenceInDays","endDate","getFullYear","getMonth","getStartDate","getNumEmptyDaysAtStart","DAYS_IN_WEEK","numDaysRoundedToWeek","getNumEmptyDaysAtEnd","getSquareSizeWithGutter","getWeekCount","getWeekdayLabelSize","getWeekWidth","getMonthLabelSize","valueCache","weekIndex","getWidth","getHeight","onClick","e","onMouseOver","onMouseLeave","_this2","showOutOfRangeDays","_this$getSquareCoordi2","getSquareCoordinates","getValueForIndex","rect","createElement","getClassNameForIndex","handleClick","handleMouseOver","handleMouseLeave","getTooltipDataAttrsForIndex","getTitleForIndex","transformDayElement","_this3","transform","getTransformForWeek","renderSquare","_this4","renderWeek","_this5","endOfWeek","_this5$getMonthLabelC2","getMonthLabelCoordinates","monthLabels","_this6","weekdayLabels","weekdayLabel","_this6$getWeekdayLabe2","getWeekdayLabelCoordinates","cssClasses","getValueCache","viewBox","getViewBox","getTransformForMonthLabels","renderMonthLabels","getTransformForAllWeeks","renderAllWeeks","getTransformForWeekdayLabels","renderWeekdayLabels","defaultProps","TradeHeatmap","relevantDate","getTradeDateForAccounting","match","tradePL","calculateTradePL","plRs","realisedAmount","avgEntry","avgExit","avgExitPrice","exitedQty","buySell","error","keys","startDateObj","endDateObj","createValidDate","dateStr","fallback","isNaN","getTime","tradeDatesArray","earliestTradeDate","latestTradeDate","toISOString","formattedDate","toLocaleDateString","weekday","year","month","MobileTooltip","delay","closeDelay","g","whileHover","scale","cloneElement","rx","DeepAnalyticsPage","isLoading","useTrades","portfolioSize","capitalChanges","useTruePortfolioWithTrades","useGlobalFilter","mappingLoaded","setMappingLoaded","useState","useEffect","async","Promise","resolve","reject","Papa","parse","download","header","complete","results","row","toUpperCase","industry","sector","loadIndustrySectorMapping","then","tradesWithIndustry","info","tradesByIndustry","industryChartData","t","tradesBySector","sectorChartData","industryStats","most","least","mostStocks","leastStocks","sectorStats","setupPerformance","tradesWithSetup","trim","tradesBySetup","setupStats","setupName","setupTrades","winningTrades","winRate","totalPfImpact","_cashPfImpact","_accrualPfImpact","pfImpact","processedTrades","expanded","exits","getExitDatesWithFallback","expandedTrade","_cashBasisExit","qty","price","analytics","closedTrades","groupedTrades","tradeGroups","Map","pl","set","group","get","from","expectancy","profitFactor","avgWinHold","avgLossHold","avgWin","avgLoss","winStreak","lossStreak","topWin","topLoss","avgWinPfImpact","avgLossPfImpact","totalPositivePfImpact","totalAbsoluteNegativePfImpact","avgPnLPerDay","uniqueTradingDays","sharpeRatio","calmarRatio","sortinoRatio","annualizedAverageReturn","annualRiskFreeRate","annualizedStdDev","annualizedDownsideDev","maxDrawdown","losingTrades","totalWinningTrades","totalLosingTrades","totalPnL","size","abs","Infinity","totalProfit","totalLoss","holdingDays","max","min","sortedTradesForStreaks","currentWinStreak","maxWinStreak","currentLossStreak","maxLossStreak","totalPL","latestExitDate","partialPL","exitDate","dailyPortfolioValues","calculateDailyPortfolioValues","dailyReturnsMap","calculateDailyReturns","dailyReturnsArray","dailyRiskFreeRate","pow","r","dailyStdDev","calculateStandardDeviation","annualizeMetric","calculateMaxDrawdown","dailyDownsideDev","calculateDownsideDeviation","calculateSharpeRatio","calculateCalmarRatio","calculateSortinoRatio","boundedSharpeRatio","isFinite","boundedCalmarRatio","boundedSortinoRatio","topAllocations","tradesWithAllocation","calculatedAllocation","positionSize","renderCell","columnKey","cellValue","String","globalStartDate","globalEndDate","today","undefined","getDateRangeFromFilter","filteredTrades","baseTrades","filtered","tradeDate","tradeDates","minTradeDate","maxTradeDate","heatmapStartDate","heatmapEndDate","minDate","setMonth","maxDate","fallbackEndDate","centerDate","formatRatio","StatsCard","tooltipContent","getColors","bg","text","placement","shadow","classNames","Accordion","selectionMode","defaultExpandedKeys","variant","AccordionItem","Table","th","td","wrapper","TableHeader","TableColumn","TableBody","items","emptyContent","TableRow","TableCell","columns","column"],"mappings":"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","x_google_ignoreList":[4]}